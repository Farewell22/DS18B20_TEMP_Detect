
TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c2c  080085d0  080085d0  000185d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091fc  080091fc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080091fc  080091fc  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091fc  080091fc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091fc  080091fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08009204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  200001f0  080093f4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  2000090c  080093f4  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011891  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003203  00000000  00000000  00031aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00034cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e45  00000000  00000000  00035f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a317  00000000  00000000  00036da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001739e  00000000  00000000  000510bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2b4  00000000  00000000  0006845a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d70  00000000  00000000  000f7710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fd480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080085b4 	.word	0x080085b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	080085b4 	.word	0x080085b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <multiTimerInstall>:
#include "string.h"

static MultiTimer* timerList = NULL;
static PlatformTicksFunction_t platformTicksFunction = NULL;

int multiTimerInstall(PlatformTicksFunction_t ticksFunc) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    if (ticksFunc == NULL) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <multiTimerInstall+0x14>
        return -1; // Indicate error if ticksFunc is NULL
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e003      	b.n	8001138 <multiTimerInstall+0x1c>
    }
    platformTicksFunction = ticksFunc;
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <multiTimerInstall+0x28>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
    return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000210 	.word	0x20000210

08001148 <removeTimer>:

static void removeTimer(MultiTimer* timer) {
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    MultiTimer** current = &timerList;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <removeTimer+0x3c>)
 8001152:	60fb      	str	r3, [r7, #12]
    while (*current) {
 8001154:	e00c      	b.n	8001170 <removeTimer+0x28>
        if (*current == timer) {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	d104      	bne.n	800116a <removeTimer+0x22>
            *current = timer->next;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	601a      	str	r2, [r3, #0]
            break;
 8001168:	e007      	b.n	800117a <removeTimer+0x32>
        }
        current = &(*current)->next;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]
    while (*current) {
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ee      	bne.n	8001156 <removeTimer+0xe>
    }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	2000020c 	.word	0x2000020c

08001188 <multiTimerStart>:

int multiTimerStart(MultiTimer* timer, uint64_t timing, MultiTimerCallback_t callback, void* userData) {
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	e9c7 2300 	strd	r2, r3, [r7]
    if (!timer || !callback || platformTicksFunction == NULL) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <multiTimerStart+0x20>
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <multiTimerStart+0x20>
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <multiTimerStart+0x90>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <multiTimerStart+0x26>
        return -1; // Return error if any parameter is invalid
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	e030      	b.n	8001210 <multiTimerStart+0x88>
    }

    removeTimer(timer); // Centralize removal logic
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff ffca 	bl	8001148 <removeTimer>

    timer->deadline = platformTicksFunction() + timing;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <multiTimerStart+0x90>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4798      	blx	r3
 80011ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011be:	1884      	adds	r4, r0, r2
 80011c0:	eb41 0503 	adc.w	r5, r1, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	e9c3 4502 	strd	r4, r5, [r3, #8]
    timer->callback = callback;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ce:	611a      	str	r2, [r3, #16]
    timer->userData = userData;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d4:	615a      	str	r2, [r3, #20]

    MultiTimer** current = &timerList;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <multiTimerStart+0x94>)
 80011d8:	617b      	str	r3, [r7, #20]
    while (*current && ((*current)->deadline < timer->deadline)) {
 80011da:	e002      	b.n	80011e2 <multiTimerStart+0x5a>
        current = &(*current)->next;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	617b      	str	r3, [r7, #20]
    while (*current && ((*current)->deadline < timer->deadline)) {
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00a      	beq.n	8001200 <multiTimerStart+0x78>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011f8:	4290      	cmp	r0, r2
 80011fa:	eb71 0303 	sbcs.w	r3, r1, r3
 80011fe:	d3ed      	bcc.n	80011dc <multiTimerStart+0x54>
    }
    timer->next = *current;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	601a      	str	r2, [r3, #0]
    *current = timer;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	601a      	str	r2, [r3, #0]

    return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}
 8001218:	20000210 	.word	0x20000210
 800121c:	2000020c 	.word	0x2000020c

08001220 <multiTimerYield>:
int multiTimerStop(MultiTimer* timer) {
    removeTimer(timer); // Use centralized removal function
    return 0;
}

int multiTimerYield(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
    if (platformTicksFunction == NULL) {
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <multiTimerYield+0x80>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <multiTimerYield+0x14>
        return -1; // Indicate error if platformTicksFunction is NULL
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e031      	b.n	8001298 <multiTimerYield+0x78>
    }
    uint64_t currentTicks = platformTicksFunction();
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <multiTimerYield+0x80>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4798      	blx	r3
 800123a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    while (timerList && (currentTicks >= timerList->deadline)) {
 800123e:	e011      	b.n	8001264 <multiTimerYield+0x44>
        MultiTimer* timer = timerList;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <multiTimerYield+0x84>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	607b      	str	r3, [r7, #4]
        timerList = timer->next; // Remove expired timer
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <multiTimerYield+0x84>)
 800124c:	6013      	str	r3, [r2, #0]

        if (timer->callback) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <multiTimerYield+0x44>
            timer->callback(timer, timer->userData); // Execute callback
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6952      	ldr	r2, [r2, #20]
 800125e:	4611      	mov	r1, r2
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
    while (timerList && (currentTicks >= timerList->deadline)) {
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <multiTimerYield+0x84>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d009      	beq.n	8001280 <multiTimerYield+0x60>
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <multiTimerYield+0x84>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001278:	4290      	cmp	r0, r2
 800127a:	eb71 0303 	sbcs.w	r3, r1, r3
 800127e:	d2df      	bcs.n	8001240 <multiTimerYield+0x20>
        }
    }
    return timerList ? (int)(timerList->deadline - currentTicks) : 0;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <multiTimerYield+0x84>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <multiTimerYield+0x76>
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <multiTimerYield+0x84>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	e000      	b.n	8001298 <multiTimerYield+0x78>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000210 	.word	0x20000210
 80012a4:	2000020c 	.word	0x2000020c

080012a8 <timer1_tick_get>:

static uint64_t g_timer1_tick;
uint64_t timer1_tick_get(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    return g_timer1_tick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <timer1_tick_get+0x14>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000218 	.word	0x20000218

080012c0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b4b0      	push	{r4, r5, r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    if(htim == (&htim1))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d108      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x22>
    {
        g_timer1_tick++;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	1c54      	adds	r4, r2, #1
 80012d8:	f143 0500 	adc.w	r5, r3, #0
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012de:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bcb0      	pop	{r4, r5, r7}
 80012ea:	4770      	bx	lr
 80012ec:	200006a0 	.word	0x200006a0
 80012f0:	20000218 	.word	0x20000218

080012f4 <Timer_buzzerCallback>:
/*timerbuzzer*/
MultiTimer g_timer_buzzer;
uint8_t g_buzzer_onoff = 0;

void Timer_buzzerCallback(MultiTimer* Timer,void* userdata)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
    if(g_buzzer_onoff == 1)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <Timer_buzzerCallback+0x38>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d103      	bne.n	800130e <Timer_buzzerCallback+0x1a>
    {
        HAL_GPIO_TogglePin(buzzer_GPIO_Port,buzzer_Pin);
 8001306:	2120      	movs	r1, #32
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <Timer_buzzerCallback+0x3c>)
 800130a:	f002 fc12 	bl	8003b32 <HAL_GPIO_TogglePin>
    }
    multiTimerStart(&g_timer_buzzer,1,Timer_buzzerCallback,NULL);
 800130e:	2300      	movs	r3, #0
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <Timer_buzzerCallback+0x40>)
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	f04f 0201 	mov.w	r2, #1
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <Timer_buzzerCallback+0x44>)
 8001320:	f7ff ff32 	bl	8001188 <multiTimerStart>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000238 	.word	0x20000238
 8001330:	40010c00 	.word	0x40010c00
 8001334:	080012f5 	.word	0x080012f5
 8001338:	20000220 	.word	0x20000220

0800133c <buzzer_onoff>:

void buzzer_onoff(uint8_t onoff)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af02      	add	r7, sp, #8
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
    if(onoff == 1)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d10e      	bne.n	800136a <buzzer_onoff+0x2e>
    {
        g_buzzer_onoff  = 1;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <buzzer_onoff+0x3c>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
        multiTimerStart(&g_timer_buzzer,2,Timer_buzzerCallback,NULL);
 8001352:	2300      	movs	r3, #0
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <buzzer_onoff+0x40>)
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	f04f 0202 	mov.w	r2, #2
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <buzzer_onoff+0x44>)
 8001364:	f7ff ff10 	bl	8001188 <multiTimerStart>
    }else{
        // multiTimerStop(&g_timer_buzzer);
        g_buzzer_onoff = 0;
    }    
}
 8001368:	e002      	b.n	8001370 <buzzer_onoff+0x34>
        g_buzzer_onoff = 0;
 800136a:	4b03      	ldr	r3, [pc, #12]	; (8001378 <buzzer_onoff+0x3c>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000238 	.word	0x20000238
 800137c:	080012f5 	.word	0x080012f5
 8001380:	20000220 	.word	0x20000220

08001384 <tx_buf_init>:


/*gettemp*/
uint8_t tx_buf[7*BUFFER_SIZE];
void tx_buf_init(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
    for(short i =0;i<7*BUFFER_SIZE;i=i+7)
 800138a:	2300      	movs	r3, #0
 800138c:	80fb      	strh	r3, [r7, #6]
 800138e:	e008      	b.n	80013a2 <tx_buf_init+0x1e>
    {
        tx_buf[i] = 0xaa;
 8001390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <tx_buf_init+0x58>)
 8001396:	21aa      	movs	r1, #170	; 0xaa
 8001398:	54d1      	strb	r1, [r2, r3]
    for(short i =0;i<7*BUFFER_SIZE;i=i+7)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	3307      	adds	r3, #7
 800139e:	b29b      	uxth	r3, r3
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80013aa:	dbf1      	blt.n	8001390 <tx_buf_init+0xc>
    }
    for(short i =6;i<7*BUFFER_SIZE;i=i+7)
 80013ac:	2306      	movs	r3, #6
 80013ae:	80bb      	strh	r3, [r7, #4]
 80013b0:	e008      	b.n	80013c4 <tx_buf_init+0x40>
    {
        tx_buf[i] = 0xbb;
 80013b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <tx_buf_init+0x58>)
 80013b8:	21bb      	movs	r1, #187	; 0xbb
 80013ba:	54d1      	strb	r1, [r2, r3]
    for(short i =6;i<7*BUFFER_SIZE;i=i+7)
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	3307      	adds	r3, #7
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	80bb      	strh	r3, [r7, #4]
 80013c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013c8:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80013cc:	dbf1      	blt.n	80013b2 <tx_buf_init+0x2e>
    }
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000023c 	.word	0x2000023c

080013e0 <crc8_calculate>:

uint8_t crc8_calculate(uint8_t* buf,uint8_t len)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
    uint8_t crc8 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i=0;i<len;i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73bb      	strb	r3, [r7, #14]
 80013f4:	e009      	b.n	800140a <crc8_calculate+0x2a>
    {
        crc8+=buf[i];
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	4413      	add	r3, r2
 8001402:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i=0;i<len;i++)
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	3301      	adds	r3, #1
 8001408:	73bb      	strb	r3, [r7, #14]
 800140a:	7bba      	ldrb	r2, [r7, #14]
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3f1      	bcc.n	80013f6 <crc8_calculate+0x16>
    }
    return crc8;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
	...

08001420 <float_to_bytes_update>:



void float_to_bytes_update(void)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
    for(uint8_t i =0;i<BUFFER_SIZE;i++)
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	e022      	b.n	8001472 <float_to_bytes_update+0x52>
    {
        memcpy(&tx_buf[1+i*7],&temps.buffer[i],sizeof(float));
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	3301      	adds	r3, #1
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <float_to_bytes_update+0x64>)
 8001438:	4413      	add	r3, r2
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	320c      	adds	r2, #12
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4911      	ldr	r1, [pc, #68]	; (8001488 <float_to_bytes_update+0x68>)
 8001442:	440a      	add	r2, r1
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	601a      	str	r2, [r3, #0]
        tx_buf[5+i*7] = crc8_calculate(&tx_buf[0+i*7],5);
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <float_to_bytes_update+0x64>)
 8001452:	1898      	adds	r0, r3, r2
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	1d5c      	adds	r4, r3, #5
 800145e:	2105      	movs	r1, #5
 8001460:	f7ff ffbe 	bl	80013e0 <crc8_calculate>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <float_to_bytes_update+0x64>)
 800146a:	551a      	strb	r2, [r3, r4]
    for(uint8_t i =0;i<BUFFER_SIZE;i++)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	3301      	adds	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b4f      	cmp	r3, #79	; 0x4f
 8001476:	d9d9      	bls.n	800142c <float_to_bytes_update+0xc>
    }

}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}
 8001482:	bf00      	nop
 8001484:	2000023c 	.word	0x2000023c
 8001488:	20000488 	.word	0x20000488

0800148c <trigger_warn>:


void trigger_warn(uint8_t onoff)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
    if(onoff)
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d007      	beq.n	80014ac <trigger_warn+0x20>
    {
        buzzer_onoff(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff ff4d 	bl	800133c <buzzer_onoff>
        led_control(2,1);
 80014a2:	2101      	movs	r1, #1
 80014a4:	2002      	movs	r0, #2
 80014a6:	f000 fb6f 	bl	8001b88 <led_control>
    }else{
        buzzer_onoff(0);
        led_control(2,0);
    }
}
 80014aa:	e006      	b.n	80014ba <trigger_warn+0x2e>
        buzzer_onoff(0);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff45 	bl	800133c <buzzer_onoff>
        led_control(2,0);
 80014b2:	2100      	movs	r1, #0
 80014b4:	2002      	movs	r0, #2
 80014b6:	f000 fb67 	bl	8001b88 <led_control>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <slide_windows_fliter>:


float slide_windows_fliter(float value)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	6078      	str	r0, [r7, #4]
    float output = 0;
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
    if(temps.window_cur < WINDOW_SIZE)
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <slide_windows_fliter+0xb8>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	2b09      	cmp	r3, #9
 80014d8:	d80d      	bhi.n	80014f6 <slide_windows_fliter+0x32>
    {
        temps.window_buffer[temps.window_cur++] = value; //先把窗口填满
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <slide_windows_fliter+0xb8>)
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	b2d1      	uxtb	r1, r2
 80014e2:	4a26      	ldr	r2, [pc, #152]	; (800157c <slide_windows_fliter+0xb8>)
 80014e4:	7051      	strb	r1, [r2, #1]
 80014e6:	4925      	ldr	r1, [pc, #148]	; (800157c <slide_windows_fliter+0xb8>)
 80014e8:	3302      	adds	r3, #2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        output = value;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e03d      	b.n	8001572 <slide_windows_fliter+0xae>
    }else{
        memcpy(&temps.window_buffer[0],&temps.window_buffer[1],(WINDOW_SIZE - 1)*sizeof(float));
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	4921      	ldr	r1, [pc, #132]	; (8001580 <slide_windows_fliter+0xbc>)
 80014fa:	4822      	ldr	r0, [pc, #136]	; (8001584 <slide_windows_fliter+0xc0>)
 80014fc:	f005 fa3d 	bl	800697a <memcpy>
        temps.window_buffer[WINDOW_SIZE - 1] = value;
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <slide_windows_fliter+0xb8>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	62d3      	str	r3, [r2, #44]	; 0x2c
        for(uint8_t i = 0;i<WINDOW_SIZE;i++)
 8001506:	2300      	movs	r3, #0
 8001508:	72fb      	strb	r3, [r7, #11]
 800150a:	e00d      	b.n	8001528 <slide_windows_fliter+0x64>
        {
            output+= temps.window_buffer[i];
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <slide_windows_fliter+0xb8>)
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	4619      	mov	r1, r3
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fb0b 	bl	8000b34 <__addsf3>
 800151e:	4603      	mov	r3, r0
 8001520:	60fb      	str	r3, [r7, #12]
        for(uint8_t i = 0;i<WINDOW_SIZE;i++)
 8001522:	7afb      	ldrb	r3, [r7, #11]
 8001524:	3301      	adds	r3, #1
 8001526:	72fb      	strb	r3, [r7, #11]
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	2b09      	cmp	r3, #9
 800152c:	d9ee      	bls.n	800150c <slide_windows_fliter+0x48>
        }
        output = output / WINDOW_SIZE;
 800152e:	4916      	ldr	r1, [pc, #88]	; (8001588 <slide_windows_fliter+0xc4>)
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fcbb 	bl	8000eac <__aeabi_fdiv>
 8001536:	4603      	mov	r3, r0
 8001538:	60fb      	str	r3, [r7, #12]
        if(output>=temps.warning_temp)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <slide_windows_fliter+0xb8>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4619      	mov	r1, r3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fdb1 	bl	80010a8 <__aeabi_fcmpge>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <slide_windows_fliter+0x90>
        {
            trigger_warn(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff ff9d 	bl	800148c <trigger_warn>
 8001552:	e002      	b.n	800155a <slide_windows_fliter+0x96>
        }else{
            trigger_warn(0);
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff ff99 	bl	800148c <trigger_warn>
        }
         OLED_Showdecimal(40,3,output,2,2,16,0);
 800155a:	2300      	movs	r3, #0
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2310      	movs	r3, #16
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2302      	movs	r3, #2
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2302      	movs	r3, #2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	2103      	movs	r1, #3
 800156c:	2028      	movs	r0, #40	; 0x28
 800156e:	f001 f9a9 	bl	80028c4 <OLED_Showdecimal>
    }
    return output;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000488 	.word	0x20000488
 8001580:	20000494 	.word	0x20000494
 8001584:	20000490 	.word	0x20000490
 8001588:	41200000 	.word	0x41200000

0800158c <get_tempbuffer>:

// uint8_t printf_buf = 0;
extern DMA_HandleTypeDef hdma_usart1_tx;

void get_tempbuffer(void)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
    float temp = DS18B20_Get_Temp();
 8001592:	f000 f9f5 	bl	8001980 <DS18B20_Get_Temp>
 8001596:	6078      	str	r0, [r7, #4]
    temps.buffer[temps.buffer_cur++] = slide_windows_fliter(temp);
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <get_tempbuffer+0x6c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	b2d1      	uxtb	r1, r2
 80015a0:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <get_tempbuffer+0x6c>)
 80015a2:	7011      	strb	r1, [r2, #0]
 80015a4:	461c      	mov	r4, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff8c 	bl	80014c4 <slide_windows_fliter>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4912      	ldr	r1, [pc, #72]	; (80015f8 <get_tempbuffer+0x6c>)
 80015b0:	f104 030c 	add.w	r3, r4, #12
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if(temps.buffer_cur>=BUFFER_SIZE)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <get_tempbuffer+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b4f      	cmp	r3, #79	; 0x4f
 80015be:	d916      	bls.n	80015ee <get_tempbuffer+0x62>
    {
        temps.buffer_cur = 0;
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <get_tempbuffer+0x6c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
        float_to_bytes_update();
 80015c6:	f7ff ff2b 	bl	8001420 <float_to_bytes_update>
        huart1.gState = HAL_UART_STATE_READY;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <get_tempbuffer+0x70>)
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hdma_usart1_tx.State = HAL_DMA_STATE_READY;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <get_tempbuffer+0x74>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        __HAL_UNLOCK(&hdma_usart1_tx);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <get_tempbuffer+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2020 	strb.w	r2, [r3, #32]
        HAL_UART_Transmit_DMA(&huart1,tx_buf,BUFFER_SIZE*7);
 80015e2:	f44f 720c 	mov.w	r2, #560	; 0x230
 80015e6:	4907      	ldr	r1, [pc, #28]	; (8001604 <get_tempbuffer+0x78>)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <get_tempbuffer+0x70>)
 80015ea:	f004 f845 	bl	8005678 <HAL_UART_Transmit_DMA>
    }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000488 	.word	0x20000488
 80015fc:	200006e8 	.word	0x200006e8
 8001600:	20000778 	.word	0x20000778
 8001604:	2000023c 	.word	0x2000023c

08001608 <Timer_gettempCallback>:


MultiTimer g_timer_get_temp;
void Timer_gettempCallback(MultiTimer* Timer,void* userdata)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af02      	add	r7, sp, #8
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]

    get_tempbuffer();
 8001612:	f7ff ffbb 	bl	800158c <get_tempbuffer>
    multiTimerStart(&g_timer_get_temp,10,Timer_gettempCallback,NULL);//
 8001616:	2300      	movs	r3, #0
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <Timer_gettempCallback+0x2c>)
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	f04f 020a 	mov.w	r2, #10
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <Timer_gettempCallback+0x30>)
 8001628:	f7ff fdae 	bl	8001188 <multiTimerStart>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	08001609 	.word	0x08001609
 8001638:	20000470 	.word	0x20000470

0800163c <timers_init>:

/*gettemp*/


void timers_init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
  HAL_TIM_Base_Start_IT(&htim1);
 8001642:	480a      	ldr	r0, [pc, #40]	; (800166c <timers_init+0x30>)
 8001644:	f003 fb9a 	bl	8004d7c <HAL_TIM_Base_Start_IT>
  multiTimerInstall(timer1_tick_get);
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <timers_init+0x34>)
 800164a:	f7ff fd67 	bl	800111c <multiTimerInstall>
  multiTimerStart(&g_timer_get_temp,10,Timer_gettempCallback,NULL);
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <timers_init+0x38>)
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	f04f 020a 	mov.w	r2, #10
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <timers_init+0x3c>)
 8001660:	f7ff fd92 	bl	8001188 <multiTimerStart>
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200006a0 	.word	0x200006a0
 8001670:	080012a9 	.word	0x080012a9
 8001674:	08001609 	.word	0x08001609
 8001678:	20000470 	.word	0x20000470

0800167c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_DMA_Init+0x38>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <MX_DMA_Init+0x38>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6153      	str	r3, [r2, #20]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_DMA_Init+0x38>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	200e      	movs	r0, #14
 80016a0:	f001 fe6f 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016a4:	200e      	movs	r0, #14
 80016a6:	f001 fe88 	bl	80033ba <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <delay_us>:
#include "DS18B20.h"
temp_t temps;

#define CPU_FREQUENCY_MHZ    72		// STM32时钟主频
void delay_us(__IO uint32_t delay)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    int last, curr, val;
    int temp;

    while (delay != 0)
 80016c0:	e037      	b.n	8001732 <delay_us+0x7a>
    {
        temp = delay > 900 ? 900 : delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80016c8:	d801      	bhi.n	80016ce <delay_us+0x16>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	e001      	b.n	80016d2 <delay_us+0x1a>
 80016ce:	f44f 7361 	mov.w	r3, #900	; 0x384
 80016d2:	617b      	str	r3, [r7, #20]
        last = SysTick->VAL;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <delay_us+0x8c>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        curr = last - CPU_FREQUENCY_MHZ * temp;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f06f 0247 	mvn.w	r2, #71	; 0x47
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
        if (curr >= 0)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0b      	blt.n	8001708 <delay_us+0x50>
        {
            do
            {
                val = SysTick->VAL;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <delay_us+0x8c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	60bb      	str	r3, [r7, #8]
            }
            while ((val < last) && (val >= curr));
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	da15      	bge.n	800172a <delay_us+0x72>
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	429a      	cmp	r2, r3
 8001704:	daf4      	bge.n	80016f0 <delay_us+0x38>
 8001706:	e010      	b.n	800172a <delay_us+0x72>
        }
        else
        {
            curr += CPU_FREQUENCY_MHZ * 1000;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800170e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001712:	60fb      	str	r3, [r7, #12]
            do
            {
                val = SysTick->VAL;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <delay_us+0x8c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	60bb      	str	r3, [r7, #8]
            }
            while ((val <= last) || (val > curr));
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	429a      	cmp	r2, r3
 8001720:	ddf8      	ble.n	8001714 <delay_us+0x5c>
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	429a      	cmp	r2, r3
 8001728:	dcf4      	bgt.n	8001714 <delay_us+0x5c>
        }
        delay -= temp;
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	607b      	str	r3, [r7, #4]
    while (delay != 0)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1c4      	bne.n	80016c2 <delay_us+0xa>
    }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	e000e010 	.word	0xe000e010

08001748 <DS18B20_Rst>:
	HAL_Delay(Delay);
}

//复位DS18B20
void DS18B20_Rst(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
CLR_DS18B20();    //拉低DQ
 800174c:	2200      	movs	r2, #0
 800174e:	2110      	movs	r1, #16
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <DS18B20_Rst+0x2c>)
 8001752:	f002 f9d6 	bl	8003b02 <HAL_GPIO_WritePin>
delay_us(750);    //拉低750us
 8001756:	f240 20ee 	movw	r0, #750	; 0x2ee
 800175a:	f7ff ffad 	bl	80016b8 <delay_us>
SET_DS18B20();;   //DQ=1
 800175e:	2201      	movs	r2, #1
 8001760:	2110      	movs	r1, #16
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <DS18B20_Rst+0x2c>)
 8001764:	f002 f9cd 	bl	8003b02 <HAL_GPIO_WritePin>
delay_us(15);     //15US
 8001768:	200f      	movs	r0, #15
 800176a:	f7ff ffa5 	bl	80016b8 <delay_us>
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40010800 	.word	0x40010800

08001778 <DS18B20_Check>:

//等待DS18B20的回应
//返回1:未检测到ds18b20的存在
//返回0:存在
uint8_t DS18B20_Check(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
uint8_t retry=0;
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]

while (DS18B20_DQ_IN&&retry<200)
 8001782:	e005      	b.n	8001790 <DS18B20_Check+0x18>
{
    retry++;
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	3301      	adds	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
    delay_us(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff ff94 	bl	80016b8 <delay_us>
while (DS18B20_DQ_IN&&retry<200)
 8001790:	2110      	movs	r1, #16
 8001792:	4815      	ldr	r0, [pc, #84]	; (80017e8 <DS18B20_Check+0x70>)
 8001794:	f002 f99e 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <DS18B20_Check+0x2c>
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2bc7      	cmp	r3, #199	; 0xc7
 80017a2:	d9ef      	bls.n	8001784 <DS18B20_Check+0xc>
};
if(retry>=200)return 1;
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2bc7      	cmp	r3, #199	; 0xc7
 80017a8:	d901      	bls.n	80017ae <DS18B20_Check+0x36>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e018      	b.n	80017e0 <DS18B20_Check+0x68>
else retry=0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	71fb      	strb	r3, [r7, #7]
while (!DS18B20_DQ_IN&&retry<240)
 80017b2:	e005      	b.n	80017c0 <DS18B20_Check+0x48>
{
    retry++;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	3301      	adds	r3, #1
 80017b8:	71fb      	strb	r3, [r7, #7]
    delay_us(1);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff ff7c 	bl	80016b8 <delay_us>
while (!DS18B20_DQ_IN&&retry<240)
 80017c0:	2110      	movs	r1, #16
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <DS18B20_Check+0x70>)
 80017c4:	f002 f986 	bl	8003ad4 <HAL_GPIO_ReadPin>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <DS18B20_Check+0x5c>
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2bef      	cmp	r3, #239	; 0xef
 80017d2:	d9ef      	bls.n	80017b4 <DS18B20_Check+0x3c>
};
if(retry>=240)return 1;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2bef      	cmp	r3, #239	; 0xef
 80017d8:	d901      	bls.n	80017de <DS18B20_Check+0x66>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <DS18B20_Check+0x68>
return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010800 	.word	0x40010800

080017ec <DS18B20_Read_Bit>:


//从DS18B20读取一个位
//返回值:1/0
uint8_t DS18B20_Read_Bit(void)           // read one bit
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
uint8_t data;

CLR_DS18B20();   //拉低DQ
 80017f2:	2200      	movs	r2, #0
 80017f4:	2110      	movs	r1, #16
 80017f6:	4811      	ldr	r0, [pc, #68]	; (800183c <DS18B20_Read_Bit+0x50>)
 80017f8:	f002 f983 	bl	8003b02 <HAL_GPIO_WritePin>
delay_us(2);
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7ff ff5b 	bl	80016b8 <delay_us>
SET_DS18B20();;  //DQ=1
 8001802:	2201      	movs	r2, #1
 8001804:	2110      	movs	r1, #16
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <DS18B20_Read_Bit+0x50>)
 8001808:	f002 f97b 	bl	8003b02 <HAL_GPIO_WritePin>
delay_us(12);
 800180c:	200c      	movs	r0, #12
 800180e:	f7ff ff53 	bl	80016b8 <delay_us>
if(DS18B20_DQ_IN)data=1;
 8001812:	2110      	movs	r1, #16
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <DS18B20_Read_Bit+0x50>)
 8001816:	f002 f95d 	bl	8003ad4 <HAL_GPIO_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <DS18B20_Read_Bit+0x3a>
 8001820:	2301      	movs	r3, #1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	e001      	b.n	800182a <DS18B20_Read_Bit+0x3e>
else data=0;
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
delay_us(50);
 800182a:	2032      	movs	r0, #50	; 0x32
 800182c:	f7ff ff44 	bl	80016b8 <delay_us>

return data;
 8001830:	79fb      	ldrb	r3, [r7, #7]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40010800 	.word	0x40010800

08001840 <DS18B20_Read_Byte>:


//从ds18b20读取一个字节
//返回值:读取到的数据
uint8_t DS18B20_Read_Byte(void)    // read one byte
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
uint8_t i,j,dat;
dat=0;
 8001846:	2300      	movs	r3, #0
 8001848:	71bb      	strb	r3, [r7, #6]

for (i=1;i<=8;i++)
 800184a:	2301      	movs	r3, #1
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	e010      	b.n	8001872 <DS18B20_Read_Byte+0x32>
{
    j=DS18B20_Read_Bit();
 8001850:	f7ff ffcc 	bl	80017ec <DS18B20_Read_Bit>
 8001854:	4603      	mov	r3, r0
 8001856:	717b      	strb	r3, [r7, #5]
    dat=(j<<7)|(dat>>1);
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	b25a      	sxtb	r2, r3
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	71bb      	strb	r3, [r7, #6]
for (i=1;i<=8;i++)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	3301      	adds	r3, #1
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d9eb      	bls.n	8001850 <DS18B20_Read_Byte+0x10>
}
return dat;
 8001878:	79bb      	ldrb	r3, [r7, #6]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <DS18B20_Write_Byte>:

//*本程序由 www.stm32cube.com 提供
//写一个字节到DS18B20
//dat:要写入的字节
void DS18B20_Write_Byte(uint8_t dat)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
uint8_t j;
uint8_t testb;

for (j=1;j<=8;j++)
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e02d      	b.n	80018f0 <DS18B20_Write_Byte+0x6c>
{
    testb=dat&0x01;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	73bb      	strb	r3, [r7, #14]
    dat=dat>>1;
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	71fb      	strb	r3, [r7, #7]
    if (testb)
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d010      	beq.n	80018ca <DS18B20_Write_Byte+0x46>
    {
        CLR_DS18B20(); //DS18B20_DQ_OUT=0;// Write 1
 80018a8:	2200      	movs	r2, #0
 80018aa:	2110      	movs	r1, #16
 80018ac:	4814      	ldr	r0, [pc, #80]	; (8001900 <DS18B20_Write_Byte+0x7c>)
 80018ae:	f002 f928 	bl	8003b02 <HAL_GPIO_WritePin>
        delay_us(2);
 80018b2:	2002      	movs	r0, #2
 80018b4:	f7ff ff00 	bl	80016b8 <delay_us>
        SET_DS18B20(); //DS18B20_DQ_OUT=1;
 80018b8:	2201      	movs	r2, #1
 80018ba:	2110      	movs	r1, #16
 80018bc:	4810      	ldr	r0, [pc, #64]	; (8001900 <DS18B20_Write_Byte+0x7c>)
 80018be:	f002 f920 	bl	8003b02 <HAL_GPIO_WritePin>
        delay_us(60);
 80018c2:	203c      	movs	r0, #60	; 0x3c
 80018c4:	f7ff fef8 	bl	80016b8 <delay_us>
 80018c8:	e00f      	b.n	80018ea <DS18B20_Write_Byte+0x66>
    }
    else
    {
        CLR_DS18B20(); //DS18B20_DQ_OUT=0;// Write 0
 80018ca:	2200      	movs	r2, #0
 80018cc:	2110      	movs	r1, #16
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <DS18B20_Write_Byte+0x7c>)
 80018d0:	f002 f917 	bl	8003b02 <HAL_GPIO_WritePin>
        delay_us(60);
 80018d4:	203c      	movs	r0, #60	; 0x3c
 80018d6:	f7ff feef 	bl	80016b8 <delay_us>
        SET_DS18B20(); //DS18B20_DQ_OUT=1;
 80018da:	2201      	movs	r2, #1
 80018dc:	2110      	movs	r1, #16
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <DS18B20_Write_Byte+0x7c>)
 80018e0:	f002 f90f 	bl	8003b02 <HAL_GPIO_WritePin>
        delay_us(2);
 80018e4:	2002      	movs	r0, #2
 80018e6:	f7ff fee7 	bl	80016b8 <delay_us>
for (j=1;j<=8;j++)
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	3301      	adds	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d9ce      	bls.n	8001894 <DS18B20_Write_Byte+0x10>
    }
}
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40010800 	.word	0x40010800

08001904 <DS18B20_Start>:


//开始温度转换
void DS18B20_Start(void)// ds1820 start convert
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
DS18B20_Rst();
 8001908:	f7ff ff1e 	bl	8001748 <DS18B20_Rst>
DS18B20_Check();//1ms
 800190c:	f7ff ff34 	bl	8001778 <DS18B20_Check>
DS18B20_Write_Byte(0xcc);// skip rom //496us
 8001910:	20cc      	movs	r0, #204	; 0xcc
 8001912:	f7ff ffb7 	bl	8001884 <DS18B20_Write_Byte>
DS18B20_Write_Byte(0x44);// convert//496us
 8001916:	2044      	movs	r0, #68	; 0x44
 8001918:	f7ff ffb4 	bl	8001884 <DS18B20_Write_Byte>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <DS18B20_Init>:

//初始化DS18B20的IO口DQ同时检查DS的存在
//返回1:不存在
//返回0:存在
uint8_t DS18B20_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
//配置PA2口
GPIO_InitTypeDef GPIO_InitStruct;

/* GPIO Ports Clock Enable */
__GPIOA_CLK_ENABLE();
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <DS18B20_Init+0x58>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <DS18B20_Init+0x58>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <DS18B20_Init+0x58>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin : PA2 */
GPIO_InitStruct.Pin = DS18B20_BIT;
 800193e:	2310      	movs	r3, #16
 8001940:	60bb      	str	r3, [r7, #8]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	617b      	str	r3, [r7, #20]
HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4619      	mov	r1, r3
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <DS18B20_Init+0x5c>)
 8001956:	f001 ff39 	bl	80037cc <HAL_GPIO_Init>

SET_DS18B20();         //使PA2输出高电平
 800195a:	2201      	movs	r2, #1
 800195c:	2110      	movs	r1, #16
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <DS18B20_Init+0x5c>)
 8001960:	f002 f8cf 	bl	8003b02 <HAL_GPIO_WritePin>

DS18B20_Rst();
 8001964:	f7ff fef0 	bl	8001748 <DS18B20_Rst>
return DS18B20_Check();
 8001968:	f7ff ff06 	bl	8001778 <DS18B20_Check>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40010800 	.word	0x40010800

08001980 <DS18B20_Get_Temp>:

//从ds18b20得到温度值
//精度：0.1C
//返回值：温度值 （-550~1250）
float DS18B20_Get_Temp(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
    uint8_t temp;
    uint8_t TL,TH;
	int16_t tem;
    DS18B20_Start ();   // ds1820 start convert  2ms
 8001986:	f7ff ffbd 	bl	8001904 <DS18B20_Start>
    DS18B20_Rst();
 800198a:	f7ff fedd 	bl	8001748 <DS18B20_Rst>
    DS18B20_Check();  //1ms
 800198e:	f7ff fef3 	bl	8001778 <DS18B20_Check>
    DS18B20_Write_Byte(0xcc);// skip rom
 8001992:	20cc      	movs	r0, #204	; 0xcc
 8001994:	f7ff ff76 	bl	8001884 <DS18B20_Write_Byte>
    DS18B20_Write_Byte(0xbe);// convert   //1ms
 8001998:	20be      	movs	r0, #190	; 0xbe
 800199a:	f7ff ff73 	bl	8001884 <DS18B20_Write_Byte>
    TL=DS18B20_Read_Byte(); // LSB
 800199e:	f7ff ff4f 	bl	8001840 <DS18B20_Read_Byte>
 80019a2:	4603      	mov	r3, r0
 80019a4:	71bb      	strb	r3, [r7, #6]
    TH=DS18B20_Read_Byte(); // MSB  1.6ms
 80019a6:	f7ff ff4b 	bl	8001840 <DS18B20_Read_Byte>
 80019aa:	4603      	mov	r3, r0
 80019ac:	717b      	strb	r3, [r7, #5]

    if(TH>7)
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	2b07      	cmp	r3, #7
 80019b2:	d908      	bls.n	80019c6 <DS18B20_Get_Temp+0x46>
    {
        TH=~TH;
 80019b4:	797b      	ldrb	r3, [r7, #5]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	717b      	strb	r3, [r7, #5]
        TL=~TL;
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	43db      	mvns	r3, r3
 80019be:	71bb      	strb	r3, [r7, #6]
        temp=0;//温度为负
 80019c0:	2300      	movs	r3, #0
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	e001      	b.n	80019ca <DS18B20_Get_Temp+0x4a>
    }else temp=1;//温度为正
 80019c6:	2301      	movs	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
    tem=TH; //获得高八位
 80019ca:	797b      	ldrb	r3, [r7, #5]
 80019cc:	807b      	strh	r3, [r7, #2]
    tem<<=8;
 80019ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	807b      	strh	r3, [r7, #2]
    tem+=TL;//获得低八位
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	807b      	strh	r3, [r7, #2]
    tem=(float)tem*0.625;//转换
 80019e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f958 	bl	8000c9c <__aeabi_i2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd1a 	bl	8000428 <__aeabi_f2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <DS18B20_Get_Temp+0xe4>)
 80019fa:	f7fe fd6d 	bl	80004d8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f817 	bl	8000a38 <__aeabi_d2iz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	807b      	strh	r3, [r7, #2]
	if(temp)return tem/10.00; //返回温度值
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d011      	beq.n	8001a38 <DS18B20_Get_Temp+0xb8>
 8001a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fcf3 	bl	8000404 <__aeabi_i2d>
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <DS18B20_Get_Temp+0xe8>)
 8001a24:	f7fe fe82 	bl	800072c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f82a 	bl	8000a88 <__aeabi_d2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	e011      	b.n	8001a5c <DS18B20_Get_Temp+0xdc>
	else return -tem/10.00;
 8001a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fce0 	bl	8000404 <__aeabi_i2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <DS18B20_Get_Temp+0xe8>)
 8001a4a:	f7fe fe6f 	bl	800072c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f817 	bl	8000a88 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	3fe40000 	.word	0x3fe40000
 8001a68:	40240000 	.word	0x40240000

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a80:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a36      	ldr	r2, [pc, #216]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a30      	ldr	r2, [pc, #192]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae6:	4825      	ldr	r0, [pc, #148]	; (8001b7c <MX_GPIO_Init+0x110>)
 8001ae8:	f002 f80b 	bl	8003b02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18_GPIO_Port, DS18_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2110      	movs	r1, #16
 8001af0:	4823      	ldr	r0, [pc, #140]	; (8001b80 <MX_GPIO_Init+0x114>)
 8001af2:	f002 f806 	bl	8003b02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2128      	movs	r1, #40	; 0x28
 8001afa:	4822      	ldr	r0, [pc, #136]	; (8001b84 <MX_GPIO_Init+0x118>)
 8001afc:	f002 f801 	bl	8003b02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	4818      	ldr	r0, [pc, #96]	; (8001b7c <MX_GPIO_Init+0x110>)
 8001b1a:	f001 fe57 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18_Pin;
 8001b1e:	2310      	movs	r3, #16
 8001b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4619      	mov	r1, r3
 8001b34:	4812      	ldr	r0, [pc, #72]	; (8001b80 <MX_GPIO_Init+0x114>)
 8001b36:	f001 fe49 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|buzzer_Pin;
 8001b3a:	2328      	movs	r3, #40	; 0x28
 8001b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_GPIO_Init+0x118>)
 8001b52:	f001 fe3b 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <MX_GPIO_Init+0x118>)
 8001b6c:	f001 fe2e 	bl	80037cc <HAL_GPIO_Init>

}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40010800 	.word	0x40010800
 8001b84:	40010c00 	.word	0x40010c00

08001b88 <led_control>:

/* USER CODE BEGIN 2 */
void led_control(uint8_t led_num,uint8_t led_state)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]

	if(led_num == 1)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d110      	bne.n	8001bc0 <led_control+0x38>
	{
		if(led_state)
 8001b9e:	79bb      	ldrb	r3, [r7, #6]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <led_control+0x2a>
		{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4810      	ldr	r0, [pc, #64]	; (8001bec <led_control+0x64>)
 8001bac:	f001 ffa9 	bl	8003b02 <HAL_GPIO_WritePin>
 8001bb0:	e019      	b.n	8001be6 <led_control+0x5e>
		}else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <led_control+0x64>)
 8001bba:	f001 ffa2 	bl	8003b02 <HAL_GPIO_WritePin>
 8001bbe:	e012      	b.n	8001be6 <led_control+0x5e>
		}
	}else if(led_num == 2)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d10e      	bne.n	8001be4 <led_control+0x5c>
	{
		if(led_state)
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <led_control+0x50>
		{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2108      	movs	r1, #8
 8001bd0:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <led_control+0x68>)
 8001bd2:	f001 ff96 	bl	8003b02 <HAL_GPIO_WritePin>
 8001bd6:	e006      	b.n	8001be6 <led_control+0x5e>
		}else{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2108      	movs	r1, #8
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <led_control+0x68>)
 8001bde:	f001 ff90 	bl	8003b02 <HAL_GPIO_WritePin>
 8001be2:	e000      	b.n	8001be6 <led_control+0x5e>
		}
	}else{
		return;
 8001be4:	bf00      	nop
	}
}
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40010c00 	.word	0x40010c00

08001bf4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <MX_I2C1_Init+0x54>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <MX_I2C1_Init+0x58>)
 8001c02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c32:	f001 ff97 	bl	8003b64 <HAL_I2C_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c3c:	f000 f900 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200005f8 	.word	0x200005f8
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	00061a80 	.word	0x00061a80

08001c50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_I2C_MspInit+0x70>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_I2C_MspInit+0x74>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_I2C_MspInit+0x74>)
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_I2C_MspInit+0x74>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c88:	23c0      	movs	r3, #192	; 0xc0
 8001c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <HAL_I2C_MspInit+0x78>)
 8001c9c:	f001 fd96 	bl	80037cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_I2C_MspInit+0x74>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_I2C_MspInit+0x74>)
 8001ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001caa:	61d3      	str	r3, [r2, #28]
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_I2C_MspInit+0x74>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010c00 	.word	0x40010c00

08001ccc <OLED_UI_init>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void OLED_UI_init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af04      	add	r7, sp, #16
  OLED_Init();
 8001cd2:	f000 fc47 	bl	8002564 <OLED_Init>
  OLED_Clear();
 8001cd6:	f000 fc93 	bl	8002600 <OLED_Clear>
  OLED_ShowString(0,0,"warning temp:",12,0);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	230c      	movs	r3, #12
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <OLED_UI_init+0x50>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 fda3 	bl	8002830 <OLED_ShowString>
  OLED_Showdecimal(90,0,temps.warning_temp,2,2,12,0);
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <OLED_UI_init+0x54>)
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	205a      	movs	r0, #90	; 0x5a
 8001d00:	f000 fde0 	bl	80028c4 <OLED_Showdecimal>
  OLED_ShowString(0,1,"temperature:",16,0);
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2310      	movs	r3, #16
 8001d0a:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <OLED_UI_init+0x58>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 fd8e 	bl	8002830 <OLED_ShowString>
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	080085d0 	.word	0x080085d0
 8001d20:	20000488 	.word	0x20000488
 8001d24:	080085e0 	.word	0x080085e0

08001d28 <setup_all>:


void setup_all(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  char ret = -1;
 8001d2e:	23ff      	movs	r3, #255	; 0xff
 8001d30:	71fb      	strb	r3, [r7, #7]
  ret = DS18B20_Init();
 8001d32:	f7ff fdf5 	bl	8001920 <DS18B20_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if(ret!=0)
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <setup_all+0x20>
  {
    printf("ds18b20_init_fail！\r\n");
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <setup_all+0x4c>)
 8001d42:	f004 fcad 	bl	80066a0 <puts>
 8001d46:	e00a      	b.n	8001d5e <setup_all+0x36>
  }else{
    memset(&temps,0,sizeof(temp_t));
 8001d48:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <setup_all+0x50>)
 8001d50:	f004 fd86 	bl	8006860 <memset>
    tx_buf_init();
 8001d54:	f7ff fb16 	bl	8001384 <tx_buf_init>
    temps.warning_temp = 20;
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <setup_all+0x50>)
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <setup_all+0x54>)
 8001d5c:	605a      	str	r2, [r3, #4]
  }
  OLED_UI_init();
 8001d5e:	f7ff ffb5 	bl	8001ccc <OLED_UI_init>
  timers_init();
 8001d62:	f7ff fc6b 	bl	800163c <timers_init>
  key_init();
 8001d66:	f000 fbbf 	bl	80024e8 <key_init>

}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	080085f0 	.word	0x080085f0
 8001d78:	20000488 	.word	0x20000488
 8001d7c:	41a00000 	.word	0x41a00000

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d84:	f001 f9a0 	bl	80030c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d88:	f000 f815 	bl	8001db6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8c:	f7ff fe6e 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d90:	f7ff fc74 	bl	800167c <MX_DMA_Init>
  MX_I2C1_Init();
 8001d94:	f7ff ff2e 	bl	8001bf4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001d98:	f001 f86e 	bl	8002e78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d9c:	f001 f896 	bl	8002ecc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001da0:	f000 ffda 	bl	8002d58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  led_control(1,1);
 8001da4:	2101      	movs	r1, #1
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff feee 	bl	8001b88 <led_control>
  setup_all();
 8001dac:	f7ff ffbc 	bl	8001d28 <setup_all>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    multiTimerYield();
 8001db0:	f7ff fa36 	bl	8001220 <multiTimerYield>
 8001db4:	e7fc      	b.n	8001db0 <main+0x30>

08001db6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b090      	sub	sp, #64	; 0x40
 8001dba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	2228      	movs	r2, #40	; 0x28
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 fd4b 	bl	8006860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de6:	2301      	movs	r3, #1
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dea:	2302      	movs	r3, #2
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001df4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfa:	f107 0318 	add.w	r3, r7, #24
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fb5c 	bl	80044bc <HAL_RCC_OscConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e0a:	f000 f819 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0e:	230f      	movs	r3, #15
 8001e10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e12:	2302      	movs	r3, #2
 8001e14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2102      	movs	r1, #2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fdc9 	bl	80049c0 <HAL_RCC_ClockConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e34:	f000 f804 	bl	8001e40 <Error_Handler>
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3740      	adds	r7, #64	; 0x40
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>

08001e4a <button_init>:
  * @param  active_level: pressed GPIO level.
  * @param  button_id: the button id.
  * @retval None
  */
void button_init(struct Button* handle, uint8_t(*pin_level)(uint8_t), uint8_t active_level, uint8_t button_id)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	4611      	mov	r1, r2
 8001e56:	461a      	mov	r2, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
	memset(handle, 0, sizeof(struct Button));
 8001e60:	222c      	movs	r2, #44	; 0x2c
 8001e62:	2100      	movs	r1, #0
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f004 fcfb 	bl	8006860 <memset>
	handle->event = (uint8_t)NONE_PRESS;
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	7893      	ldrb	r3, [r2, #2]
 8001e6e:	2108      	movs	r1, #8
 8001e70:	f361 1307 	bfi	r3, r1, #4, #4
 8001e74:	7093      	strb	r3, [r2, #2]
	handle->hal_button_Level = pin_level;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	609a      	str	r2, [r3, #8]
	handle->button_level = !active_level;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2d9      	uxtb	r1, r3
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	78d3      	ldrb	r3, [r2, #3]
 8001e8c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e90:	70d3      	strb	r3, [r2, #3]
	handle->active_level = active_level;
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	b2d9      	uxtb	r1, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	78d3      	ldrb	r3, [r2, #3]
 8001e9e:	f361 1386 	bfi	r3, r1, #6, #1
 8001ea2:	70d3      	strb	r3, [r2, #3]
	handle->button_id = button_id;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	79ba      	ldrb	r2, [r7, #6]
 8001ea8:	711a      	strb	r2, [r3, #4]
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <button_attach>:
  * @param  event: trigger event type.
  * @param  cb: callback function.
  * @retval None
  */
void button_attach(struct Button* handle, PressEvent event, BtnCallback cb)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	72fb      	strb	r3, [r7, #11]
	handle->cb[event] = cb;
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	605a      	str	r2, [r3, #4]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <button_handler>:
  * @brief  Button driver core function, driver state machine.
  * @param  handle: the button handle struct.
  * @retval None
  */
static void button_handler(struct Button* handle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	uint8_t read_gpio_level = handle->hal_button_Level(handle->button_id);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	7912      	ldrb	r2, [r2, #4]
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4798      	blx	r3
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]

	//ticks counter working..
	if((handle->state) > 0) handle->ticks++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	78db      	ldrb	r3, [r3, #3]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <button_handler+0x32>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	801a      	strh	r2, [r3, #0]

	/*------------button debounce handle---------------*/
	if(read_gpio_level != handle->button_level) { //not equal to prev one
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	78db      	ldrb	r3, [r3, #3]
 8001f0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d023      	beq.n	8001f64 <button_handler+0x8c>
		//continue read 3 times same new level change
		if(++(handle->debounce_cnt) >= DEBOUNCE_TICKS) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	78db      	ldrb	r3, [r3, #3]
 8001f20:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	b2d9      	uxtb	r1, r3
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	78d3      	ldrb	r3, [r2, #3]
 8001f32:	f361 03c5 	bfi	r3, r1, #3, #3
 8001f36:	70d3      	strb	r3, [r2, #3]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	78db      	ldrb	r3, [r3, #3]
 8001f3c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d913      	bls.n	8001f6e <button_handler+0x96>
			handle->button_level = read_gpio_level;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	b2d9      	uxtb	r1, r3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	78d3      	ldrb	r3, [r2, #3]
 8001f52:	f361 13c7 	bfi	r3, r1, #7, #1
 8001f56:	70d3      	strb	r3, [r2, #3]
			handle->debounce_cnt = 0;
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	78d3      	ldrb	r3, [r2, #3]
 8001f5c:	f36f 03c5 	bfc	r3, #3, #3
 8001f60:	70d3      	strb	r3, [r2, #3]
 8001f62:	e004      	b.n	8001f6e <button_handler+0x96>
		}
	} else { //level not change ,counter reset.
		handle->debounce_cnt = 0;
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	78d3      	ldrb	r3, [r2, #3]
 8001f68:	f36f 03c5 	bfc	r3, #3, #3
 8001f6c:	70d3      	strb	r3, [r2, #3]
	}

	/*-----------------State machine-------------------*/
	switch (handle->state) {
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	f200 815b 	bhi.w	8002234 <button_handler+0x35c>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <button_handler+0xac>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001ffd 	.word	0x08001ffd
 8001f8c:	08002079 	.word	0x08002079
 8001f90:	08002165 	.word	0x08002165
 8001f94:	08002235 	.word	0x08002235
 8001f98:	080021d7 	.word	0x080021d7
	case 0:
		if(handle->button_level == handle->active_level) {	//start press down
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d11c      	bne.n	8001fee <button_handler+0x116>
			handle->event = (uint8_t)PRESS_DOWN;
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	7893      	ldrb	r3, [r2, #2]
 8001fb8:	f36f 1307 	bfc	r3, #4, #4
 8001fbc:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_DOWN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <button_handler+0xf6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
			handle->ticks = 0;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	801a      	strh	r2, [r3, #0]
			handle->repeat = 1;
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	7893      	ldrb	r3, [r2, #2]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	f361 0303 	bfi	r3, r1, #0, #4
 8001fde:	7093      	strb	r3, [r2, #2]
			handle->state = 1;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	78d3      	ldrb	r3, [r2, #3]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	f361 0302 	bfi	r3, r1, #0, #3
 8001fea:	70d3      	strb	r3, [r2, #3]
		} else {
			handle->event = (uint8_t)NONE_PRESS;
		}
		break;
 8001fec:	e12f      	b.n	800224e <button_handler+0x376>
			handle->event = (uint8_t)NONE_PRESS;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	7893      	ldrb	r3, [r2, #2]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	f361 1307 	bfi	r3, r1, #4, #4
 8001ff8:	7093      	strb	r3, [r2, #2]
		break;
 8001ffa:	e128      	b.n	800224e <button_handler+0x376>

	case 1:
		if(handle->button_level != handle->active_level) { //released press up
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	78db      	ldrb	r3, [r3, #3]
 8002000:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002004:	b2da      	uxtb	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	78db      	ldrb	r3, [r3, #3]
 800200a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	429a      	cmp	r2, r3
 8002012:	d017      	beq.n	8002044 <button_handler+0x16c>
			handle->event = (uint8_t)PRESS_UP;
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	7893      	ldrb	r3, [r2, #2]
 8002018:	2101      	movs	r1, #1
 800201a:	f361 1307 	bfi	r3, r1, #4, #4
 800201e:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <button_handler+0x158>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
			handle->ticks = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	801a      	strh	r2, [r3, #0]
			handle->state = 2;
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	78d3      	ldrb	r3, [r2, #3]
 800203a:	2102      	movs	r1, #2
 800203c:	f361 0302 	bfi	r3, r1, #0, #3
 8002040:	70d3      	strb	r3, [r2, #3]
		} else if(handle->ticks > LONG_TICKS) {
			handle->event = (uint8_t)LONG_PRESS_START;
			EVENT_CB(LONG_PRESS_START);
			handle->state = 5;
		}
		break;
 8002042:	e0fd      	b.n	8002240 <button_handler+0x368>
		} else if(handle->ticks > LONG_TICKS) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	2bc8      	cmp	r3, #200	; 0xc8
 800204a:	f240 80f9 	bls.w	8002240 <button_handler+0x368>
			handle->event = (uint8_t)LONG_PRESS_START;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	7893      	ldrb	r3, [r2, #2]
 8002052:	2105      	movs	r1, #5
 8002054:	f361 1307 	bfi	r3, r1, #4, #4
 8002058:	7093      	strb	r3, [r2, #2]
			EVENT_CB(LONG_PRESS_START);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <button_handler+0x192>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
			handle->state = 5;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	78d3      	ldrb	r3, [r2, #3]
 800206e:	2105      	movs	r1, #5
 8002070:	f361 0302 	bfi	r3, r1, #0, #3
 8002074:	70d3      	strb	r3, [r2, #3]
		break;
 8002076:	e0e3      	b.n	8002240 <button_handler+0x368>

	case 2:
		if(handle->button_level == handle->active_level) { //press down again
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	78db      	ldrb	r3, [r3, #3]
 800207c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	78db      	ldrb	r3, [r3, #3]
 8002086:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	429a      	cmp	r2, r3
 800208e:	d133      	bne.n	80020f8 <button_handler+0x220>
			handle->event = (uint8_t)PRESS_DOWN;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	7893      	ldrb	r3, [r2, #2]
 8002094:	f36f 1307 	bfc	r3, #4, #4
 8002098:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_DOWN);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <button_handler+0x1d2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
			if(handle->repeat != PRESS_REPEAT_MAX_NUM) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	789b      	ldrb	r3, [r3, #2]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d00d      	beq.n	80020d4 <button_handler+0x1fc>
				handle->repeat++;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	789b      	ldrb	r3, [r3, #2]
 80020bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	b2d9      	uxtb	r1, r3
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	7893      	ldrb	r3, [r2, #2]
 80020ce:	f361 0303 	bfi	r3, r1, #0, #4
 80020d2:	7093      	strb	r3, [r2, #2]
			}
			EVENT_CB(PRESS_REPEAT); // repeat hit
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <button_handler+0x20c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
			handle->ticks = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	801a      	strh	r2, [r3, #0]
			handle->state = 3;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	78d3      	ldrb	r3, [r2, #3]
 80020ee:	2103      	movs	r1, #3
 80020f0:	f361 0302 	bfi	r3, r1, #0, #3
 80020f4:	70d3      	strb	r3, [r2, #3]
				handle->event = (uint8_t)DOUBLE_CLICK;
				EVENT_CB(DOUBLE_CLICK); // repeat hit
			}
			handle->state = 0;
		}
		break;
 80020f6:	e0a5      	b.n	8002244 <button_handler+0x36c>
		} else if(handle->ticks > SHORT_TICKS) { //released timeout
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b3c      	cmp	r3, #60	; 0x3c
 80020fe:	f240 80a1 	bls.w	8002244 <button_handler+0x36c>
			if(handle->repeat == 1) {
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	789b      	ldrb	r3, [r3, #2]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10e      	bne.n	800212e <button_handler+0x256>
				handle->event = (uint8_t)SINGLE_CLICK;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	7893      	ldrb	r3, [r2, #2]
 8002114:	2103      	movs	r1, #3
 8002116:	f361 1307 	bfi	r3, r1, #4, #4
 800211a:	7093      	strb	r3, [r2, #2]
				EVENT_CB(SINGLE_CLICK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <button_handler+0x280>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e014      	b.n	8002158 <button_handler+0x280>
			} else if(handle->repeat == 2) {
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	789b      	ldrb	r3, [r3, #2]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d10d      	bne.n	8002158 <button_handler+0x280>
				handle->event = (uint8_t)DOUBLE_CLICK;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	7893      	ldrb	r3, [r2, #2]
 8002140:	2104      	movs	r1, #4
 8002142:	f361 1307 	bfi	r3, r1, #4, #4
 8002146:	7093      	strb	r3, [r2, #2]
				EVENT_CB(DOUBLE_CLICK); // repeat hit
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <button_handler+0x280>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
			handle->state = 0;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	78d3      	ldrb	r3, [r2, #3]
 800215c:	f36f 0302 	bfc	r3, #0, #3
 8002160:	70d3      	strb	r3, [r2, #3]
		break;
 8002162:	e06f      	b.n	8002244 <button_handler+0x36c>

	case 3:
		if(handle->button_level != handle->active_level) { //released press up
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	78db      	ldrb	r3, [r3, #3]
 8002172:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	429a      	cmp	r2, r3
 800217a:	d021      	beq.n	80021c0 <button_handler+0x2e8>
			handle->event = (uint8_t)PRESS_UP;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	7893      	ldrb	r3, [r2, #2]
 8002180:	2101      	movs	r1, #1
 8002182:	f361 1307 	bfi	r3, r1, #4, #4
 8002186:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <button_handler+0x2c0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
			if(handle->ticks < SHORT_TICKS) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	2b3b      	cmp	r3, #59	; 0x3b
 800219e:	d809      	bhi.n	80021b4 <button_handler+0x2dc>
				handle->ticks = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	801a      	strh	r2, [r3, #0]
				handle->state = 2; //repeat press
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	78d3      	ldrb	r3, [r2, #3]
 80021aa:	2102      	movs	r1, #2
 80021ac:	f361 0302 	bfi	r3, r1, #0, #3
 80021b0:	70d3      	strb	r3, [r2, #3]
				handle->state = 0;
			}
		} else if(handle->ticks > SHORT_TICKS) { // SHORT_TICKS < press down hold time < LONG_TICKS
			handle->state = 1;
		}
		break;
 80021b2:	e049      	b.n	8002248 <button_handler+0x370>
				handle->state = 0;
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	78d3      	ldrb	r3, [r2, #3]
 80021b8:	f36f 0302 	bfc	r3, #0, #3
 80021bc:	70d3      	strb	r3, [r2, #3]
		break;
 80021be:	e043      	b.n	8002248 <button_handler+0x370>
		} else if(handle->ticks > SHORT_TICKS) { // SHORT_TICKS < press down hold time < LONG_TICKS
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	2b3c      	cmp	r3, #60	; 0x3c
 80021c6:	d93f      	bls.n	8002248 <button_handler+0x370>
			handle->state = 1;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	78d3      	ldrb	r3, [r2, #3]
 80021cc:	2101      	movs	r1, #1
 80021ce:	f361 0302 	bfi	r3, r1, #0, #3
 80021d2:	70d3      	strb	r3, [r2, #3]
		break;
 80021d4:	e038      	b.n	8002248 <button_handler+0x370>

	case 5:
		if(handle->button_level == handle->active_level) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	78db      	ldrb	r3, [r3, #3]
 80021da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	78db      	ldrb	r3, [r3, #3]
 80021e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10e      	bne.n	800220c <button_handler+0x334>
			//continue hold trigger
			handle->event = (uint8_t)LONG_PRESS_HOLD;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	7893      	ldrb	r3, [r2, #2]
 80021f2:	2106      	movs	r1, #6
 80021f4:	f361 1307 	bfi	r3, r1, #4, #4
 80021f8:	7093      	strb	r3, [r2, #2]
			EVENT_CB(LONG_PRESS_HOLD);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <button_handler+0x374>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
		} else { //released
			handle->event = (uint8_t)PRESS_UP;
			EVENT_CB(PRESS_UP);
			handle->state = 0; //reset
		}
		break;
 800220a:	e01f      	b.n	800224c <button_handler+0x374>
			handle->event = (uint8_t)PRESS_UP;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	7893      	ldrb	r3, [r2, #2]
 8002210:	2101      	movs	r1, #1
 8002212:	f361 1307 	bfi	r3, r1, #4, #4
 8002216:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <button_handler+0x350>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
			handle->state = 0; //reset
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	78d3      	ldrb	r3, [r2, #3]
 800222c:	f36f 0302 	bfc	r3, #0, #3
 8002230:	70d3      	strb	r3, [r2, #3]
		break;
 8002232:	e00b      	b.n	800224c <button_handler+0x374>
	default:
		handle->state = 0; //reset
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	78d3      	ldrb	r3, [r2, #3]
 8002238:	f36f 0302 	bfc	r3, #0, #3
 800223c:	70d3      	strb	r3, [r2, #3]
		break;
 800223e:	e006      	b.n	800224e <button_handler+0x376>
		break;
 8002240:	bf00      	nop
 8002242:	e004      	b.n	800224e <button_handler+0x376>
		break;
 8002244:	bf00      	nop
 8002246:	e002      	b.n	800224e <button_handler+0x376>
		break;
 8002248:	bf00      	nop
 800224a:	e000      	b.n	800224e <button_handler+0x376>
		break;
 800224c:	bf00      	nop
	}
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <button_start>:
  * @brief  Start the button work, add the handle into work list.
  * @param  handle: target handle struct.
  * @retval 0: succeed. -1: already exist.
  */
int button_start(struct Button* handle)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	struct Button* target = head_handle;
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <button_start+0x44>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
	while(target) {
 8002266:	e009      	b.n	800227c <button_start+0x24>
		if(target == handle) return -1;	//already exist.
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d102      	bne.n	8002276 <button_start+0x1e>
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	e00d      	b.n	8002292 <button_start+0x3a>
		target = target->next;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	60fb      	str	r3, [r7, #12]
	while(target) {
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f2      	bne.n	8002268 <button_start+0x10>
	}
	handle->next = head_handle;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <button_start+0x44>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
	head_handle = handle;
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <button_start+0x44>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6013      	str	r3, [r2, #0]
	return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	2000064c 	.word	0x2000064c

080022a0 <button_ticks>:
  * @brief  background ticks, timer repeat invoking interval 5ms.
  * @param  None.
  * @retval None
  */
void button_ticks(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
	struct Button* target;
	for(target=head_handle; target; target=target->next) {
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <button_ticks+0x2c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	e005      	b.n	80022ba <button_ticks+0x1a>
		button_handler(target);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff fe12 	bl	8001ed8 <button_handler>
	for(target=head_handle; target; target=target->next) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f6      	bne.n	80022ae <button_ticks+0xe>
	}
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000064c 	.word	0x2000064c

080022d0 <read_key1_state>:


uint8_t read_key1_state(uint8_t botton_id)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin);
 80022da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022de:	4804      	ldr	r0, [pc, #16]	; (80022f0 <read_key1_state+0x20>)
 80022e0:	f001 fbf8 	bl	8003ad4 <HAL_GPIO_ReadPin>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40010c00 	.word	0x40010c00

080022f4 <Timerkeycallback>:

struct Button key1;
MultiTimer key_timer;
void Timerkeycallback(MultiTimer* timer, void *userData)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  button_ticks();
 80022fe:	f7ff ffcf 	bl	80022a0 <button_ticks>
  multiTimerStart(&key_timer,5,Timerkeycallback,NULL);
 8002302:	2300      	movs	r3, #0
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <Timerkeycallback+0x2c>)
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f04f 0205 	mov.w	r2, #5
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	4804      	ldr	r0, [pc, #16]	; (8002324 <Timerkeycallback+0x30>)
 8002314:	f7fe ff38 	bl	8001188 <multiTimerStart>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	080022f5 	.word	0x080022f5
 8002324:	20000680 	.word	0x20000680

08002328 <key1_pressdown_callback>:

uint8_t temp_add_direct = 10; //0--down  1--up
void key1_pressdown_callback(void* arg)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af04      	add	r7, sp, #16
 800232e:	6078      	str	r0, [r7, #4]
	printf("SINGLE:CLICK\r\n");
 8002330:	4810      	ldr	r0, [pc, #64]	; (8002374 <key1_pressdown_callback+0x4c>)
 8002332:	f004 f9b5 	bl	80066a0 <puts>
	temps.warning_temp+=0.5;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <key1_pressdown_callback+0x50>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fbf8 	bl	8000b34 <__addsf3>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <key1_pressdown_callback+0x50>)
 800234a:	605a      	str	r2, [r3, #4]
	temp_add_direct = 1;
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <key1_pressdown_callback+0x54>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
	OLED_Showdecimal(90,0,temps.warning_temp,2,2,12,0);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <key1_pressdown_callback+0x50>)
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	2300      	movs	r3, #0
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	230c      	movs	r3, #12
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2302      	movs	r3, #2
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2302      	movs	r3, #2
 8002364:	2100      	movs	r1, #0
 8002366:	205a      	movs	r0, #90	; 0x5a
 8002368:	f000 faac 	bl	80028c4 <OLED_Showdecimal>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	08008608 	.word	0x08008608
 8002378:	20000488 	.word	0x20000488
 800237c:	20000000 	.word	0x20000000

08002380 <key1_doubleclick_callback>:

void key1_doubleclick_callback(void* arg)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af04      	add	r7, sp, #16
 8002386:	6078      	str	r0, [r7, #4]
	printf("DOUBLE:CLICK\r\n");
 8002388:	4810      	ldr	r0, [pc, #64]	; (80023cc <key1_doubleclick_callback+0x4c>)
 800238a:	f004 f989 	bl	80066a0 <puts>
	// buzzer_onoff(0);
	temps.warning_temp-=0.5;
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <key1_doubleclick_callback+0x50>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fbca 	bl	8000b30 <__aeabi_fsub>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <key1_doubleclick_callback+0x50>)
 80023a2:	605a      	str	r2, [r3, #4]
	temp_add_direct = 0;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <key1_doubleclick_callback+0x54>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
	OLED_Showdecimal(90,0,temps.warning_temp,2,2,12,0);
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <key1_doubleclick_callback+0x50>)
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	230c      	movs	r3, #12
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2302      	movs	r3, #2
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2302      	movs	r3, #2
 80023bc:	2100      	movs	r1, #0
 80023be:	205a      	movs	r0, #90	; 0x5a
 80023c0:	f000 fa80 	bl	80028c4 <OLED_Showdecimal>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	08008618 	.word	0x08008618
 80023d0:	20000488 	.word	0x20000488
 80023d4:	20000000 	.word	0x20000000

080023d8 <key1_longpress_hold_callback>:
	OLED_Showdecimal(90,0,temps.warning_temp,2,2,12,0);
}

static uint32_t count = 0;
void key1_longpress_hold_callback(void* arg)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af04      	add	r7, sp, #16
 80023de:	6078      	str	r0, [r7, #4]
	if(temp_add_direct == 0)
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <key1_longpress_hold_callback+0xb8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d113      	bne.n	8002410 <key1_longpress_hold_callback+0x38>
	{
	temps.warning_temp-=0.1;
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <key1_longpress_hold_callback+0xbc>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f81b 	bl	8000428 <__aeabi_f2d>
 80023f2:	a325      	add	r3, pc, #148	; (adr r3, 8002488 <key1_longpress_hold_callback+0xb0>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fd feb6 	bl	8000168 <__aeabi_dsub>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb40 	bl	8000a88 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <key1_longpress_hold_callback+0xbc>)
 800240c:	6053      	str	r3, [r2, #4]
 800240e:	e016      	b.n	800243e <key1_longpress_hold_callback+0x66>
	}else if(temp_add_direct == 1)
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <key1_longpress_hold_callback+0xb8>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d112      	bne.n	800243e <key1_longpress_hold_callback+0x66>
	{
	temps.warning_temp+=0.1;
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <key1_longpress_hold_callback+0xbc>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f803 	bl	8000428 <__aeabi_f2d>
 8002422:	a319      	add	r3, pc, #100	; (adr r3, 8002488 <key1_longpress_hold_callback+0xb0>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fd fea0 	bl	800016c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fb28 	bl	8000a88 <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <key1_longpress_hold_callback+0xbc>)
 800243c:	6053      	str	r3, [r2, #4]
	}
	count++;
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <key1_longpress_hold_callback+0xc0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <key1_longpress_hold_callback+0xc0>)
 8002446:	6013      	str	r3, [r2, #0]
	if(count % 3 ==0)
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <key1_longpress_hold_callback+0xc0>)
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <key1_longpress_hold_callback+0xc4>)
 800244e:	fba3 2301 	umull	r2, r3, r3, r1
 8002452:	085a      	lsrs	r2, r3, #1
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	1aca      	subs	r2, r1, r3
 800245c:	2a00      	cmp	r2, #0
 800245e:	d10c      	bne.n	800247a <key1_longpress_hold_callback+0xa2>
	{
		OLED_Showdecimal(90,0,temps.warning_temp,2,2,12,0);
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <key1_longpress_hold_callback+0xbc>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	2300      	movs	r3, #0
 8002466:	9302      	str	r3, [sp, #8]
 8002468:	230c      	movs	r3, #12
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2302      	movs	r3, #2
 8002472:	2100      	movs	r1, #0
 8002474:	205a      	movs	r0, #90	; 0x5a
 8002476:	f000 fa25 	bl	80028c4 <OLED_Showdecimal>
	}
	printf("longpress_hold\r\n");
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <key1_longpress_hold_callback+0xc8>)
 800247c:	f004 f910 	bl	80066a0 <puts>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	9999999a 	.word	0x9999999a
 800248c:	3fb99999 	.word	0x3fb99999
 8002490:	20000000 	.word	0x20000000
 8002494:	20000488 	.word	0x20000488
 8002498:	20000698 	.word	0x20000698
 800249c:	aaaaaaab 	.word	0xaaaaaaab
 80024a0:	0800863c 	.word	0x0800863c

080024a4 <key1_press_up_callback>:


void key1_press_up_callback(void* arg)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af04      	add	r7, sp, #16
 80024aa:	6078      	str	r0, [r7, #4]
	printf("botton up\r\n");
 80024ac:	480b      	ldr	r0, [pc, #44]	; (80024dc <key1_press_up_callback+0x38>)
 80024ae:	f004 f8f7 	bl	80066a0 <puts>
	OLED_Showdecimal(90,0,temps.warning_temp,2,2,12,0);
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <key1_press_up_callback+0x3c>)
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	2300      	movs	r3, #0
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	230c      	movs	r3, #12
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	2302      	movs	r3, #2
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2302      	movs	r3, #2
 80024c4:	2100      	movs	r1, #0
 80024c6:	205a      	movs	r0, #90	; 0x5a
 80024c8:	f000 f9fc 	bl	80028c4 <OLED_Showdecimal>
	count = 0;
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <key1_press_up_callback+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	0800864c 	.word	0x0800864c
 80024e0:	20000488 	.word	0x20000488
 80024e4:	20000698 	.word	0x20000698

080024e8 <key_init>:


void key_init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af02      	add	r7, sp, #8
	 button_init(&key1,read_key1_state,0,0);//0 ID
 80024ee:	2300      	movs	r3, #0
 80024f0:	2200      	movs	r2, #0
 80024f2:	4914      	ldr	r1, [pc, #80]	; (8002544 <key_init+0x5c>)
 80024f4:	4814      	ldr	r0, [pc, #80]	; (8002548 <key_init+0x60>)
 80024f6:	f7ff fca8 	bl	8001e4a <button_init>
	 button_attach(&key1,SINGLE_CLICK,key1_pressdown_callback);
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <key_init+0x64>)
 80024fc:	2103      	movs	r1, #3
 80024fe:	4812      	ldr	r0, [pc, #72]	; (8002548 <key_init+0x60>)
 8002500:	f7ff fcd7 	bl	8001eb2 <button_attach>
	 button_attach(&key1,DOUBLE_CLICK,key1_doubleclick_callback);
 8002504:	4a12      	ldr	r2, [pc, #72]	; (8002550 <key_init+0x68>)
 8002506:	2104      	movs	r1, #4
 8002508:	480f      	ldr	r0, [pc, #60]	; (8002548 <key_init+0x60>)
 800250a:	f7ff fcd2 	bl	8001eb2 <button_attach>
	//  button_attach(&key1,LONG_PRESS_HOLD,key1_longpress_callback);
	 button_attach(&key1,PRESS_UP,key1_press_up_callback);
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <key_init+0x6c>)
 8002510:	2101      	movs	r1, #1
 8002512:	480d      	ldr	r0, [pc, #52]	; (8002548 <key_init+0x60>)
 8002514:	f7ff fccd 	bl	8001eb2 <button_attach>
	 button_attach(&key1,LONG_PRESS_HOLD,key1_longpress_hold_callback);
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <key_init+0x70>)
 800251a:	2106      	movs	r1, #6
 800251c:	480a      	ldr	r0, [pc, #40]	; (8002548 <key_init+0x60>)
 800251e:	f7ff fcc8 	bl	8001eb2 <button_attach>

	 button_start(&key1);
 8002522:	4809      	ldr	r0, [pc, #36]	; (8002548 <key_init+0x60>)
 8002524:	f7ff fe98 	bl	8002258 <button_start>
	 multiTimerStart(&key_timer,5,Timerkeycallback,NULL);
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <key_init+0x74>)
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f04f 0205 	mov.w	r2, #5
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	4809      	ldr	r0, [pc, #36]	; (8002560 <key_init+0x78>)
 800253a:	f7fe fe25 	bl	8001188 <multiTimerStart>
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	080022d1 	.word	0x080022d1
 8002548:	20000650 	.word	0x20000650
 800254c:	08002329 	.word	0x08002329
 8002550:	08002381 	.word	0x08002381
 8002554:	080024a5 	.word	0x080024a5
 8002558:	080023d9 	.word	0x080023d9
 800255c:	080022f5 	.word	0x080022f5
 8002560:	20000680 	.word	0x20000680

08002564 <OLED_Init>:
 * @function: void OLED_Init(void)
 * @description: OLED初始化
 * @return {*}
 */
void OLED_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 800256a:	20c8      	movs	r0, #200	; 0xc8
 800256c:	f000 fe0e 	bl	800318c <HAL_Delay>

	uint8_t i = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<23; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	e008      	b.n	800258c <OLED_Init+0x28>
	{
		OLED_WR_CMD(CMD_Data[i]);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <OLED_Init+0x38>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f80d 	bl	80025a0 <OLED_WR_CMD>
	for(i=0; i<23; i++)
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	3301      	adds	r3, #1
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b16      	cmp	r3, #22
 8002590:	d9f3      	bls.n	800257a <OLED_Init+0x16>
	}

}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000004 	.word	0x20000004

080025a0 <OLED_WR_CMD>:
 * @description: 向设备写控制命令
 * @param {uint8_t} cmd 芯片手册规定的命令
 * @return {*}
 */
void OLED_WR_CMD(uint8_t cmd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 80025aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	2301      	movs	r3, #1
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2301      	movs	r3, #1
 80025ba:	2200      	movs	r2, #0
 80025bc:	2178      	movs	r1, #120	; 0x78
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <OLED_WR_CMD+0x2c>)
 80025c0:	f001 fc14 	bl	8003dec <HAL_I2C_Mem_Write>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200005f8 	.word	0x200005f8

080025d0 <OLED_WR_DATA>:
 * @description: 向设备写控制数据
 * @param {uint8_t} data 数据
 * @return {*}
 */
void OLED_WR_DATA(uint8_t data)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af04      	add	r7, sp, #16
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 80025da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025de:	9302      	str	r3, [sp, #8]
 80025e0:	2301      	movs	r3, #1
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2301      	movs	r3, #1
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	2178      	movs	r1, #120	; 0x78
 80025ee:	4803      	ldr	r0, [pc, #12]	; (80025fc <OLED_WR_DATA+0x2c>)
 80025f0:	f001 fbfc 	bl	8003dec <HAL_I2C_Mem_Write>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200005f8 	.word	0x200005f8

08002600 <OLED_Clear>:
 * @function: OLED_Clear(void)
 * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
 * @return {*}
 */
void OLED_Clear(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8002606:	2300      	movs	r3, #0
 8002608:	71fb      	strb	r3, [r7, #7]
 800260a:	e01b      	b.n	8002644 <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);    //设置页地址（0~7）
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	3b50      	subs	r3, #80	; 0x50
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ffc4 	bl	80025a0 <OLED_WR_CMD>
		OLED_WR_CMD(0x00);      //设置显示位置—列低地址
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff ffc1 	bl	80025a0 <OLED_WR_CMD>
		OLED_WR_CMD(0x10);      //设置显示位置—列高地址
 800261e:	2010      	movs	r0, #16
 8002620:	f7ff ffbe 	bl	80025a0 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 8002624:	2300      	movs	r3, #0
 8002626:	71bb      	strb	r3, [r7, #6]
 8002628:	e005      	b.n	8002636 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff ffd0 	bl	80025d0 <OLED_WR_DATA>
		for(n=0;n<128;n++)
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	3301      	adds	r3, #1
 8002634:	71bb      	strb	r3, [r7, #6]
 8002636:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800263a:	2b00      	cmp	r3, #0
 800263c:	daf5      	bge.n	800262a <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	3301      	adds	r3, #1
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b07      	cmp	r3, #7
 8002648:	d9e0      	bls.n	800260c <OLED_Clear+0xc>
	}
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <OLED_Set_Pos>:
 * @description: 坐标设置
 * @param {uint8_t} x,y
 * @return {*}
 */
void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	460a      	mov	r2, r1
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	4613      	mov	r3, r2
 8002662:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);	//设置页地址（0~7）
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	3b50      	subs	r3, #80	; 0x50
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff98 	bl	80025a0 <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff8f 	bl	80025a0 <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);	//设置显示位置—列低地址
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff88 	bl	80025a0 <OLED_WR_CMD>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <oled_pow>:
 * @description: m^n函数
 * @param {uint8_t} m,n
 * @return {unsigned int} result
 */
unsigned int oled_pow(uint8_t m,uint8_t n)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	460a      	mov	r2, r1
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	4613      	mov	r3, r2
 80026a6:	71bb      	strb	r3, [r7, #6]
	unsigned int result=1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80026ac:	e004      	b.n	80026b8 <oled_pow+0x20>
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	79bb      	ldrb	r3, [r7, #6]
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	71ba      	strb	r2, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f5      	bne.n	80026ae <oled_pow+0x16>
	return result;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
	...

080026d0 <OLED_ShowChar>:
 * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4604      	mov	r4, r0
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4623      	mov	r3, r4
 80026e0:	71fb      	strb	r3, [r7, #7]
 80026e2:	4603      	mov	r3, r0
 80026e4:	71bb      	strb	r3, [r7, #6]
 80026e6:	460b      	mov	r3, r1
 80026e8:	717b      	strb	r3, [r7, #5]
 80026ea:	4613      	mov	r3, r2
 80026ec:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73bb      	strb	r3, [r7, #14]
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	3b20      	subs	r3, #32
 80026fa:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	da04      	bge.n	800270e <OLED_ShowChar+0x3e>
 8002704:	2300      	movs	r3, #0
 8002706:	71fb      	strb	r3, [r7, #7]
 8002708:	79bb      	ldrb	r3, [r7, #6]
 800270a:	3302      	adds	r3, #2
 800270c:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 800270e:	793b      	ldrb	r3, [r7, #4]
 8002710:	2b10      	cmp	r3, #16
 8002712:	d154      	bne.n	80027be <OLED_ShowChar+0xee>
		{
			OLED_Set_Pos(x,y);
 8002714:	79ba      	ldrb	r2, [r7, #6]
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff9a 	bl	8002654 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e01b      	b.n	800275e <OLED_ShowChar+0x8e>
				{
				  if(Color_Turn)
 8002726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <OLED_ShowChar+0x76>
					  OLED_WR_DATA(~F8X16[c*16+i]);
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	011a      	lsls	r2, r3, #4
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	4413      	add	r3, r2
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <OLED_ShowChar+0x158>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	43db      	mvns	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff46 	bl	80025d0 <OLED_WR_DATA>
 8002744:	e008      	b.n	8002758 <OLED_ShowChar+0x88>
				  else
					  OLED_WR_DATA(F8X16[c*16+i]);
 8002746:	7bbb      	ldrb	r3, [r7, #14]
 8002748:	011a      	lsls	r2, r3, #4
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	4413      	add	r3, r2
 800274e:	4a36      	ldr	r2, [pc, #216]	; (8002828 <OLED_ShowChar+0x158>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff3c 	bl	80025d0 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	3301      	adds	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b07      	cmp	r3, #7
 8002762:	d9e0      	bls.n	8002726 <OLED_ShowChar+0x56>
				}
			OLED_Set_Pos(x,y+1);
 8002764:	79bb      	ldrb	r3, [r7, #6]
 8002766:	3301      	adds	r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff70 	bl	8002654 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e01d      	b.n	80027b6 <OLED_ShowChar+0xe6>
			    {
				  if(Color_Turn)
 800277a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <OLED_ShowChar+0xcc>
					  OLED_WR_DATA(~F8X16[c*16+i+8]);
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	011a      	lsls	r2, r3, #4
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	4413      	add	r3, r2
 800278a:	3308      	adds	r3, #8
 800278c:	4a26      	ldr	r2, [pc, #152]	; (8002828 <OLED_ShowChar+0x158>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	43db      	mvns	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff1b 	bl	80025d0 <OLED_WR_DATA>
 800279a:	e009      	b.n	80027b0 <OLED_ShowChar+0xe0>
				  else
					  OLED_WR_DATA(F8X16[c*16+i+8]);
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	011a      	lsls	r2, r3, #4
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	4413      	add	r3, r2
 80027a4:	3308      	adds	r3, #8
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <OLED_ShowChar+0x158>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff10 	bl	80025d0 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	d9de      	bls.n	800277a <OLED_ShowChar+0xaa>
					  OLED_WR_DATA(~F6x8[c][i]);
				  else
					  OLED_WR_DATA(F6x8[c][i]);
			    }
		  }
}
 80027bc:	e02f      	b.n	800281e <OLED_ShowChar+0x14e>
				OLED_Set_Pos(x,y);
 80027be:	79ba      	ldrb	r2, [r7, #6]
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff45 	bl	8002654 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e023      	b.n	8002818 <OLED_ShowChar+0x148>
				  if(Color_Turn)
 80027d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00f      	beq.n	80027f8 <OLED_ShowChar+0x128>
					  OLED_WR_DATA(~F6x8[c][i]);
 80027d8:	7bba      	ldrb	r2, [r7, #14]
 80027da:	7bf9      	ldrb	r1, [r7, #15]
 80027dc:	4813      	ldr	r0, [pc, #76]	; (800282c <OLED_ShowChar+0x15c>)
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4403      	add	r3, r0
 80027e8:	440b      	add	r3, r1
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff feed 	bl	80025d0 <OLED_WR_DATA>
 80027f6:	e00c      	b.n	8002812 <OLED_ShowChar+0x142>
					  OLED_WR_DATA(F6x8[c][i]);
 80027f8:	7bba      	ldrb	r2, [r7, #14]
 80027fa:	7bf9      	ldrb	r1, [r7, #15]
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <OLED_ShowChar+0x15c>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4403      	add	r3, r0
 8002808:	440b      	add	r3, r1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fedf 	bl	80025d0 <OLED_WR_DATA>
				for(i=0;i<6;i++)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3301      	adds	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d9d8      	bls.n	80027d0 <OLED_ShowChar+0x100>
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	08008880 	.word	0x08008880
 800282c:	08008658 	.word	0x08008658

08002830 <OLED_ShowString>:
 * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b087      	sub	sp, #28
 8002834:	af02      	add	r7, sp, #8
 8002836:	603a      	str	r2, [r7, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	460b      	mov	r3, r1
 8002840:	71bb      	strb	r3, [r7, #6]
 8002842:	4613      	mov	r3, r2
 8002844:	717b      	strb	r3, [r7, #5]
	uint8_t  j=0;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800284a:	e02f      	b.n	80028ac <OLED_ShowString+0x7c>
	{		OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	797c      	ldrb	r4, [r7, #5]
 8002856:	79b9      	ldrb	r1, [r7, #6]
 8002858:	79f8      	ldrb	r0, [r7, #7]
 800285a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	4623      	mov	r3, r4
 8002862:	f7ff ff35 	bl	80026d0 <OLED_ShowChar>
			if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8002866:	797b      	ldrb	r3, [r7, #5]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d103      	bne.n	8002874 <OLED_ShowString+0x44>
				x += 6;
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	3306      	adds	r3, #6
 8002870:	71fb      	strb	r3, [r7, #7]
 8002872:	e002      	b.n	800287a <OLED_ShowString+0x4a>
			else  //8X16的字体列加8，显示下一个字符
				x += 8;
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	3308      	adds	r3, #8
 8002878:	71fb      	strb	r3, [r7, #7]

			if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2b7a      	cmp	r3, #122	; 0x7a
 800287e:	d907      	bls.n	8002890 <OLED_ShowString+0x60>
 8002880:	797b      	ldrb	r3, [r7, #5]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d104      	bne.n	8002890 <OLED_ShowString+0x60>
			{
				x = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	71fb      	strb	r3, [r7, #7]
				y++;
 800288a:	79bb      	ldrb	r3, [r7, #6]
 800288c:	3301      	adds	r3, #1
 800288e:	71bb      	strb	r3, [r7, #6]
			}
			if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	2b78      	cmp	r3, #120	; 0x78
 8002894:	d907      	bls.n	80028a6 <OLED_ShowString+0x76>
 8002896:	797b      	ldrb	r3, [r7, #5]
 8002898:	2b10      	cmp	r3, #16
 800289a:	d104      	bne.n	80028a6 <OLED_ShowString+0x76>
			{
				x = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	71fb      	strb	r3, [r7, #7]
				y++;
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	3301      	adds	r3, #1
 80028a4:	71bb      	strb	r3, [r7, #6]
			}
			j++;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3301      	adds	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1c9      	bne.n	800284c <OLED_ShowString+0x1c>
	}
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}
	...

080028c4 <OLED_Showdecimal>:
 * @param {uint8_t} size2:输入的数据大小，选择 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_Showdecimal(uint8_t x,uint8_t y,float num,uint8_t z_len,uint8_t f_len,uint8_t size2, uint8_t Color_Turn)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	603a      	str	r2, [r7, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
 80028d2:	460b      	mov	r3, r1
 80028d4:	71bb      	strb	r3, [r7, #6]
 80028d6:	4613      	mov	r3, r2
 80028d8:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp,i=0;//i为负数标志位
 80028da:	2300      	movs	r3, #0
 80028dc:	75bb      	strb	r3, [r7, #22]
	uint8_t enshow;
	int z_temp,f_temp;
	if(num<0)
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	6838      	ldr	r0, [r7, #0]
 80028e4:	f7fe fbcc 	bl	8001080 <__aeabi_fcmplt>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <OLED_Showdecimal+0x3c>
	{
		z_len+=1;
 80028ee:	797b      	ldrb	r3, [r7, #5]
 80028f0:	3301      	adds	r3, #1
 80028f2:	717b      	strb	r3, [r7, #5]
		i=1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75bb      	strb	r3, [r7, #22]
		num=-num;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028fe:	603b      	str	r3, [r7, #0]
	}
	z_temp=(int)num;
 8002900:	6838      	ldr	r0, [r7, #0]
 8002902:	f7fe fbe5 	bl	80010d0 <__aeabi_f2iz>
 8002906:	4603      	mov	r3, r0
 8002908:	613b      	str	r3, [r7, #16]
	//整数部分
	for(t=0;t<z_len;t++)
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]
 800290e:	e055      	b.n	80029bc <OLED_Showdecimal+0xf8>
	{
		temp=(z_temp/oled_pow(10,z_len-t-1))%10;
 8002910:	693c      	ldr	r4, [r7, #16]
 8002912:	797a      	ldrb	r2, [r7, #5]
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	200a      	movs	r0, #10
 8002922:	f7ff feb9 	bl	8002698 <oled_pow>
 8002926:	4603      	mov	r3, r0
 8002928:	fbb4 f1f3 	udiv	r1, r4, r3
 800292c:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <OLED_Showdecimal+0x214>)
 800292e:	fba3 2301 	umull	r2, r3, r3, r1
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	1aca      	subs	r2, r1, r3
 800293e:	4613      	mov	r3, r2
 8002940:	72fb      	strb	r3, [r7, #11]
		if(enshow==0 && t<(z_len-1))
 8002942:	7d7b      	ldrb	r3, [r7, #21]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11f      	bne.n	8002988 <OLED_Showdecimal+0xc4>
 8002948:	7dfa      	ldrb	r2, [r7, #23]
 800294a:	797b      	ldrb	r3, [r7, #5]
 800294c:	3b01      	subs	r3, #1
 800294e:	429a      	cmp	r2, r3
 8002950:	da1a      	bge.n	8002988 <OLED_Showdecimal+0xc4>
		{
			if(temp==0)
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d115      	bne.n	8002984 <OLED_Showdecimal+0xc0>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2, Color_Turn);
 8002958:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	7dfa      	ldrb	r2, [r7, #23]
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	b2da      	uxtb	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	4413      	add	r3, r2
 800296c:	b2d8      	uxtb	r0, r3
 800296e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002972:	79b9      	ldrb	r1, [r7, #6]
 8002974:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	2220      	movs	r2, #32
 800297e:	f7ff fea7 	bl	80026d0 <OLED_ShowChar>
				continue;
 8002982:	e018      	b.n	80029b6 <OLED_Showdecimal+0xf2>
			}
			else
			enshow=1;
 8002984:	2301      	movs	r3, #1
 8002986:	757b      	strb	r3, [r7, #21]
		}
		OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2, Color_Turn);
 8002988:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	7dfa      	ldrb	r2, [r7, #23]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	b2da      	uxtb	r2, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	4413      	add	r3, r2
 800299c:	b2d8      	uxtb	r0, r3
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	3330      	adds	r3, #48	; 0x30
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 80029a8:	79b9      	ldrb	r1, [r7, #6]
 80029aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4623      	mov	r3, r4
 80029b2:	f7ff fe8d 	bl	80026d0 <OLED_ShowChar>
	for(t=0;t<z_len;t++)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	3301      	adds	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
 80029bc:	7dfa      	ldrb	r2, [r7, #23]
 80029be:	797b      	ldrb	r3, [r7, #5]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d3a5      	bcc.n	8002910 <OLED_Showdecimal+0x4c>
	}
	//小数点
	OLED_ShowChar(x+(size2/2)*(z_len),y,'.',size2, Color_Turn);
 80029c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	797a      	ldrb	r2, [r7, #5]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	4413      	add	r3, r2
 80029d8:	b2d8      	uxtb	r0, r3
 80029da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80029de:	79b9      	ldrb	r1, [r7, #6]
 80029e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	222e      	movs	r2, #46	; 0x2e
 80029ea:	f7ff fe71 	bl	80026d0 <OLED_ShowChar>

	f_temp=(int)((num-z_temp)*(oled_pow(10,f_len)));
 80029ee:	6938      	ldr	r0, [r7, #16]
 80029f0:	f7fe f954 	bl	8000c9c <__aeabi_i2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4619      	mov	r1, r3
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	f7fe f899 	bl	8000b30 <__aeabi_fsub>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461c      	mov	r4, r3
 8002a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a06:	4619      	mov	r1, r3
 8002a08:	200a      	movs	r0, #10
 8002a0a:	f7ff fe45 	bl	8002698 <oled_pow>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe f93f 	bl	8000c94 <__aeabi_ui2f>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f7fe f992 	bl	8000d44 <__aeabi_fmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fb54 	bl	80010d0 <__aeabi_f2iz>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60fb      	str	r3, [r7, #12]
  //小数部分
	for(t=0;t<f_len;t++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	75fb      	strb	r3, [r7, #23]
 8002a30:	e038      	b.n	8002aa4 <OLED_Showdecimal+0x1e0>
	{
		temp=(f_temp/oled_pow(10,f_len-t-1))%10;
 8002a32:	68fc      	ldr	r4, [r7, #12]
 8002a34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4619      	mov	r1, r3
 8002a44:	200a      	movs	r0, #10
 8002a46:	f7ff fe27 	bl	8002698 <oled_pow>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	fbb4 f1f3 	udiv	r1, r4, r3
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <OLED_Showdecimal+0x214>)
 8002a52:	fba3 2301 	umull	r2, r3, r3, r1
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	1aca      	subs	r2, r1, r3
 8002a62:	4613      	mov	r3, r2
 8002a64:	72fb      	strb	r3, [r7, #11]
		OLED_ShowChar(x+(size2/2)*(t+z_len)+5,y,temp+'0',size2, Color_Turn);
 8002a66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	7df9      	ldrb	r1, [r7, #23]
 8002a70:	797a      	ldrb	r2, [r7, #5]
 8002a72:	440a      	add	r2, r1
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	4413      	add	r3, r2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3305      	adds	r3, #5
 8002a84:	b2d8      	uxtb	r0, r3
 8002a86:	7afb      	ldrb	r3, [r7, #11]
 8002a88:	3330      	adds	r3, #48	; 0x30
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 8002a90:	79b9      	ldrb	r1, [r7, #6]
 8002a92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4623      	mov	r3, r4
 8002a9a:	f7ff fe19 	bl	80026d0 <OLED_ShowChar>
	for(t=0;t<f_len;t++)
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
 8002aa4:	7dfa      	ldrb	r2, [r7, #23]
 8002aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3c1      	bcc.n	8002a32 <OLED_Showdecimal+0x16e>
	}
	if(i==1)//如果为负，就将最前的一位赋值‘-’
 8002aae:	7dbb      	ldrb	r3, [r7, #22]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10c      	bne.n	8002ace <OLED_Showdecimal+0x20a>
	{
		OLED_ShowChar(x,y,'-',size2, Color_Turn);
 8002ab4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002ab8:	79b9      	ldrb	r1, [r7, #6]
 8002aba:	79f8      	ldrb	r0, [r7, #7]
 8002abc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	222d      	movs	r2, #45	; 0x2d
 8002ac6:	f7ff fe03 	bl	80026d0 <OLED_ShowChar>
		i=0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75bb      	strb	r3, [r7, #22]
	}
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	cccccccd 	.word	0xcccccccd

08002adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_MspInit+0x5c>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_MspInit+0x5c>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6193      	str	r3, [r2, #24]
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_MspInit+0x5c>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_MspInit+0x5c>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_MspInit+0x5c>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	61d3      	str	r3, [r2, #28]
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_MspInit+0x5c>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_MspInit+0x60>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_MspInit+0x60>)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010000 	.word	0x40010000

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b44:	e7fe      	b.n	8002b44 <NMI_Handler+0x4>

08002b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <MemManage_Handler+0x4>

08002b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <BusFault_Handler+0x4>

08002b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <UsageFault_Handler+0x4>

08002b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b86:	f000 fae5 	bl	8003154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA1_Channel4_IRQHandler+0x10>)
 8002b96:	f000 fce5 	bl	8003564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000778 	.word	0x20000778

08002ba4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <TIM1_BRK_IRQHandler+0x10>)
 8002baa:	f002 f939 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200006a0 	.word	0x200006a0

08002bb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <TIM1_UP_IRQHandler+0x10>)
 8002bbe:	f002 f92f 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200006a0 	.word	0x200006a0

08002bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <_kill>:

int _kill(int pid, int sig)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002be4:	f003 fe8e 	bl	8006904 <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2216      	movs	r2, #22
 8002bec:	601a      	str	r2, [r3, #0]
  return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_exit>:

void _exit (int status)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c02:	f04f 31ff 	mov.w	r1, #4294967295
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffe7 	bl	8002bda <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c0c:	e7fe      	b.n	8002c0c <_exit+0x12>

08002c0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e00a      	b.n	8002c36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c20:	f3af 8000 	nop.w
 8002c24:	4601      	mov	r1, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	60ba      	str	r2, [r7, #8]
 8002c2c:	b2ca      	uxtb	r2, r1
 8002c2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dbf0      	blt.n	8002c20 <_read+0x12>
  }

  return len;
 8002c3e:	687b      	ldr	r3, [r7, #4]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e009      	b.n	8002c6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	60ba      	str	r2, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f8f6 	bl	8002e54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbf1      	blt.n	8002c5a <_write+0x12>
  }
  return len;
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_close>:

int _close(int file)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <_isatty>:

int _isatty(int file)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f003 fdf8 	bl	8006904 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20005000 	.word	0x20005000
 8002d40:	00000800 	.word	0x00000800
 8002d44:	2000069c 	.word	0x2000069c
 8002d48:	20000910 	.word	0x20000910

08002d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <MX_TIM1_Init+0x9c>)
 8002d78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002d7c:	2247      	movs	r2, #71	; 0x47
 8002d7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002da0:	4813      	ldr	r0, [pc, #76]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002da2:	f001 ff9b 	bl	8004cdc <HAL_TIM_Base_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002dac:	f7ff f848 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002db6:	f107 0308 	add.w	r3, r7, #8
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002dbe:	f002 f91f 	bl	8005000 <HAL_TIM_ConfigClockSource>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002dc8:	f7ff f83a 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_TIM1_Init+0x98>)
 8002dda:	f002 fb01 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002de4:	f7ff f82c 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200006a0 	.word	0x200006a0
 8002df4:	40012c00 	.word	0x40012c00

08002df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_TIM_Base_MspInit+0x54>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d11b      	bne.n	8002e42 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_TIM_Base_MspInit+0x58>)
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <HAL_TIM_Base_MspInit+0x58>)
 8002e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e14:	6193      	str	r3, [r2, #24]
 8002e16:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <HAL_TIM_Base_MspInit+0x58>)
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	2018      	movs	r0, #24
 8002e28:	f000 faab 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002e2c:	2018      	movs	r0, #24
 8002e2e:	f000 fac4 	bl	80033ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	2019      	movs	r0, #25
 8002e38:	f000 faa3 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002e3c:	2019      	movs	r0, #25
 8002e3e:	f000 fabc 	bl	80033ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40021000 	.word	0x40021000

08002e54 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8002e5c:	1d39      	adds	r1, r7, #4
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	2201      	movs	r2, #1
 8002e64:	4803      	ldr	r0, [pc, #12]	; (8002e74 <__io_putchar+0x20>)
 8002e66:	f002 fb7b 	bl	8005560 <HAL_UART_Transmit>
    return ch;
 8002e6a:	687b      	ldr	r3, [r7, #4]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	200006e8 	.word	0x200006e8

08002e78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <MX_USART1_UART_Init+0x50>)
 8002e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002eb0:	f002 fb06 	bl	80054c0 <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eba:	f7fe ffc1 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200006e8 	.word	0x200006e8
 8002ec8:	40013800 	.word	0x40013800

08002ecc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <MX_USART2_UART_Init+0x50>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002f04:	f002 fadc 	bl	80054c0 <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f0e:	f7fe ff97 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000730 	.word	0x20000730
 8002f1c:	40004400 	.word	0x40004400

08002f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0318 	add.w	r3, r7, #24
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d158      	bne.n	8002ff2 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f40:	4b49      	ldr	r3, [pc, #292]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a48      	ldr	r2, [pc, #288]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b46      	ldr	r3, [pc, #280]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4a42      	ldr	r2, [pc, #264]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6193      	str	r3, [r2, #24]
 8002f64:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0318 	add.w	r3, r7, #24
 8002f82:	4619      	mov	r1, r3
 8002f84:	4839      	ldr	r0, [pc, #228]	; (800306c <HAL_UART_MspInit+0x14c>)
 8002f86:	f000 fc21 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 0318 	add.w	r3, r7, #24
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4833      	ldr	r0, [pc, #204]	; (800306c <HAL_UART_MspInit+0x14c>)
 8002fa0:	f000 fc14 	bl	80037cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002fa4:	4b32      	ldr	r3, [pc, #200]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fa6:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_UART_MspInit+0x154>)
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fac:	2210      	movs	r2, #16
 8002fae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fd4:	4826      	ldr	r0, [pc, #152]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fd6:	f000 fa0b 	bl	80033f0 <HAL_DMA_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002fe0:	f7fe ff2e 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ff0:	e034      	b.n	800305c <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_UART_MspInit+0x158>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d12f      	bne.n	800305c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4a19      	ldr	r2, [pc, #100]	; (8003068 <HAL_UART_MspInit+0x148>)
 8003002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003006:	61d3      	str	r3, [r2, #28]
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_UART_MspInit+0x148>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_UART_MspInit+0x148>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_UART_MspInit+0x148>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	6193      	str	r3, [r2, #24]
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_UART_MspInit+0x148>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800302c:	2304      	movs	r3, #4
 800302e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003034:	2303      	movs	r3, #3
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003038:	f107 0318 	add.w	r3, r7, #24
 800303c:	4619      	mov	r1, r3
 800303e:	480b      	ldr	r0, [pc, #44]	; (800306c <HAL_UART_MspInit+0x14c>)
 8003040:	f000 fbc4 	bl	80037cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003044:	2308      	movs	r3, #8
 8003046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003050:	f107 0318 	add.w	r3, r7, #24
 8003054:	4619      	mov	r1, r3
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <HAL_UART_MspInit+0x14c>)
 8003058:	f000 fbb8 	bl	80037cc <HAL_GPIO_Init>
}
 800305c:	bf00      	nop
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013800 	.word	0x40013800
 8003068:	40021000 	.word	0x40021000
 800306c:	40010800 	.word	0x40010800
 8003070:	20000778 	.word	0x20000778
 8003074:	40020044 	.word	0x40020044
 8003078:	40004400 	.word	0x40004400

0800307c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800307c:	f7ff fe66 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003080:	480b      	ldr	r0, [pc, #44]	; (80030b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003082:	490c      	ldr	r1, [pc, #48]	; (80030b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003088:	e002      	b.n	8003090 <LoopCopyDataInit>

0800308a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800308a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800308c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800308e:	3304      	adds	r3, #4

08003090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003094:	d3f9      	bcc.n	800308a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003098:	4c09      	ldr	r4, [pc, #36]	; (80030c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800309a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800309c:	e001      	b.n	80030a2 <LoopFillZerobss>

0800309e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800309e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a0:	3204      	adds	r2, #4

080030a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a4:	d3fb      	bcc.n	800309e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030a6:	f003 fc33 	bl	8006910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030aa:	f7fe fe69 	bl	8001d80 <main>
  bx lr
 80030ae:	4770      	bx	lr
  ldr r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80030b8:	08009204 	.word	0x08009204
  ldr r2, =_sbss
 80030bc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80030c0:	2000090c 	.word	0x2000090c

080030c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030c4:	e7fe      	b.n	80030c4 <ADC1_2_IRQHandler>
	...

080030c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_Init+0x28>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_Init+0x28>)
 80030d2:	f043 0310 	orr.w	r3, r3, #16
 80030d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d8:	2003      	movs	r0, #3
 80030da:	f000 f947 	bl	800336c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030de:	200f      	movs	r0, #15
 80030e0:	f000 f808 	bl	80030f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e4:	f7ff fcfa 	bl	8002adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_InitTick+0x54>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_InitTick+0x58>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800310a:	fbb3 f3f1 	udiv	r3, r3, r1
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f95f 	bl	80033d6 <HAL_SYSTICK_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e00e      	b.n	8003140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d80a      	bhi.n	800313e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003128:	2200      	movs	r2, #0
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f000 f927 	bl	8003382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003134:	4a06      	ldr	r2, [pc, #24]	; (8003150 <HAL_InitTick+0x5c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	2000001c 	.word	0x2000001c
 800314c:	20000024 	.word	0x20000024
 8003150:	20000020 	.word	0x20000020

08003154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_IncTick+0x1c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_IncTick+0x20>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4413      	add	r3, r2
 8003164:	4a03      	ldr	r2, [pc, #12]	; (8003174 <HAL_IncTick+0x20>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	20000024 	.word	0x20000024
 8003174:	200007bc 	.word	0x200007bc

08003178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return uwTick;
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <HAL_GetTick+0x10>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	200007bc 	.word	0x200007bc

0800318c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff fff0 	bl	8003178 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d005      	beq.n	80031b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_Delay+0x44>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031b2:	bf00      	nop
 80031b4:	f7ff ffe0 	bl	8003178 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d8f7      	bhi.n	80031b4 <HAL_Delay+0x28>
  {
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000024 	.word	0x20000024

080031d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	; (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db0b      	blt.n	8003262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4906      	ldr	r1, [pc, #24]	; (800326c <__NVIC_EnableIRQ+0x34>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db0a      	blt.n	800329a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	490c      	ldr	r1, [pc, #48]	; (80032bc <__NVIC_SetPriority+0x4c>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	440b      	add	r3, r1
 8003294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003298:	e00a      	b.n	80032b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <__NVIC_SetPriority+0x50>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	3b04      	subs	r3, #4
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	440b      	add	r3, r1
 80032ae:	761a      	strb	r2, [r3, #24]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f1c3 0307 	rsb	r3, r3, #7
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf28      	it	cs
 80032e2:	2304      	movcs	r3, #4
 80032e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <NVIC_EncodePriority+0x30>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3b03      	subs	r3, #3
 80032f2:	e000      	b.n	80032f6 <NVIC_EncodePriority+0x32>
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43d9      	mvns	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	4313      	orrs	r3, r2
         );
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003338:	d301      	bcc.n	800333e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <SysTick_Config+0x40>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003346:	210f      	movs	r1, #15
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f7ff ff90 	bl	8003270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <SysTick_Config+0x40>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <SysTick_Config+0x40>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000e010 	.word	0xe000e010

0800336c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff2d 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003394:	f7ff ff42 	bl	800321c <__NVIC_GetPriorityGrouping>
 8003398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff ff90 	bl	80032c4 <NVIC_EncodePriority>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff5f 	bl	8003270 <__NVIC_SetPriority>
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff35 	bl	8003238 <__NVIC_EnableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffa2 	bl	8003328 <SysTick_Config>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e043      	b.n	800348e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_DMA_Init+0xa8>)
 800340e:	4413      	add	r3, r2
 8003410:	4a22      	ldr	r2, [pc, #136]	; (800349c <HAL_DMA_Init+0xac>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	009a      	lsls	r2, r3, #2
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_DMA_Init+0xb0>)
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800343a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800343e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	bffdfff8 	.word	0xbffdfff8
 800349c:	cccccccd 	.word	0xcccccccd
 80034a0:	40020000 	.word	0x40020000

080034a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_DMA_Start_IT+0x20>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e04b      	b.n	800355c <HAL_DMA_Start_IT+0xb8>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d13a      	bne.n	800354e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f937 	bl	8003770 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 020e 	orr.w	r2, r2, #14
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e00f      	b.n	800353c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 020a 	orr.w	r2, r2, #10
 800353a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e005      	b.n	800355a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003556:	2302      	movs	r3, #2
 8003558:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2204      	movs	r2, #4
 8003582:	409a      	lsls	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d04f      	beq.n	800362c <HAL_DMA_IRQHandler+0xc8>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d04a      	beq.n	800362c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d107      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a66      	ldr	r2, [pc, #408]	; (8003754 <HAL_DMA_IRQHandler+0x1f0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d029      	beq.n	8003612 <HAL_DMA_IRQHandler+0xae>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a65      	ldr	r2, [pc, #404]	; (8003758 <HAL_DMA_IRQHandler+0x1f4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_DMA_IRQHandler+0xaa>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a63      	ldr	r2, [pc, #396]	; (800375c <HAL_DMA_IRQHandler+0x1f8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01a      	beq.n	8003608 <HAL_DMA_IRQHandler+0xa4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a62      	ldr	r2, [pc, #392]	; (8003760 <HAL_DMA_IRQHandler+0x1fc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d012      	beq.n	8003602 <HAL_DMA_IRQHandler+0x9e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a60      	ldr	r2, [pc, #384]	; (8003764 <HAL_DMA_IRQHandler+0x200>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00a      	beq.n	80035fc <HAL_DMA_IRQHandler+0x98>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a5f      	ldr	r2, [pc, #380]	; (8003768 <HAL_DMA_IRQHandler+0x204>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d102      	bne.n	80035f6 <HAL_DMA_IRQHandler+0x92>
 80035f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035f4:	e00e      	b.n	8003614 <HAL_DMA_IRQHandler+0xb0>
 80035f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035fa:	e00b      	b.n	8003614 <HAL_DMA_IRQHandler+0xb0>
 80035fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003600:	e008      	b.n	8003614 <HAL_DMA_IRQHandler+0xb0>
 8003602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003606:	e005      	b.n	8003614 <HAL_DMA_IRQHandler+0xb0>
 8003608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800360c:	e002      	b.n	8003614 <HAL_DMA_IRQHandler+0xb0>
 800360e:	2340      	movs	r3, #64	; 0x40
 8003610:	e000      	b.n	8003614 <HAL_DMA_IRQHandler+0xb0>
 8003612:	2304      	movs	r3, #4
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_DMA_IRQHandler+0x208>)
 8003616:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8094 	beq.w	800374a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800362a:	e08e      	b.n	800374a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2202      	movs	r2, #2
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d056      	beq.n	80036ea <HAL_DMA_IRQHandler+0x186>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d051      	beq.n	80036ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 020a 	bic.w	r2, r2, #10
 8003662:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a38      	ldr	r2, [pc, #224]	; (8003754 <HAL_DMA_IRQHandler+0x1f0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d029      	beq.n	80036ca <HAL_DMA_IRQHandler+0x166>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a37      	ldr	r2, [pc, #220]	; (8003758 <HAL_DMA_IRQHandler+0x1f4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x162>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a35      	ldr	r2, [pc, #212]	; (800375c <HAL_DMA_IRQHandler+0x1f8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x15c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_DMA_IRQHandler+0x1fc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d012      	beq.n	80036ba <HAL_DMA_IRQHandler+0x156>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a32      	ldr	r2, [pc, #200]	; (8003764 <HAL_DMA_IRQHandler+0x200>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00a      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x150>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a31      	ldr	r2, [pc, #196]	; (8003768 <HAL_DMA_IRQHandler+0x204>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d102      	bne.n	80036ae <HAL_DMA_IRQHandler+0x14a>
 80036a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036ac:	e00e      	b.n	80036cc <HAL_DMA_IRQHandler+0x168>
 80036ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b2:	e00b      	b.n	80036cc <HAL_DMA_IRQHandler+0x168>
 80036b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b8:	e008      	b.n	80036cc <HAL_DMA_IRQHandler+0x168>
 80036ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036be:	e005      	b.n	80036cc <HAL_DMA_IRQHandler+0x168>
 80036c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c4:	e002      	b.n	80036cc <HAL_DMA_IRQHandler+0x168>
 80036c6:	2320      	movs	r3, #32
 80036c8:	e000      	b.n	80036cc <HAL_DMA_IRQHandler+0x168>
 80036ca:	2302      	movs	r3, #2
 80036cc:	4a27      	ldr	r2, [pc, #156]	; (800376c <HAL_DMA_IRQHandler+0x208>)
 80036ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d034      	beq.n	800374a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036e8:	e02f      	b.n	800374a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2208      	movs	r2, #8
 80036f0:	409a      	lsls	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d028      	beq.n	800374c <HAL_DMA_IRQHandler+0x1e8>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d023      	beq.n	800374c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 020e 	bic.w	r2, r2, #14
 8003712:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	2101      	movs	r1, #1
 800371e:	fa01 f202 	lsl.w	r2, r1, r2
 8003722:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
    }
  }
  return;
 800374a:	bf00      	nop
 800374c:	bf00      	nop
}
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40020008 	.word	0x40020008
 8003758:	4002001c 	.word	0x4002001c
 800375c:	40020030 	.word	0x40020030
 8003760:	40020044 	.word	0x40020044
 8003764:	40020058 	.word	0x40020058
 8003768:	4002006c 	.word	0x4002006c
 800376c:	40020000 	.word	0x40020000

08003770 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b10      	cmp	r3, #16
 800379c:	d108      	bne.n	80037b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037ae:	e007      	b.n	80037c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b08b      	sub	sp, #44	; 0x2c
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037da:	2300      	movs	r3, #0
 80037dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	e169      	b.n	8003ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037e0:	2201      	movs	r2, #1
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 8158 	bne.w	8003aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a9a      	ldr	r2, [pc, #616]	; (8003a6c <HAL_GPIO_Init+0x2a0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d05e      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003808:	4a98      	ldr	r2, [pc, #608]	; (8003a6c <HAL_GPIO_Init+0x2a0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d875      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 800380e:	4a98      	ldr	r2, [pc, #608]	; (8003a70 <HAL_GPIO_Init+0x2a4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d058      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003814:	4a96      	ldr	r2, [pc, #600]	; (8003a70 <HAL_GPIO_Init+0x2a4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d86f      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 800381a:	4a96      	ldr	r2, [pc, #600]	; (8003a74 <HAL_GPIO_Init+0x2a8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d052      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003820:	4a94      	ldr	r2, [pc, #592]	; (8003a74 <HAL_GPIO_Init+0x2a8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d869      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 8003826:	4a94      	ldr	r2, [pc, #592]	; (8003a78 <HAL_GPIO_Init+0x2ac>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d04c      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 800382c:	4a92      	ldr	r2, [pc, #584]	; (8003a78 <HAL_GPIO_Init+0x2ac>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d863      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 8003832:	4a92      	ldr	r2, [pc, #584]	; (8003a7c <HAL_GPIO_Init+0x2b0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d046      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003838:	4a90      	ldr	r2, [pc, #576]	; (8003a7c <HAL_GPIO_Init+0x2b0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d85d      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 800383e:	2b12      	cmp	r3, #18
 8003840:	d82a      	bhi.n	8003898 <HAL_GPIO_Init+0xcc>
 8003842:	2b12      	cmp	r3, #18
 8003844:	d859      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 8003846:	a201      	add	r2, pc, #4	; (adr r2, 800384c <HAL_GPIO_Init+0x80>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	080038c7 	.word	0x080038c7
 8003850:	080038a1 	.word	0x080038a1
 8003854:	080038b3 	.word	0x080038b3
 8003858:	080038f5 	.word	0x080038f5
 800385c:	080038fb 	.word	0x080038fb
 8003860:	080038fb 	.word	0x080038fb
 8003864:	080038fb 	.word	0x080038fb
 8003868:	080038fb 	.word	0x080038fb
 800386c:	080038fb 	.word	0x080038fb
 8003870:	080038fb 	.word	0x080038fb
 8003874:	080038fb 	.word	0x080038fb
 8003878:	080038fb 	.word	0x080038fb
 800387c:	080038fb 	.word	0x080038fb
 8003880:	080038fb 	.word	0x080038fb
 8003884:	080038fb 	.word	0x080038fb
 8003888:	080038fb 	.word	0x080038fb
 800388c:	080038fb 	.word	0x080038fb
 8003890:	080038a9 	.word	0x080038a9
 8003894:	080038bd 	.word	0x080038bd
 8003898:	4a79      	ldr	r2, [pc, #484]	; (8003a80 <HAL_GPIO_Init+0x2b4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800389e:	e02c      	b.n	80038fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	623b      	str	r3, [r7, #32]
          break;
 80038a6:	e029      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	3304      	adds	r3, #4
 80038ae:	623b      	str	r3, [r7, #32]
          break;
 80038b0:	e024      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	3308      	adds	r3, #8
 80038b8:	623b      	str	r3, [r7, #32]
          break;
 80038ba:	e01f      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	330c      	adds	r3, #12
 80038c2:	623b      	str	r3, [r7, #32]
          break;
 80038c4:	e01a      	b.n	80038fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038ce:	2304      	movs	r3, #4
 80038d0:	623b      	str	r3, [r7, #32]
          break;
 80038d2:	e013      	b.n	80038fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038dc:	2308      	movs	r3, #8
 80038de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	611a      	str	r2, [r3, #16]
          break;
 80038e6:	e009      	b.n	80038fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038e8:	2308      	movs	r3, #8
 80038ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	615a      	str	r2, [r3, #20]
          break;
 80038f2:	e003      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038f4:	2300      	movs	r3, #0
 80038f6:	623b      	str	r3, [r7, #32]
          break;
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x130>
          break;
 80038fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2bff      	cmp	r3, #255	; 0xff
 8003900:	d801      	bhi.n	8003906 <HAL_GPIO_Init+0x13a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	e001      	b.n	800390a <HAL_GPIO_Init+0x13e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2bff      	cmp	r3, #255	; 0xff
 8003910:	d802      	bhi.n	8003918 <HAL_GPIO_Init+0x14c>
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	e002      	b.n	800391e <HAL_GPIO_Init+0x152>
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	3b08      	subs	r3, #8
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	210f      	movs	r1, #15
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	431a      	orrs	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80b1 	beq.w	8003aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800394c:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_GPIO_Init+0x2b8>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	4a4c      	ldr	r2, [pc, #304]	; (8003a84 <HAL_GPIO_Init+0x2b8>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6193      	str	r3, [r2, #24]
 8003958:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_GPIO_Init+0x2b8>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003964:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <HAL_GPIO_Init+0x2bc>)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <HAL_GPIO_Init+0x2c0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_GPIO_Init+0x1ec>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3f      	ldr	r2, [pc, #252]	; (8003a90 <HAL_GPIO_Init+0x2c4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00d      	beq.n	80039b4 <HAL_GPIO_Init+0x1e8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3e      	ldr	r2, [pc, #248]	; (8003a94 <HAL_GPIO_Init+0x2c8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <HAL_GPIO_Init+0x1e4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <HAL_GPIO_Init+0x2cc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_GPIO_Init+0x1e0>
 80039a8:	2303      	movs	r3, #3
 80039aa:	e006      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039ac:	2304      	movs	r3, #4
 80039ae:	e004      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e002      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039b8:	2300      	movs	r3, #0
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	f002 0203 	and.w	r2, r2, #3
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	4093      	lsls	r3, r2
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039ca:	492f      	ldr	r1, [pc, #188]	; (8003a88 <HAL_GPIO_Init+0x2bc>)
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	492c      	ldr	r1, [pc, #176]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]
 80039f0:	e006      	b.n	8003a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4928      	ldr	r1, [pc, #160]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4922      	ldr	r1, [pc, #136]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60cb      	str	r3, [r1, #12]
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	491e      	ldr	r1, [pc, #120]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	4918      	ldr	r1, [pc, #96]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	4914      	ldr	r1, [pc, #80]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d021      	beq.n	8003aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
 8003a68:	e021      	b.n	8003aae <HAL_GPIO_Init+0x2e2>
 8003a6a:	bf00      	nop
 8003a6c:	10320000 	.word	0x10320000
 8003a70:	10310000 	.word	0x10310000
 8003a74:	10220000 	.word	0x10220000
 8003a78:	10210000 	.word	0x10210000
 8003a7c:	10120000 	.word	0x10120000
 8003a80:	10110000 	.word	0x10110000
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010800 	.word	0x40010800
 8003a90:	40010c00 	.word	0x40010c00
 8003a94:	40011000 	.word	0x40011000
 8003a98:	40011400 	.word	0x40011400
 8003a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	4909      	ldr	r1, [pc, #36]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f47f ae8e 	bne.w	80037e0 <HAL_GPIO_Init+0x14>
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	372c      	adds	r7, #44	; 0x2c
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	887b      	ldrh	r3, [r7, #2]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e001      	b.n	8003af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	807b      	strh	r3, [r7, #2]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b12:	787b      	ldrb	r3, [r7, #1]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b18:	887a      	ldrh	r2, [r7, #2]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b1e:	e003      	b.n	8003b28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	041a      	lsls	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	611a      	str	r2, [r3, #16]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b44:	887a      	ldrh	r2, [r7, #2]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	041a      	lsls	r2, r3, #16
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	43d9      	mvns	r1, r3
 8003b50:	887b      	ldrh	r3, [r7, #2]
 8003b52:	400b      	ands	r3, r1
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	611a      	str	r2, [r3, #16]
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e12b      	b.n	8003dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fe f860 	bl	8001c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f001 f842 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a81      	ldr	r2, [pc, #516]	; (8003dd8 <HAL_I2C_Init+0x274>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d807      	bhi.n	8003be8 <HAL_I2C_Init+0x84>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a80      	ldr	r2, [pc, #512]	; (8003ddc <HAL_I2C_Init+0x278>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bf94      	ite	ls
 8003be0:	2301      	movls	r3, #1
 8003be2:	2300      	movhi	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e006      	b.n	8003bf6 <HAL_I2C_Init+0x92>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a7d      	ldr	r2, [pc, #500]	; (8003de0 <HAL_I2C_Init+0x27c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bf94      	ite	ls
 8003bf0:	2301      	movls	r3, #1
 8003bf2:	2300      	movhi	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e0e7      	b.n	8003dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a78      	ldr	r2, [pc, #480]	; (8003de4 <HAL_I2C_Init+0x280>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0c9b      	lsrs	r3, r3, #18
 8003c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <HAL_I2C_Init+0x274>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d802      	bhi.n	8003c38 <HAL_I2C_Init+0xd4>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3301      	adds	r3, #1
 8003c36:	e009      	b.n	8003c4c <HAL_I2C_Init+0xe8>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <HAL_I2C_Init+0x284>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	495c      	ldr	r1, [pc, #368]	; (8003dd8 <HAL_I2C_Init+0x274>)
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d819      	bhi.n	8003ca0 <HAL_I2C_Init+0x13c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e59      	subs	r1, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c7a:	1c59      	adds	r1, r3, #1
 8003c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c80:	400b      	ands	r3, r1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_I2C_Init+0x138>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1e59      	subs	r1, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9a:	e051      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	e04f      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d111      	bne.n	8003ccc <HAL_I2C_Init+0x168>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	440b      	add	r3, r1
 8003cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e012      	b.n	8003cf2 <HAL_I2C_Init+0x18e>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	0099      	lsls	r1, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Init+0x196>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e022      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <HAL_I2C_Init+0x1bc>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1e58      	subs	r0, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6859      	ldr	r1, [r3, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	440b      	add	r3, r1
 8003d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	e00f      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	6809      	ldr	r1, [r1, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6911      	ldr	r1, [r2, #16]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	000186a0 	.word	0x000186a0
 8003ddc:	001e847f 	.word	0x001e847f
 8003de0:	003d08ff 	.word	0x003d08ff
 8003de4:	431bde83 	.word	0x431bde83
 8003de8:	10624dd3 	.word	0x10624dd3

08003dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	813b      	strh	r3, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e06:	f7ff f9b7 	bl	8003178 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	f040 80d9 	bne.w	8003fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2319      	movs	r3, #25
 8003e20:	2201      	movs	r2, #1
 8003e22:	496d      	ldr	r1, [pc, #436]	; (8003fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f971 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0cc      	b.n	8003fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Mem_Write+0x56>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0c5      	b.n	8003fce <HAL_I2C_Mem_Write+0x1e2>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d007      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2221      	movs	r2, #33	; 0x21
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a4d      	ldr	r2, [pc, #308]	; (8003fdc <HAL_I2C_Mem_Write+0x1f0>)
 8003ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eaa:	88f8      	ldrh	r0, [r7, #6]
 8003eac:	893a      	ldrh	r2, [r7, #8]
 8003eae:	8979      	ldrh	r1, [r7, #10]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	4603      	mov	r3, r0
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f890 	bl	8003fe0 <I2C_RequestMemoryWrite>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d052      	beq.n	8003f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e081      	b.n	8003fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fa36 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06b      	b.n	8003fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d11b      	bne.n	8003f6c <HAL_I2C_Mem_Write+0x180>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d017      	beq.n	8003f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1aa      	bne.n	8003eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fa29 	bl	80043d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d107      	bne.n	8003f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e016      	b.n	8003fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	00100002 	.word	0x00100002
 8003fdc:	ffff0000 	.word	0xffff0000

08003fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	817b      	strh	r3, [r7, #10]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	813b      	strh	r3, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2200      	movs	r2, #0
 8004012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f878 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004030:	d103      	bne.n	800403a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e05f      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800404c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	6a3a      	ldr	r2, [r7, #32]
 8004052:	492d      	ldr	r1, [pc, #180]	; (8004108 <I2C_RequestMemoryWrite+0x128>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f8d3 	bl	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04c      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f95e 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e02b      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d105      	bne.n	80040b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	e021      	b.n	80040fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040b8:	893b      	ldrh	r3, [r7, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	b29b      	uxth	r3, r3
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f938 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e005      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f2:	893b      	ldrh	r3, [r7, #8]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	00010002 	.word	0x00010002

0800410c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411c:	e048      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d044      	beq.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7ff f827 	bl	8003178 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d139      	bne.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10d      	bne.n	8004162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	43da      	mvns	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	e00c      	b.n	800417c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	43da      	mvns	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	429a      	cmp	r2, r3
 8004180:	d116      	bne.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e023      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	0c1b      	lsrs	r3, r3, #16
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d10d      	bne.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	e00c      	b.n	80041f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	43da      	mvns	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d093      	beq.n	800411e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420e:	e071      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421e:	d123      	bne.n	8004268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	f043 0204 	orr.w	r2, r3, #4
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e067      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d041      	beq.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004270:	f7fe ff82 	bl	8003178 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d136      	bne.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10c      	bne.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e00b      	b.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	43da      	mvns	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e021      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10c      	bne.n	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	43da      	mvns	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e00b      	b.n	8004330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4013      	ands	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	f47f af6d 	bne.w	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800434c:	e034      	b.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f886 	bl	8004460 <I2C_IsAcknowledgeFailed>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e034      	b.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d028      	beq.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fe ff07 	bl	8003178 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11d      	bne.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d016      	beq.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e007      	b.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d1c3      	bne.n	800434e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043dc:	e034      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f83e 	bl	8004460 <I2C_IsAcknowledgeFailed>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e034      	b.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d028      	beq.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fe febf 	bl	8003178 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11d      	bne.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b04      	cmp	r3, #4
 8004418:	d016      	beq.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e007      	b.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d1c3      	bne.n	80043de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004476:	d11b      	bne.n	80044b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f043 0204 	orr.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e272      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8087 	beq.w	80045ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044dc:	4b92      	ldr	r3, [pc, #584]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d00c      	beq.n	8004502 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044e8:	4b8f      	ldr	r3, [pc, #572]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d112      	bne.n	800451a <HAL_RCC_OscConfig+0x5e>
 80044f4:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004500:	d10b      	bne.n	800451a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004502:	4b89      	ldr	r3, [pc, #548]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d06c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x12c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d168      	bne.n	80045e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e24c      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x76>
 8004524:	4b80      	ldr	r3, [pc, #512]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a7f      	ldr	r2, [pc, #508]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e02e      	b.n	8004590 <HAL_RCC_OscConfig+0xd4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x98>
 800453a:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7a      	ldr	r2, [pc, #488]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b78      	ldr	r3, [pc, #480]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a77      	ldr	r2, [pc, #476]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800454c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e01d      	b.n	8004590 <HAL_RCC_OscConfig+0xd4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0xbc>
 800455e:	4b72      	ldr	r3, [pc, #456]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a71      	ldr	r2, [pc, #452]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4b6f      	ldr	r3, [pc, #444]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6e      	ldr	r2, [pc, #440]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0xd4>
 8004578:	4b6b      	ldr	r3, [pc, #428]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6a      	ldr	r2, [pc, #424]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a67      	ldr	r2, [pc, #412]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800458a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe fdee 	bl	8003178 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fe fdea 	bl	8003178 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e200      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	4b5d      	ldr	r3, [pc, #372]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0xe4>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe fdda 	bl	8003178 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fe fdd6 	bl	8003178 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e1ec      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x10c>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d063      	beq.n	80046be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045f6:	4b4c      	ldr	r3, [pc, #304]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004602:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b08      	cmp	r3, #8
 800460c:	d11c      	bne.n	8004648 <HAL_RCC_OscConfig+0x18c>
 800460e:	4b46      	ldr	r3, [pc, #280]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d116      	bne.n	8004648 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	4b43      	ldr	r3, [pc, #268]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_RCC_OscConfig+0x176>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e1c0      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4939      	ldr	r1, [pc, #228]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	e03a      	b.n	80046be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004650:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fe fd8f 	bl	8003178 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465e:	f7fe fd8b 	bl	8003178 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e1a1      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4927      	ldr	r1, [pc, #156]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
 8004690:	e015      	b.n	80046be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004692:	4b26      	ldr	r3, [pc, #152]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fe fd6e 	bl	8003178 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a0:	f7fe fd6a 	bl	8003178 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e180      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d03a      	beq.n	8004740 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d019      	beq.n	8004706 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <HAL_RCC_OscConfig+0x274>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d8:	f7fe fd4e 	bl	8003178 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fe fd4a 	bl	8003178 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e160      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f2:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046fe:	2001      	movs	r0, #1
 8004700:	f000 face 	bl	8004ca0 <RCC_Delay>
 8004704:	e01c      	b.n	8004740 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <HAL_RCC_OscConfig+0x274>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470c:	f7fe fd34 	bl	8003178 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004712:	e00f      	b.n	8004734 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004714:	f7fe fd30 	bl	8003178 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d908      	bls.n	8004734 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e146      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	42420000 	.word	0x42420000
 8004730:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004734:	4b92      	ldr	r3, [pc, #584]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e9      	bne.n	8004714 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80a6 	beq.w	800489a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004752:	4b8b      	ldr	r3, [pc, #556]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	4b88      	ldr	r3, [pc, #544]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4a87      	ldr	r2, [pc, #540]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	61d3      	str	r3, [r2, #28]
 800476a:	4b85      	ldr	r3, [pc, #532]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b82      	ldr	r3, [pc, #520]	; (8004984 <HAL_RCC_OscConfig+0x4c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004786:	4b7f      	ldr	r3, [pc, #508]	; (8004984 <HAL_RCC_OscConfig+0x4c8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a7e      	ldr	r2, [pc, #504]	; (8004984 <HAL_RCC_OscConfig+0x4c8>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fe fcf1 	bl	8003178 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fe fced 	bl	8003178 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	; 0x64
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e103      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	4b75      	ldr	r3, [pc, #468]	; (8004984 <HAL_RCC_OscConfig+0x4c8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x312>
 80047c0:	4b6f      	ldr	r3, [pc, #444]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	4a6e      	ldr	r2, [pc, #440]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6213      	str	r3, [r2, #32]
 80047cc:	e02d      	b.n	800482a <HAL_RCC_OscConfig+0x36e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x334>
 80047d6:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a69      	ldr	r2, [pc, #420]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	6213      	str	r3, [r2, #32]
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	4a66      	ldr	r2, [pc, #408]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	6213      	str	r3, [r2, #32]
 80047ee:	e01c      	b.n	800482a <HAL_RCC_OscConfig+0x36e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d10c      	bne.n	8004812 <HAL_RCC_OscConfig+0x356>
 80047f8:	4b61      	ldr	r3, [pc, #388]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4a60      	ldr	r2, [pc, #384]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6213      	str	r3, [r2, #32]
 8004804:	4b5e      	ldr	r3, [pc, #376]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4a5d      	ldr	r2, [pc, #372]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6213      	str	r3, [r2, #32]
 8004810:	e00b      	b.n	800482a <HAL_RCC_OscConfig+0x36e>
 8004812:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a5a      	ldr	r2, [pc, #360]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6213      	str	r3, [r2, #32]
 800481e:	4b58      	ldr	r3, [pc, #352]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4a57      	ldr	r2, [pc, #348]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d015      	beq.n	800485e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004832:	f7fe fca1 	bl	8003178 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fe fc9d 	bl	8003178 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0b1      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ee      	beq.n	800483a <HAL_RCC_OscConfig+0x37e>
 800485c:	e014      	b.n	8004888 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485e:	f7fe fc8b 	bl	8003178 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fe fc87 	bl	8003178 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e09b      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	4b40      	ldr	r3, [pc, #256]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ee      	bne.n	8004866 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488e:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4a3b      	ldr	r2, [pc, #236]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004898:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8087 	beq.w	80049b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a4:	4b36      	ldr	r3, [pc, #216]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d061      	beq.n	8004974 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d146      	bne.n	8004946 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	4b33      	ldr	r3, [pc, #204]	; (8004988 <HAL_RCC_OscConfig+0x4cc>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fe fc5b 	bl	8003178 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fe fc57 	bl	8003178 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e06d      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d8:	4b29      	ldr	r3, [pc, #164]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ec:	d108      	bne.n	8004900 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	4921      	ldr	r1, [pc, #132]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a19      	ldr	r1, [r3, #32]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	430b      	orrs	r3, r1
 8004912:	491b      	ldr	r1, [pc, #108]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x4cc>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491e:	f7fe fc2b 	bl	8003178 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004926:	f7fe fc27 	bl	8003178 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e03d      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x46a>
 8004944:	e035      	b.n	80049b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_RCC_OscConfig+0x4cc>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fe fc14 	bl	8003178 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004954:	f7fe fc10 	bl	8003178 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e026      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x498>
 8004972:	e01e      	b.n	80049b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d107      	bne.n	800498c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e019      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
 8004980:	40021000 	.word	0x40021000
 8004984:	40007000 	.word	0x40007000
 8004988:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_RCC_OscConfig+0x500>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	429a      	cmp	r2, r3
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000

080049c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0d0      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b6a      	ldr	r3, [pc, #424]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d910      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b67      	ldr	r3, [pc, #412]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 0207 	bic.w	r2, r3, #7
 80049ea:	4965      	ldr	r1, [pc, #404]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d040      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d115      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e073      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e06b      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f023 0203 	bic.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4936      	ldr	r1, [pc, #216]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab0:	f7fe fb62 	bl	8003178 <HAL_GetTick>
 8004ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab8:	f7fe fb5e 	bl	8003178 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e053      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 020c 	and.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1eb      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d210      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 0207 	bic.w	r2, r3, #7
 8004af6:	4922      	ldr	r1, [pc, #136]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f821 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	490a      	ldr	r1, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1cc>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1d0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe fac0 	bl	80030f4 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40021000 	.word	0x40021000
 8004b88:	08008e60 	.word	0x08008e60
 8004b8c:	2000001c 	.word	0x2000001c
 8004b90:	20000020 	.word	0x20000020

08004b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x30>
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x36>
 8004bc2:	e027      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bc4:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc6:	613b      	str	r3, [r7, #16]
      break;
 8004bc8:	e027      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	0c9b      	lsrs	r3, r3, #18
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bd4:	5cd3      	ldrb	r3, [r2, r3]
 8004bd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d010      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004be2:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	0c5b      	lsrs	r3, r3, #17
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bf6:	fb03 f202 	mul.w	r2, r3, r2
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e004      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0c      	ldr	r2, [pc, #48]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c08:	fb02 f303 	mul.w	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	613b      	str	r3, [r7, #16]
      break;
 8004c12:	e002      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c16:	613b      	str	r3, [r7, #16]
      break;
 8004c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1a:	693b      	ldr	r3, [r7, #16]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	007a1200 	.word	0x007a1200
 8004c30:	08008e78 	.word	0x08008e78
 8004c34:	08008e88 	.word	0x08008e88
 8004c38:	003d0900 	.word	0x003d0900

08004c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c40:	4b02      	ldr	r3, [pc, #8]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	2000001c 	.word	0x2000001c

08004c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c54:	f7ff fff2 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4903      	ldr	r1, [pc, #12]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40021000 	.word	0x40021000
 8004c74:	08008e70 	.word	0x08008e70

08004c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c7c:	f7ff ffde 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	0adb      	lsrs	r3, r3, #11
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	4903      	ldr	r1, [pc, #12]	; (8004c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	08008e70 	.word	0x08008e70

08004ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <RCC_Delay+0x34>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <RCC_Delay+0x38>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	0a5b      	lsrs	r3, r3, #9
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cbc:	bf00      	nop
  }
  while (Delay --);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1e5a      	subs	r2, r3, #1
 8004cc2:	60fa      	str	r2, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f9      	bne.n	8004cbc <RCC_Delay+0x1c>
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	2000001c 	.word	0x2000001c
 8004cd8:	10624dd3 	.word	0x10624dd3

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e041      	b.n	8004d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fe f878 	bl	8002df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fa5c 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d001      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e03a      	b.n	8004e0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <HAL_TIM_Base_Start_IT+0x98>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x58>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d009      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x58>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <HAL_TIM_Base_Start_IT+0x9c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x58>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <HAL_TIM_Base_Start_IT+0xa0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d111      	bne.n	8004df8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b06      	cmp	r3, #6
 8004de4:	d010      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0201 	orr.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df6:	e007      	b.n	8004e08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800

08004e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d020      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0202 	mvn.w	r2, #2
 8004e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f998 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f98b 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f99a 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d020      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01b      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0204 	mvn.w	r2, #4
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f972 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f965 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f974 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d020      	beq.n	8004f1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0208 	mvn.w	r2, #8
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f94c 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f93f 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f94e 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d020      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01b      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0210 	mvn.w	r2, #16
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f926 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f919 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f928 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0201 	mvn.w	r2, #1
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc f99a 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa7f 	bl	80054ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f8f8 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0220 	mvn.w	r2, #32
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa52 	bl	800549c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIM_ConfigClockSource+0x1c>
 8005018:	2302      	movs	r3, #2
 800501a:	e0b4      	b.n	8005186 <HAL_TIM_ConfigClockSource+0x186>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800503a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	d03e      	beq.n	80050d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	f200 8087 	bhi.w	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	f000 8086 	beq.w	8005172 <HAL_TIM_ConfigClockSource+0x172>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506a:	d87f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b70      	cmp	r3, #112	; 0x70
 800506e:	d01a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005070:	2b70      	cmp	r3, #112	; 0x70
 8005072:	d87b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b60      	cmp	r3, #96	; 0x60
 8005076:	d050      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x11a>
 8005078:	2b60      	cmp	r3, #96	; 0x60
 800507a:	d877      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b50      	cmp	r3, #80	; 0x50
 800507e:	d03c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xfa>
 8005080:	2b50      	cmp	r3, #80	; 0x50
 8005082:	d873      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d058      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x13a>
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d86f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b30      	cmp	r3, #48	; 0x30
 800508e:	d064      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b30      	cmp	r3, #48	; 0x30
 8005092:	d86b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d060      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d867      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d05a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	e062      	b.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b6:	f000 f974 	bl	80053a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	609a      	str	r2, [r3, #8]
      break;
 80050d2:	e04f      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	f000 f95d 	bl	80053a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f6:	609a      	str	r2, [r3, #8]
      break;
 80050f8:	e03c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	461a      	mov	r2, r3
 8005108:	f000 f8d4 	bl	80052b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2150      	movs	r1, #80	; 0x50
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f92b 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8005118:	e02c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005126:	461a      	mov	r2, r3
 8005128:	f000 f8f2 	bl	8005310 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2160      	movs	r1, #96	; 0x60
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f91b 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8005138:	e01c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	461a      	mov	r2, r3
 8005148:	f000 f8b4 	bl	80052b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2140      	movs	r1, #64	; 0x40
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f90b 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8005158:	e00c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 f902 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 800516a:	e003      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e000      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
	...

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <TIM_Base_SetConfig+0xd0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <TIM_Base_SetConfig+0xd4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <TIM_Base_SetConfig+0xd8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <TIM_Base_SetConfig+0xd0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d007      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <TIM_Base_SetConfig+0xd4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <TIM_Base_SetConfig+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <TIM_Base_SetConfig+0xd0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d103      	bne.n	8005280 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	611a      	str	r2, [r3, #16]
  }
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800

080052b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 030a 	bic.w	r3, r3, #10
 80052f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f023 0210 	bic.w	r2, r3, #16
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800533a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	031b      	lsls	r3, r3, #12
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800534c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	f043 0307 	orr.w	r3, r3, #7
 8005390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	609a      	str	r2, [r3, #8]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	021a      	lsls	r2, r3, #8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	609a      	str	r2, [r3, #8]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e046      	b.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d009      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a12      	ldr	r2, [pc, #72]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a10      	ldr	r2, [pc, #64]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d10c      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4313      	orrs	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800

0800549c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e042      	b.n	8005558 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fd fd1a 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2224      	movs	r2, #36	; 0x24
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fac9 	bl	8005a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b20      	cmp	r3, #32
 800557e:	d175      	bne.n	800566c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_UART_Transmit+0x2c>
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e06e      	b.n	800566e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2221      	movs	r2, #33	; 0x21
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559e:	f7fd fdeb 	bl	8003178 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b8:	d108      	bne.n	80055cc <HAL_UART_Transmit+0x6c>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e003      	b.n	80055d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d4:	e02e      	b.n	8005634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f979 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e03a      	b.n	800566e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800560c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	3302      	adds	r3, #2
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	e007      	b.n	8005626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1cb      	bne.n	80055d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	2140      	movs	r1, #64	; 0x40
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f945 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e006      	b.n	800566e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e000      	b.n	800566e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	; 0x30
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	d156      	bne.n	8005740 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_UART_Transmit_DMA+0x26>
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e04f      	b.n	8005742 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	88fa      	ldrh	r2, [r7, #6]
 80056b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2221      	movs	r2, #33	; 0x21
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	4a21      	ldr	r2, [pc, #132]	; (800574c <HAL_UART_Transmit_DMA+0xd4>)
 80056c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	4a20      	ldr	r2, [pc, #128]	; (8005750 <HAL_UART_Transmit_DMA+0xd8>)
 80056d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <HAL_UART_Transmit_DMA+0xdc>)
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	2200      	movs	r2, #0
 80056e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3304      	adds	r3, #4
 80056f6:	461a      	mov	r2, r3
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	f7fd fed3 	bl	80034a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005706:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	617b      	str	r3, [r7, #20]
   return(result);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005728:	627a      	str	r2, [r7, #36]	; 0x24
 800572a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6a39      	ldr	r1, [r7, #32]
 800572e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	61fb      	str	r3, [r7, #28]
   return(result);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	e000      	b.n	8005742 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005740:	2302      	movs	r3, #2
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3730      	adds	r7, #48	; 0x30
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	0800578f 	.word	0x0800578f
 8005750:	08005829 	.word	0x08005829
 8005754:	08005845 	.word	0x08005845

08005758 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b090      	sub	sp, #64	; 0x40
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d137      	bne.n	800581a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	2200      	movs	r2, #0
 80057ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	623b      	str	r3, [r7, #32]
   return(result);
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d0:	633a      	str	r2, [r7, #48]	; 0x30
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005804:	61fa      	str	r2, [r7, #28]
 8005806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	617b      	str	r3, [r7, #20]
   return(result);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005818:	e002      	b.n	8005820 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800581a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800581c:	f7ff ff9c 	bl	8005758 <HAL_UART_TxCpltCallback>
}
 8005820:	bf00      	nop
 8005822:	3740      	adds	r7, #64	; 0x40
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff ff97 	bl	800576a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b21      	cmp	r3, #33	; 0x21
 8005876:	d108      	bne.n	800588a <UART_DMAError+0x46>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2200      	movs	r2, #0
 8005882:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005884:	68b8      	ldr	r0, [r7, #8]
 8005886:	f000 f880 	bl	800598a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b22      	cmp	r3, #34	; 0x22
 80058aa:	d108      	bne.n	80058be <UART_DMAError+0x7a>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058b8:	68b8      	ldr	r0, [r7, #8]
 80058ba:	f000 f88d 	bl	80059d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f043 0210 	orr.w	r2, r3, #16
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f7ff ff56 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e8:	e03b      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d037      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f2:	f7fd fc41 	bl	8003178 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <UART_WaitOnFlagUntilTimeout+0x30>
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e03a      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d023      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d020      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d01d      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b08      	cmp	r3, #8
 8005932:	d116      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f844 	bl	80059d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2208      	movs	r2, #8
 8005954:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e00f      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	429a      	cmp	r2, r3
 800597e:	d0b4      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800598a:	b480      	push	{r7}
 800598c:	b089      	sub	sp, #36	; 0x24
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	330c      	adds	r3, #12
 8005998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	61ba      	str	r2, [r7, #24]
 80059b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	613b      	str	r3, [r7, #16]
   return(result);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e5      	bne.n	8005992 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80059ce:	bf00      	nop
 80059d0:	3724      	adds	r7, #36	; 0x24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b095      	sub	sp, #84	; 0x54
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a00:	643a      	str	r2, [r7, #64]	; 0x40
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d119      	bne.n	8005a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	647b      	str	r3, [r7, #68]	; 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a92:	bf00      	nop
 8005a94:	3754      	adds	r7, #84	; 0x54
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ad6:	f023 030c 	bic.w	r3, r3, #12
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <UART_SetConfig+0x114>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d103      	bne.n	8005b0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b04:	f7ff f8b8 	bl	8004c78 <HAL_RCC_GetPCLK2Freq>
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	e002      	b.n	8005b12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b0c:	f7ff f8a0 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005b10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009a      	lsls	r2, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	0119      	lsls	r1, r3, #4
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009a      	lsls	r2, r3, #2
 8005b3c:	441a      	add	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	2064      	movs	r0, #100	; 0x64
 8005b52:	fb00 f303 	mul.w	r3, r0, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	3332      	adds	r3, #50	; 0x32
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b68:	4419      	add	r1, r3
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009a      	lsls	r2, r3, #2
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b82:	fba3 0302 	umull	r0, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2064      	movs	r0, #100	; 0x64
 8005b8a:	fb00 f303 	mul.w	r3, r0, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	; 0x32
 8005b94:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	51eb851f 	.word	0x51eb851f

08005bb8 <__cvt>:
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbe:	461f      	mov	r7, r3
 8005bc0:	bfbb      	ittet	lt
 8005bc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005bc6:	461f      	movlt	r7, r3
 8005bc8:	2300      	movge	r3, #0
 8005bca:	232d      	movlt	r3, #45	; 0x2d
 8005bcc:	b088      	sub	sp, #32
 8005bce:	4614      	mov	r4, r2
 8005bd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005bd4:	7013      	strb	r3, [r2, #0]
 8005bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005bdc:	f023 0820 	bic.w	r8, r3, #32
 8005be0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005be4:	d005      	beq.n	8005bf2 <__cvt+0x3a>
 8005be6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bea:	d100      	bne.n	8005bee <__cvt+0x36>
 8005bec:	3501      	adds	r5, #1
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e000      	b.n	8005bf4 <__cvt+0x3c>
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	aa07      	add	r2, sp, #28
 8005bf6:	9204      	str	r2, [sp, #16]
 8005bf8:	aa06      	add	r2, sp, #24
 8005bfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bfe:	e9cd 3500 	strd	r3, r5, [sp]
 8005c02:	4622      	mov	r2, r4
 8005c04:	463b      	mov	r3, r7
 8005c06:	f000 ff4f 	bl	8006aa8 <_dtoa_r>
 8005c0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c0e:	4606      	mov	r6, r0
 8005c10:	d102      	bne.n	8005c18 <__cvt+0x60>
 8005c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c14:	07db      	lsls	r3, r3, #31
 8005c16:	d522      	bpl.n	8005c5e <__cvt+0xa6>
 8005c18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c1c:	eb06 0905 	add.w	r9, r6, r5
 8005c20:	d110      	bne.n	8005c44 <__cvt+0x8c>
 8005c22:	7833      	ldrb	r3, [r6, #0]
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d10a      	bne.n	8005c3e <__cvt+0x86>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4639      	mov	r1, r7
 8005c30:	f7fa feba 	bl	80009a8 <__aeabi_dcmpeq>
 8005c34:	b918      	cbnz	r0, 8005c3e <__cvt+0x86>
 8005c36:	f1c5 0501 	rsb	r5, r5, #1
 8005c3a:	f8ca 5000 	str.w	r5, [sl]
 8005c3e:	f8da 3000 	ldr.w	r3, [sl]
 8005c42:	4499      	add	r9, r3
 8005c44:	2200      	movs	r2, #0
 8005c46:	2300      	movs	r3, #0
 8005c48:	4620      	mov	r0, r4
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa feac 	bl	80009a8 <__aeabi_dcmpeq>
 8005c50:	b108      	cbz	r0, 8005c56 <__cvt+0x9e>
 8005c52:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c56:	2230      	movs	r2, #48	; 0x30
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	454b      	cmp	r3, r9
 8005c5c:	d307      	bcc.n	8005c6e <__cvt+0xb6>
 8005c5e:	4630      	mov	r0, r6
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c64:	1b9b      	subs	r3, r3, r6
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	b008      	add	sp, #32
 8005c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	9107      	str	r1, [sp, #28]
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	e7f0      	b.n	8005c58 <__cvt+0xa0>

08005c76 <__exponent>:
 8005c76:	4603      	mov	r3, r0
 8005c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c7a:	2900      	cmp	r1, #0
 8005c7c:	f803 2b02 	strb.w	r2, [r3], #2
 8005c80:	bfb6      	itet	lt
 8005c82:	222d      	movlt	r2, #45	; 0x2d
 8005c84:	222b      	movge	r2, #43	; 0x2b
 8005c86:	4249      	neglt	r1, r1
 8005c88:	2909      	cmp	r1, #9
 8005c8a:	7042      	strb	r2, [r0, #1]
 8005c8c:	dd2a      	ble.n	8005ce4 <__exponent+0x6e>
 8005c8e:	f10d 0207 	add.w	r2, sp, #7
 8005c92:	4617      	mov	r7, r2
 8005c94:	260a      	movs	r6, #10
 8005c96:	fb91 f5f6 	sdiv	r5, r1, r6
 8005c9a:	4694      	mov	ip, r2
 8005c9c:	fb06 1415 	mls	r4, r6, r5, r1
 8005ca0:	3430      	adds	r4, #48	; 0x30
 8005ca2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	2c63      	cmp	r4, #99	; 0x63
 8005caa:	4629      	mov	r1, r5
 8005cac:	f102 32ff 	add.w	r2, r2, #4294967295
 8005cb0:	dcf1      	bgt.n	8005c96 <__exponent+0x20>
 8005cb2:	3130      	adds	r1, #48	; 0x30
 8005cb4:	f1ac 0402 	sub.w	r4, ip, #2
 8005cb8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	1c41      	adds	r1, r0, #1
 8005cc0:	42ba      	cmp	r2, r7
 8005cc2:	d30a      	bcc.n	8005cda <__exponent+0x64>
 8005cc4:	f10d 0209 	add.w	r2, sp, #9
 8005cc8:	eba2 020c 	sub.w	r2, r2, ip
 8005ccc:	42bc      	cmp	r4, r7
 8005cce:	bf88      	it	hi
 8005cd0:	2200      	movhi	r2, #0
 8005cd2:	4413      	add	r3, r2
 8005cd4:	1a18      	subs	r0, r3, r0
 8005cd6:	b003      	add	sp, #12
 8005cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cda:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005cde:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005ce2:	e7ed      	b.n	8005cc0 <__exponent+0x4a>
 8005ce4:	2330      	movs	r3, #48	; 0x30
 8005ce6:	3130      	adds	r1, #48	; 0x30
 8005ce8:	7083      	strb	r3, [r0, #2]
 8005cea:	70c1      	strb	r1, [r0, #3]
 8005cec:	1d03      	adds	r3, r0, #4
 8005cee:	e7f1      	b.n	8005cd4 <__exponent+0x5e>

08005cf0 <_printf_float>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	b091      	sub	sp, #68	; 0x44
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	461f      	mov	r7, r3
 8005d00:	4605      	mov	r5, r0
 8005d02:	f000 fdb5 	bl	8006870 <_localeconv_r>
 8005d06:	6803      	ldr	r3, [r0, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0c:	f7fa fa20 	bl	8000150 <strlen>
 8005d10:	2300      	movs	r3, #0
 8005d12:	930e      	str	r3, [sp, #56]	; 0x38
 8005d14:	f8d8 3000 	ldr.w	r3, [r8]
 8005d18:	900a      	str	r0, [sp, #40]	; 0x28
 8005d1a:	3307      	adds	r3, #7
 8005d1c:	f023 0307 	bic.w	r3, r3, #7
 8005d20:	f103 0208 	add.w	r2, r3, #8
 8005d24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d28:	f8d4 b000 	ldr.w	fp, [r4]
 8005d2c:	f8c8 2000 	str.w	r2, [r8]
 8005d30:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005d34:	4652      	mov	r2, sl
 8005d36:	4643      	mov	r3, r8
 8005d38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d3c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	4650      	mov	r0, sl
 8005d48:	4b9c      	ldr	r3, [pc, #624]	; (8005fbc <_printf_float+0x2cc>)
 8005d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d4c:	f7fa fe5e 	bl	8000a0c <__aeabi_dcmpun>
 8005d50:	bb70      	cbnz	r0, 8005db0 <_printf_float+0xc0>
 8005d52:	f04f 32ff 	mov.w	r2, #4294967295
 8005d56:	4650      	mov	r0, sl
 8005d58:	4b98      	ldr	r3, [pc, #608]	; (8005fbc <_printf_float+0x2cc>)
 8005d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d5c:	f7fa fe38 	bl	80009d0 <__aeabi_dcmple>
 8005d60:	bb30      	cbnz	r0, 8005db0 <_printf_float+0xc0>
 8005d62:	2200      	movs	r2, #0
 8005d64:	2300      	movs	r3, #0
 8005d66:	4650      	mov	r0, sl
 8005d68:	4641      	mov	r1, r8
 8005d6a:	f7fa fe27 	bl	80009bc <__aeabi_dcmplt>
 8005d6e:	b110      	cbz	r0, 8005d76 <_printf_float+0x86>
 8005d70:	232d      	movs	r3, #45	; 0x2d
 8005d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d76:	4a92      	ldr	r2, [pc, #584]	; (8005fc0 <_printf_float+0x2d0>)
 8005d78:	4b92      	ldr	r3, [pc, #584]	; (8005fc4 <_printf_float+0x2d4>)
 8005d7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d7e:	bf94      	ite	ls
 8005d80:	4690      	movls	r8, r2
 8005d82:	4698      	movhi	r8, r3
 8005d84:	2303      	movs	r3, #3
 8005d86:	f04f 0a00 	mov.w	sl, #0
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	f02b 0304 	bic.w	r3, fp, #4
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	4633      	mov	r3, r6
 8005d94:	4621      	mov	r1, r4
 8005d96:	4628      	mov	r0, r5
 8005d98:	9700      	str	r7, [sp, #0]
 8005d9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d9c:	f000 f9d6 	bl	800614c <_printf_common>
 8005da0:	3001      	adds	r0, #1
 8005da2:	f040 8090 	bne.w	8005ec6 <_printf_float+0x1d6>
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295
 8005daa:	b011      	add	sp, #68	; 0x44
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	4652      	mov	r2, sl
 8005db2:	4643      	mov	r3, r8
 8005db4:	4650      	mov	r0, sl
 8005db6:	4641      	mov	r1, r8
 8005db8:	f7fa fe28 	bl	8000a0c <__aeabi_dcmpun>
 8005dbc:	b148      	cbz	r0, 8005dd2 <_printf_float+0xe2>
 8005dbe:	f1b8 0f00 	cmp.w	r8, #0
 8005dc2:	bfb8      	it	lt
 8005dc4:	232d      	movlt	r3, #45	; 0x2d
 8005dc6:	4a80      	ldr	r2, [pc, #512]	; (8005fc8 <_printf_float+0x2d8>)
 8005dc8:	bfb8      	it	lt
 8005dca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dce:	4b7f      	ldr	r3, [pc, #508]	; (8005fcc <_printf_float+0x2dc>)
 8005dd0:	e7d3      	b.n	8005d7a <_printf_float+0x8a>
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	d142      	bne.n	8005e62 <_printf_float+0x172>
 8005ddc:	2306      	movs	r3, #6
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	9206      	str	r2, [sp, #24]
 8005de4:	aa0e      	add	r2, sp, #56	; 0x38
 8005de6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005dea:	aa0d      	add	r2, sp, #52	; 0x34
 8005dec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005df0:	9203      	str	r2, [sp, #12]
 8005df2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005df6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	4652      	mov	r2, sl
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	4628      	mov	r0, r5
 8005e04:	4643      	mov	r3, r8
 8005e06:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e08:	f7ff fed6 	bl	8005bb8 <__cvt>
 8005e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e0e:	4680      	mov	r8, r0
 8005e10:	2947      	cmp	r1, #71	; 0x47
 8005e12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e14:	d108      	bne.n	8005e28 <_printf_float+0x138>
 8005e16:	1cc8      	adds	r0, r1, #3
 8005e18:	db02      	blt.n	8005e20 <_printf_float+0x130>
 8005e1a:	6863      	ldr	r3, [r4, #4]
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	dd40      	ble.n	8005ea2 <_printf_float+0x1b2>
 8005e20:	f1a9 0902 	sub.w	r9, r9, #2
 8005e24:	fa5f f989 	uxtb.w	r9, r9
 8005e28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e2c:	d81f      	bhi.n	8005e6e <_printf_float+0x17e>
 8005e2e:	464a      	mov	r2, r9
 8005e30:	3901      	subs	r1, #1
 8005e32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e36:	910d      	str	r1, [sp, #52]	; 0x34
 8005e38:	f7ff ff1d 	bl	8005c76 <__exponent>
 8005e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e3e:	4682      	mov	sl, r0
 8005e40:	1813      	adds	r3, r2, r0
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	dc02      	bgt.n	8005e4e <_printf_float+0x15e>
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	07d2      	lsls	r2, r2, #31
 8005e4c:	d501      	bpl.n	8005e52 <_printf_float+0x162>
 8005e4e:	3301      	adds	r3, #1
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d09b      	beq.n	8005d92 <_printf_float+0xa2>
 8005e5a:	232d      	movs	r3, #45	; 0x2d
 8005e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e60:	e797      	b.n	8005d92 <_printf_float+0xa2>
 8005e62:	2947      	cmp	r1, #71	; 0x47
 8005e64:	d1bc      	bne.n	8005de0 <_printf_float+0xf0>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1ba      	bne.n	8005de0 <_printf_float+0xf0>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e7b7      	b.n	8005dde <_printf_float+0xee>
 8005e6e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e72:	d118      	bne.n	8005ea6 <_printf_float+0x1b6>
 8005e74:	2900      	cmp	r1, #0
 8005e76:	6863      	ldr	r3, [r4, #4]
 8005e78:	dd0b      	ble.n	8005e92 <_printf_float+0x1a2>
 8005e7a:	6121      	str	r1, [r4, #16]
 8005e7c:	b913      	cbnz	r3, 8005e84 <_printf_float+0x194>
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	07d0      	lsls	r0, r2, #31
 8005e82:	d502      	bpl.n	8005e8a <_printf_float+0x19a>
 8005e84:	3301      	adds	r3, #1
 8005e86:	440b      	add	r3, r1
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	f04f 0a00 	mov.w	sl, #0
 8005e8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e90:	e7df      	b.n	8005e52 <_printf_float+0x162>
 8005e92:	b913      	cbnz	r3, 8005e9a <_printf_float+0x1aa>
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	07d2      	lsls	r2, r2, #31
 8005e98:	d501      	bpl.n	8005e9e <_printf_float+0x1ae>
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	e7f4      	b.n	8005e88 <_printf_float+0x198>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e7f2      	b.n	8005e88 <_printf_float+0x198>
 8005ea2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	db05      	blt.n	8005eb8 <_printf_float+0x1c8>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	6121      	str	r1, [r4, #16]
 8005eb0:	07d8      	lsls	r0, r3, #31
 8005eb2:	d5ea      	bpl.n	8005e8a <_printf_float+0x19a>
 8005eb4:	1c4b      	adds	r3, r1, #1
 8005eb6:	e7e7      	b.n	8005e88 <_printf_float+0x198>
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	bfcc      	ite	gt
 8005ebc:	2201      	movgt	r2, #1
 8005ebe:	f1c1 0202 	rsble	r2, r1, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	e7e0      	b.n	8005e88 <_printf_float+0x198>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	055a      	lsls	r2, r3, #21
 8005eca:	d407      	bmi.n	8005edc <_printf_float+0x1ec>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	4642      	mov	r2, r8
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d12b      	bne.n	8005f32 <_printf_float+0x242>
 8005eda:	e764      	b.n	8005da6 <_printf_float+0xb6>
 8005edc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ee0:	f240 80dd 	bls.w	800609e <_printf_float+0x3ae>
 8005ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2300      	movs	r3, #0
 8005eec:	f7fa fd5c 	bl	80009a8 <__aeabi_dcmpeq>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d033      	beq.n	8005f5c <_printf_float+0x26c>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	4a35      	ldr	r2, [pc, #212]	; (8005fd0 <_printf_float+0x2e0>)
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	f43f af51 	beq.w	8005da6 <_printf_float+0xb6>
 8005f04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	db02      	blt.n	8005f12 <_printf_float+0x222>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07d8      	lsls	r0, r3, #31
 8005f10:	d50f      	bpl.n	8005f32 <_printf_float+0x242>
 8005f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f af42 	beq.w	8005da6 <_printf_float+0xb6>
 8005f22:	f04f 0800 	mov.w	r8, #0
 8005f26:	f104 091a 	add.w	r9, r4, #26
 8005f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	4543      	cmp	r3, r8
 8005f30:	dc09      	bgt.n	8005f46 <_printf_float+0x256>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	079b      	lsls	r3, r3, #30
 8005f36:	f100 8104 	bmi.w	8006142 <_printf_float+0x452>
 8005f3a:	68e0      	ldr	r0, [r4, #12]
 8005f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f3e:	4298      	cmp	r0, r3
 8005f40:	bfb8      	it	lt
 8005f42:	4618      	movlt	r0, r3
 8005f44:	e731      	b.n	8005daa <_printf_float+0xba>
 8005f46:	2301      	movs	r3, #1
 8005f48:	464a      	mov	r2, r9
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f af28 	beq.w	8005da6 <_printf_float+0xb6>
 8005f56:	f108 0801 	add.w	r8, r8, #1
 8005f5a:	e7e6      	b.n	8005f2a <_printf_float+0x23a>
 8005f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dc38      	bgt.n	8005fd4 <_printf_float+0x2e4>
 8005f62:	2301      	movs	r3, #1
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	4a19      	ldr	r2, [pc, #100]	; (8005fd0 <_printf_float+0x2e0>)
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	f43f af1a 	beq.w	8005da6 <_printf_float+0xb6>
 8005f72:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005f76:	4313      	orrs	r3, r2
 8005f78:	d102      	bne.n	8005f80 <_printf_float+0x290>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	07d9      	lsls	r1, r3, #31
 8005f7e:	d5d8      	bpl.n	8005f32 <_printf_float+0x242>
 8005f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f84:	4631      	mov	r1, r6
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f43f af0b 	beq.w	8005da6 <_printf_float+0xb6>
 8005f90:	f04f 0900 	mov.w	r9, #0
 8005f94:	f104 0a1a 	add.w	sl, r4, #26
 8005f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f9a:	425b      	negs	r3, r3
 8005f9c:	454b      	cmp	r3, r9
 8005f9e:	dc01      	bgt.n	8005fa4 <_printf_float+0x2b4>
 8005fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa2:	e794      	b.n	8005ece <_printf_float+0x1de>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4652      	mov	r2, sl
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f aef9 	beq.w	8005da6 <_printf_float+0xb6>
 8005fb4:	f109 0901 	add.w	r9, r9, #1
 8005fb8:	e7ee      	b.n	8005f98 <_printf_float+0x2a8>
 8005fba:	bf00      	nop
 8005fbc:	7fefffff 	.word	0x7fefffff
 8005fc0:	08008e8a 	.word	0x08008e8a
 8005fc4:	08008e8e 	.word	0x08008e8e
 8005fc8:	08008e92 	.word	0x08008e92
 8005fcc:	08008e96 	.word	0x08008e96
 8005fd0:	08008e9a 	.word	0x08008e9a
 8005fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	bfa8      	it	ge
 8005fdc:	461a      	movge	r2, r3
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	4691      	mov	r9, r2
 8005fe2:	dc37      	bgt.n	8006054 <_printf_float+0x364>
 8005fe4:	f04f 0b00 	mov.w	fp, #0
 8005fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fec:	f104 021a 	add.w	r2, r4, #26
 8005ff0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ff4:	ebaa 0309 	sub.w	r3, sl, r9
 8005ff8:	455b      	cmp	r3, fp
 8005ffa:	dc33      	bgt.n	8006064 <_printf_float+0x374>
 8005ffc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006000:	429a      	cmp	r2, r3
 8006002:	db3b      	blt.n	800607c <_printf_float+0x38c>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	07da      	lsls	r2, r3, #31
 8006008:	d438      	bmi.n	800607c <_printf_float+0x38c>
 800600a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800600e:	eba2 0903 	sub.w	r9, r2, r3
 8006012:	eba2 020a 	sub.w	r2, r2, sl
 8006016:	4591      	cmp	r9, r2
 8006018:	bfa8      	it	ge
 800601a:	4691      	movge	r9, r2
 800601c:	f1b9 0f00 	cmp.w	r9, #0
 8006020:	dc34      	bgt.n	800608c <_printf_float+0x39c>
 8006022:	f04f 0800 	mov.w	r8, #0
 8006026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800602a:	f104 0a1a 	add.w	sl, r4, #26
 800602e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	eba3 0309 	sub.w	r3, r3, r9
 8006038:	4543      	cmp	r3, r8
 800603a:	f77f af7a 	ble.w	8005f32 <_printf_float+0x242>
 800603e:	2301      	movs	r3, #1
 8006040:	4652      	mov	r2, sl
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	f43f aeac 	beq.w	8005da6 <_printf_float+0xb6>
 800604e:	f108 0801 	add.w	r8, r8, #1
 8006052:	e7ec      	b.n	800602e <_printf_float+0x33e>
 8006054:	4613      	mov	r3, r2
 8006056:	4631      	mov	r1, r6
 8006058:	4642      	mov	r2, r8
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	d1c0      	bne.n	8005fe4 <_printf_float+0x2f4>
 8006062:	e6a0      	b.n	8005da6 <_printf_float+0xb6>
 8006064:	2301      	movs	r3, #1
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
 800606a:	920b      	str	r2, [sp, #44]	; 0x2c
 800606c:	47b8      	blx	r7
 800606e:	3001      	adds	r0, #1
 8006070:	f43f ae99 	beq.w	8005da6 <_printf_float+0xb6>
 8006074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006076:	f10b 0b01 	add.w	fp, fp, #1
 800607a:	e7b9      	b.n	8005ff0 <_printf_float+0x300>
 800607c:	4631      	mov	r1, r6
 800607e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	d1bf      	bne.n	800600a <_printf_float+0x31a>
 800608a:	e68c      	b.n	8005da6 <_printf_float+0xb6>
 800608c:	464b      	mov	r3, r9
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	eb08 020a 	add.w	r2, r8, sl
 8006096:	47b8      	blx	r7
 8006098:	3001      	adds	r0, #1
 800609a:	d1c2      	bne.n	8006022 <_printf_float+0x332>
 800609c:	e683      	b.n	8005da6 <_printf_float+0xb6>
 800609e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060a0:	2a01      	cmp	r2, #1
 80060a2:	dc01      	bgt.n	80060a8 <_printf_float+0x3b8>
 80060a4:	07db      	lsls	r3, r3, #31
 80060a6:	d539      	bpl.n	800611c <_printf_float+0x42c>
 80060a8:	2301      	movs	r3, #1
 80060aa:	4642      	mov	r2, r8
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f ae77 	beq.w	8005da6 <_printf_float+0xb6>
 80060b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f ae6f 	beq.w	8005da6 <_printf_float+0xb6>
 80060c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80060d4:	f7fa fc68 	bl	80009a8 <__aeabi_dcmpeq>
 80060d8:	b9d8      	cbnz	r0, 8006112 <_printf_float+0x422>
 80060da:	f109 33ff 	add.w	r3, r9, #4294967295
 80060de:	f108 0201 	add.w	r2, r8, #1
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	d10e      	bne.n	800610a <_printf_float+0x41a>
 80060ec:	e65b      	b.n	8005da6 <_printf_float+0xb6>
 80060ee:	2301      	movs	r3, #1
 80060f0:	464a      	mov	r2, r9
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f ae54 	beq.w	8005da6 <_printf_float+0xb6>
 80060fe:	f108 0801 	add.w	r8, r8, #1
 8006102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006104:	3b01      	subs	r3, #1
 8006106:	4543      	cmp	r3, r8
 8006108:	dcf1      	bgt.n	80060ee <_printf_float+0x3fe>
 800610a:	4653      	mov	r3, sl
 800610c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006110:	e6de      	b.n	8005ed0 <_printf_float+0x1e0>
 8006112:	f04f 0800 	mov.w	r8, #0
 8006116:	f104 091a 	add.w	r9, r4, #26
 800611a:	e7f2      	b.n	8006102 <_printf_float+0x412>
 800611c:	2301      	movs	r3, #1
 800611e:	4642      	mov	r2, r8
 8006120:	e7df      	b.n	80060e2 <_printf_float+0x3f2>
 8006122:	2301      	movs	r3, #1
 8006124:	464a      	mov	r2, r9
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f ae3a 	beq.w	8005da6 <_printf_float+0xb6>
 8006132:	f108 0801 	add.w	r8, r8, #1
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800613a:	1a5b      	subs	r3, r3, r1
 800613c:	4543      	cmp	r3, r8
 800613e:	dcf0      	bgt.n	8006122 <_printf_float+0x432>
 8006140:	e6fb      	b.n	8005f3a <_printf_float+0x24a>
 8006142:	f04f 0800 	mov.w	r8, #0
 8006146:	f104 0919 	add.w	r9, r4, #25
 800614a:	e7f4      	b.n	8006136 <_printf_float+0x446>

0800614c <_printf_common>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	4616      	mov	r6, r2
 8006152:	4699      	mov	r9, r3
 8006154:	688a      	ldr	r2, [r1, #8]
 8006156:	690b      	ldr	r3, [r1, #16]
 8006158:	4607      	mov	r7, r0
 800615a:	4293      	cmp	r3, r2
 800615c:	bfb8      	it	lt
 800615e:	4613      	movlt	r3, r2
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006166:	460c      	mov	r4, r1
 8006168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800616c:	b10a      	cbz	r2, 8006172 <_printf_common+0x26>
 800616e:	3301      	adds	r3, #1
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	0699      	lsls	r1, r3, #26
 8006176:	bf42      	ittt	mi
 8006178:	6833      	ldrmi	r3, [r6, #0]
 800617a:	3302      	addmi	r3, #2
 800617c:	6033      	strmi	r3, [r6, #0]
 800617e:	6825      	ldr	r5, [r4, #0]
 8006180:	f015 0506 	ands.w	r5, r5, #6
 8006184:	d106      	bne.n	8006194 <_printf_common+0x48>
 8006186:	f104 0a19 	add.w	sl, r4, #25
 800618a:	68e3      	ldr	r3, [r4, #12]
 800618c:	6832      	ldr	r2, [r6, #0]
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	42ab      	cmp	r3, r5
 8006192:	dc2b      	bgt.n	80061ec <_printf_common+0xa0>
 8006194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006198:	1e13      	subs	r3, r2, #0
 800619a:	6822      	ldr	r2, [r4, #0]
 800619c:	bf18      	it	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	0692      	lsls	r2, r2, #26
 80061a2:	d430      	bmi.n	8006206 <_printf_common+0xba>
 80061a4:	4649      	mov	r1, r9
 80061a6:	4638      	mov	r0, r7
 80061a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ac:	47c0      	blx	r8
 80061ae:	3001      	adds	r0, #1
 80061b0:	d023      	beq.n	80061fa <_printf_common+0xae>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	6922      	ldr	r2, [r4, #16]
 80061b6:	f003 0306 	and.w	r3, r3, #6
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	bf14      	ite	ne
 80061be:	2500      	movne	r5, #0
 80061c0:	6833      	ldreq	r3, [r6, #0]
 80061c2:	f04f 0600 	mov.w	r6, #0
 80061c6:	bf08      	it	eq
 80061c8:	68e5      	ldreq	r5, [r4, #12]
 80061ca:	f104 041a 	add.w	r4, r4, #26
 80061ce:	bf08      	it	eq
 80061d0:	1aed      	subeq	r5, r5, r3
 80061d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80061d6:	bf08      	it	eq
 80061d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061dc:	4293      	cmp	r3, r2
 80061de:	bfc4      	itt	gt
 80061e0:	1a9b      	subgt	r3, r3, r2
 80061e2:	18ed      	addgt	r5, r5, r3
 80061e4:	42b5      	cmp	r5, r6
 80061e6:	d11a      	bne.n	800621e <_printf_common+0xd2>
 80061e8:	2000      	movs	r0, #0
 80061ea:	e008      	b.n	80061fe <_printf_common+0xb2>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4652      	mov	r2, sl
 80061f0:	4649      	mov	r1, r9
 80061f2:	4638      	mov	r0, r7
 80061f4:	47c0      	blx	r8
 80061f6:	3001      	adds	r0, #1
 80061f8:	d103      	bne.n	8006202 <_printf_common+0xb6>
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006202:	3501      	adds	r5, #1
 8006204:	e7c1      	b.n	800618a <_printf_common+0x3e>
 8006206:	2030      	movs	r0, #48	; 0x30
 8006208:	18e1      	adds	r1, r4, r3
 800620a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006214:	4422      	add	r2, r4
 8006216:	3302      	adds	r3, #2
 8006218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800621c:	e7c2      	b.n	80061a4 <_printf_common+0x58>
 800621e:	2301      	movs	r3, #1
 8006220:	4622      	mov	r2, r4
 8006222:	4649      	mov	r1, r9
 8006224:	4638      	mov	r0, r7
 8006226:	47c0      	blx	r8
 8006228:	3001      	adds	r0, #1
 800622a:	d0e6      	beq.n	80061fa <_printf_common+0xae>
 800622c:	3601      	adds	r6, #1
 800622e:	e7d9      	b.n	80061e4 <_printf_common+0x98>

08006230 <_printf_i>:
 8006230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	7e0f      	ldrb	r7, [r1, #24]
 8006236:	4691      	mov	r9, r2
 8006238:	2f78      	cmp	r7, #120	; 0x78
 800623a:	4680      	mov	r8, r0
 800623c:	460c      	mov	r4, r1
 800623e:	469a      	mov	sl, r3
 8006240:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006246:	d807      	bhi.n	8006258 <_printf_i+0x28>
 8006248:	2f62      	cmp	r7, #98	; 0x62
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x32>
 800624c:	2f00      	cmp	r7, #0
 800624e:	f000 80d5 	beq.w	80063fc <_printf_i+0x1cc>
 8006252:	2f58      	cmp	r7, #88	; 0x58
 8006254:	f000 80c1 	beq.w	80063da <_printf_i+0x1aa>
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006260:	e03a      	b.n	80062d8 <_printf_i+0xa8>
 8006262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006266:	2b15      	cmp	r3, #21
 8006268:	d8f6      	bhi.n	8006258 <_printf_i+0x28>
 800626a:	a101      	add	r1, pc, #4	; (adr r1, 8006270 <_printf_i+0x40>)
 800626c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062dd 	.word	0x080062dd
 8006278:	08006259 	.word	0x08006259
 800627c:	08006259 	.word	0x08006259
 8006280:	08006259 	.word	0x08006259
 8006284:	08006259 	.word	0x08006259
 8006288:	080062dd 	.word	0x080062dd
 800628c:	08006259 	.word	0x08006259
 8006290:	08006259 	.word	0x08006259
 8006294:	08006259 	.word	0x08006259
 8006298:	08006259 	.word	0x08006259
 800629c:	080063e3 	.word	0x080063e3
 80062a0:	08006309 	.word	0x08006309
 80062a4:	0800639d 	.word	0x0800639d
 80062a8:	08006259 	.word	0x08006259
 80062ac:	08006259 	.word	0x08006259
 80062b0:	08006405 	.word	0x08006405
 80062b4:	08006259 	.word	0x08006259
 80062b8:	08006309 	.word	0x08006309
 80062bc:	08006259 	.word	0x08006259
 80062c0:	08006259 	.word	0x08006259
 80062c4:	080063a5 	.word	0x080063a5
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	602a      	str	r2, [r5, #0]
 80062d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062d8:	2301      	movs	r3, #1
 80062da:	e0a0      	b.n	800641e <_printf_i+0x1ee>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	0607      	lsls	r7, r0, #24
 80062e2:	f103 0104 	add.w	r1, r3, #4
 80062e6:	6029      	str	r1, [r5, #0]
 80062e8:	d501      	bpl.n	80062ee <_printf_i+0xbe>
 80062ea:	681e      	ldr	r6, [r3, #0]
 80062ec:	e003      	b.n	80062f6 <_printf_i+0xc6>
 80062ee:	0646      	lsls	r6, r0, #25
 80062f0:	d5fb      	bpl.n	80062ea <_printf_i+0xba>
 80062f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	da03      	bge.n	8006302 <_printf_i+0xd2>
 80062fa:	232d      	movs	r3, #45	; 0x2d
 80062fc:	4276      	negs	r6, r6
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006302:	230a      	movs	r3, #10
 8006304:	4859      	ldr	r0, [pc, #356]	; (800646c <_printf_i+0x23c>)
 8006306:	e012      	b.n	800632e <_printf_i+0xfe>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	1d19      	adds	r1, r3, #4
 800630e:	6029      	str	r1, [r5, #0]
 8006310:	0605      	lsls	r5, r0, #24
 8006312:	d501      	bpl.n	8006318 <_printf_i+0xe8>
 8006314:	681e      	ldr	r6, [r3, #0]
 8006316:	e002      	b.n	800631e <_printf_i+0xee>
 8006318:	0641      	lsls	r1, r0, #25
 800631a:	d5fb      	bpl.n	8006314 <_printf_i+0xe4>
 800631c:	881e      	ldrh	r6, [r3, #0]
 800631e:	2f6f      	cmp	r7, #111	; 0x6f
 8006320:	bf0c      	ite	eq
 8006322:	2308      	moveq	r3, #8
 8006324:	230a      	movne	r3, #10
 8006326:	4851      	ldr	r0, [pc, #324]	; (800646c <_printf_i+0x23c>)
 8006328:	2100      	movs	r1, #0
 800632a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800632e:	6865      	ldr	r5, [r4, #4]
 8006330:	2d00      	cmp	r5, #0
 8006332:	bfa8      	it	ge
 8006334:	6821      	ldrge	r1, [r4, #0]
 8006336:	60a5      	str	r5, [r4, #8]
 8006338:	bfa4      	itt	ge
 800633a:	f021 0104 	bicge.w	r1, r1, #4
 800633e:	6021      	strge	r1, [r4, #0]
 8006340:	b90e      	cbnz	r6, 8006346 <_printf_i+0x116>
 8006342:	2d00      	cmp	r5, #0
 8006344:	d04b      	beq.n	80063de <_printf_i+0x1ae>
 8006346:	4615      	mov	r5, r2
 8006348:	fbb6 f1f3 	udiv	r1, r6, r3
 800634c:	fb03 6711 	mls	r7, r3, r1, r6
 8006350:	5dc7      	ldrb	r7, [r0, r7]
 8006352:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006356:	4637      	mov	r7, r6
 8006358:	42bb      	cmp	r3, r7
 800635a:	460e      	mov	r6, r1
 800635c:	d9f4      	bls.n	8006348 <_printf_i+0x118>
 800635e:	2b08      	cmp	r3, #8
 8006360:	d10b      	bne.n	800637a <_printf_i+0x14a>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	07de      	lsls	r6, r3, #31
 8006366:	d508      	bpl.n	800637a <_printf_i+0x14a>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	6861      	ldr	r1, [r4, #4]
 800636c:	4299      	cmp	r1, r3
 800636e:	bfde      	ittt	le
 8006370:	2330      	movle	r3, #48	; 0x30
 8006372:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006376:	f105 35ff 	addle.w	r5, r5, #4294967295
 800637a:	1b52      	subs	r2, r2, r5
 800637c:	6122      	str	r2, [r4, #16]
 800637e:	464b      	mov	r3, r9
 8006380:	4621      	mov	r1, r4
 8006382:	4640      	mov	r0, r8
 8006384:	f8cd a000 	str.w	sl, [sp]
 8006388:	aa03      	add	r2, sp, #12
 800638a:	f7ff fedf 	bl	800614c <_printf_common>
 800638e:	3001      	adds	r0, #1
 8006390:	d14a      	bne.n	8006428 <_printf_i+0x1f8>
 8006392:	f04f 30ff 	mov.w	r0, #4294967295
 8006396:	b004      	add	sp, #16
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	f043 0320 	orr.w	r3, r3, #32
 80063a2:	6023      	str	r3, [r4, #0]
 80063a4:	2778      	movs	r7, #120	; 0x78
 80063a6:	4832      	ldr	r0, [pc, #200]	; (8006470 <_printf_i+0x240>)
 80063a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	6829      	ldr	r1, [r5, #0]
 80063b0:	061f      	lsls	r7, r3, #24
 80063b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80063b6:	d402      	bmi.n	80063be <_printf_i+0x18e>
 80063b8:	065f      	lsls	r7, r3, #25
 80063ba:	bf48      	it	mi
 80063bc:	b2b6      	uxthmi	r6, r6
 80063be:	07df      	lsls	r7, r3, #31
 80063c0:	bf48      	it	mi
 80063c2:	f043 0320 	orrmi.w	r3, r3, #32
 80063c6:	6029      	str	r1, [r5, #0]
 80063c8:	bf48      	it	mi
 80063ca:	6023      	strmi	r3, [r4, #0]
 80063cc:	b91e      	cbnz	r6, 80063d6 <_printf_i+0x1a6>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	f023 0320 	bic.w	r3, r3, #32
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	2310      	movs	r3, #16
 80063d8:	e7a6      	b.n	8006328 <_printf_i+0xf8>
 80063da:	4824      	ldr	r0, [pc, #144]	; (800646c <_printf_i+0x23c>)
 80063dc:	e7e4      	b.n	80063a8 <_printf_i+0x178>
 80063de:	4615      	mov	r5, r2
 80063e0:	e7bd      	b.n	800635e <_printf_i+0x12e>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	6826      	ldr	r6, [r4, #0]
 80063e6:	1d18      	adds	r0, r3, #4
 80063e8:	6961      	ldr	r1, [r4, #20]
 80063ea:	6028      	str	r0, [r5, #0]
 80063ec:	0635      	lsls	r5, r6, #24
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	d501      	bpl.n	80063f6 <_printf_i+0x1c6>
 80063f2:	6019      	str	r1, [r3, #0]
 80063f4:	e002      	b.n	80063fc <_printf_i+0x1cc>
 80063f6:	0670      	lsls	r0, r6, #25
 80063f8:	d5fb      	bpl.n	80063f2 <_printf_i+0x1c2>
 80063fa:	8019      	strh	r1, [r3, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	4615      	mov	r5, r2
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	e7bc      	b.n	800637e <_printf_i+0x14e>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	2100      	movs	r1, #0
 8006408:	1d1a      	adds	r2, r3, #4
 800640a:	602a      	str	r2, [r5, #0]
 800640c:	681d      	ldr	r5, [r3, #0]
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	4628      	mov	r0, r5
 8006412:	f000 faa4 	bl	800695e <memchr>
 8006416:	b108      	cbz	r0, 800641c <_printf_i+0x1ec>
 8006418:	1b40      	subs	r0, r0, r5
 800641a:	6060      	str	r0, [r4, #4]
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	2300      	movs	r3, #0
 8006422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006426:	e7aa      	b.n	800637e <_printf_i+0x14e>
 8006428:	462a      	mov	r2, r5
 800642a:	4649      	mov	r1, r9
 800642c:	4640      	mov	r0, r8
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	47d0      	blx	sl
 8006432:	3001      	adds	r0, #1
 8006434:	d0ad      	beq.n	8006392 <_printf_i+0x162>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	079b      	lsls	r3, r3, #30
 800643a:	d413      	bmi.n	8006464 <_printf_i+0x234>
 800643c:	68e0      	ldr	r0, [r4, #12]
 800643e:	9b03      	ldr	r3, [sp, #12]
 8006440:	4298      	cmp	r0, r3
 8006442:	bfb8      	it	lt
 8006444:	4618      	movlt	r0, r3
 8006446:	e7a6      	b.n	8006396 <_printf_i+0x166>
 8006448:	2301      	movs	r3, #1
 800644a:	4632      	mov	r2, r6
 800644c:	4649      	mov	r1, r9
 800644e:	4640      	mov	r0, r8
 8006450:	47d0      	blx	sl
 8006452:	3001      	adds	r0, #1
 8006454:	d09d      	beq.n	8006392 <_printf_i+0x162>
 8006456:	3501      	adds	r5, #1
 8006458:	68e3      	ldr	r3, [r4, #12]
 800645a:	9903      	ldr	r1, [sp, #12]
 800645c:	1a5b      	subs	r3, r3, r1
 800645e:	42ab      	cmp	r3, r5
 8006460:	dcf2      	bgt.n	8006448 <_printf_i+0x218>
 8006462:	e7eb      	b.n	800643c <_printf_i+0x20c>
 8006464:	2500      	movs	r5, #0
 8006466:	f104 0619 	add.w	r6, r4, #25
 800646a:	e7f5      	b.n	8006458 <_printf_i+0x228>
 800646c:	08008e9c 	.word	0x08008e9c
 8006470:	08008ead 	.word	0x08008ead

08006474 <std>:
 8006474:	2300      	movs	r3, #0
 8006476:	b510      	push	{r4, lr}
 8006478:	4604      	mov	r4, r0
 800647a:	e9c0 3300 	strd	r3, r3, [r0]
 800647e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006482:	6083      	str	r3, [r0, #8]
 8006484:	8181      	strh	r1, [r0, #12]
 8006486:	6643      	str	r3, [r0, #100]	; 0x64
 8006488:	81c2      	strh	r2, [r0, #14]
 800648a:	6183      	str	r3, [r0, #24]
 800648c:	4619      	mov	r1, r3
 800648e:	2208      	movs	r2, #8
 8006490:	305c      	adds	r0, #92	; 0x5c
 8006492:	f000 f9e5 	bl	8006860 <memset>
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <std+0x58>)
 8006498:	6224      	str	r4, [r4, #32]
 800649a:	6263      	str	r3, [r4, #36]	; 0x24
 800649c:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <std+0x5c>)
 800649e:	62a3      	str	r3, [r4, #40]	; 0x28
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <std+0x60>)
 80064a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <std+0x64>)
 80064a6:	6323      	str	r3, [r4, #48]	; 0x30
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <std+0x68>)
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d006      	beq.n	80064bc <std+0x48>
 80064ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064b2:	4294      	cmp	r4, r2
 80064b4:	d002      	beq.n	80064bc <std+0x48>
 80064b6:	33d0      	adds	r3, #208	; 0xd0
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d105      	bne.n	80064c8 <std+0x54>
 80064bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c4:	f000 ba48 	b.w	8006958 <__retarget_lock_init_recursive>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	bf00      	nop
 80064cc:	080066b1 	.word	0x080066b1
 80064d0:	080066d3 	.word	0x080066d3
 80064d4:	0800670b 	.word	0x0800670b
 80064d8:	0800672f 	.word	0x0800672f
 80064dc:	200007c0 	.word	0x200007c0

080064e0 <stdio_exit_handler>:
 80064e0:	4a02      	ldr	r2, [pc, #8]	; (80064ec <stdio_exit_handler+0xc>)
 80064e2:	4903      	ldr	r1, [pc, #12]	; (80064f0 <stdio_exit_handler+0x10>)
 80064e4:	4803      	ldr	r0, [pc, #12]	; (80064f4 <stdio_exit_handler+0x14>)
 80064e6:	f000 b869 	b.w	80065bc <_fwalk_sglue>
 80064ea:	bf00      	nop
 80064ec:	20000028 	.word	0x20000028
 80064f0:	0800805d 	.word	0x0800805d
 80064f4:	20000034 	.word	0x20000034

080064f8 <cleanup_stdio>:
 80064f8:	6841      	ldr	r1, [r0, #4]
 80064fa:	4b0c      	ldr	r3, [pc, #48]	; (800652c <cleanup_stdio+0x34>)
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4299      	cmp	r1, r3
 8006500:	4604      	mov	r4, r0
 8006502:	d001      	beq.n	8006508 <cleanup_stdio+0x10>
 8006504:	f001 fdaa 	bl	800805c <_fflush_r>
 8006508:	68a1      	ldr	r1, [r4, #8]
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <cleanup_stdio+0x38>)
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <cleanup_stdio+0x1e>
 8006510:	4620      	mov	r0, r4
 8006512:	f001 fda3 	bl	800805c <_fflush_r>
 8006516:	68e1      	ldr	r1, [r4, #12]
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <cleanup_stdio+0x3c>)
 800651a:	4299      	cmp	r1, r3
 800651c:	d004      	beq.n	8006528 <cleanup_stdio+0x30>
 800651e:	4620      	mov	r0, r4
 8006520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006524:	f001 bd9a 	b.w	800805c <_fflush_r>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	bf00      	nop
 800652c:	200007c0 	.word	0x200007c0
 8006530:	20000828 	.word	0x20000828
 8006534:	20000890 	.word	0x20000890

08006538 <global_stdio_init.part.0>:
 8006538:	b510      	push	{r4, lr}
 800653a:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <global_stdio_init.part.0+0x30>)
 800653c:	4c0b      	ldr	r4, [pc, #44]	; (800656c <global_stdio_init.part.0+0x34>)
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <global_stdio_init.part.0+0x38>)
 8006540:	4620      	mov	r0, r4
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	2104      	movs	r1, #4
 8006546:	2200      	movs	r2, #0
 8006548:	f7ff ff94 	bl	8006474 <std>
 800654c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006550:	2201      	movs	r2, #1
 8006552:	2109      	movs	r1, #9
 8006554:	f7ff ff8e 	bl	8006474 <std>
 8006558:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800655c:	2202      	movs	r2, #2
 800655e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006562:	2112      	movs	r1, #18
 8006564:	f7ff bf86 	b.w	8006474 <std>
 8006568:	200008f8 	.word	0x200008f8
 800656c:	200007c0 	.word	0x200007c0
 8006570:	080064e1 	.word	0x080064e1

08006574 <__sfp_lock_acquire>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__sfp_lock_acquire+0x8>)
 8006576:	f000 b9f0 	b.w	800695a <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	20000901 	.word	0x20000901

08006580 <__sfp_lock_release>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__sfp_lock_release+0x8>)
 8006582:	f000 b9eb 	b.w	800695c <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	20000901 	.word	0x20000901

0800658c <__sinit>:
 800658c:	b510      	push	{r4, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	f7ff fff0 	bl	8006574 <__sfp_lock_acquire>
 8006594:	6a23      	ldr	r3, [r4, #32]
 8006596:	b11b      	cbz	r3, 80065a0 <__sinit+0x14>
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f7ff bff0 	b.w	8006580 <__sfp_lock_release>
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <__sinit+0x28>)
 80065a2:	6223      	str	r3, [r4, #32]
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <__sinit+0x2c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f5      	bne.n	8006598 <__sinit+0xc>
 80065ac:	f7ff ffc4 	bl	8006538 <global_stdio_init.part.0>
 80065b0:	e7f2      	b.n	8006598 <__sinit+0xc>
 80065b2:	bf00      	nop
 80065b4:	080064f9 	.word	0x080064f9
 80065b8:	200008f8 	.word	0x200008f8

080065bc <_fwalk_sglue>:
 80065bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	4607      	mov	r7, r0
 80065c2:	4688      	mov	r8, r1
 80065c4:	4614      	mov	r4, r2
 80065c6:	2600      	movs	r6, #0
 80065c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065cc:	f1b9 0901 	subs.w	r9, r9, #1
 80065d0:	d505      	bpl.n	80065de <_fwalk_sglue+0x22>
 80065d2:	6824      	ldr	r4, [r4, #0]
 80065d4:	2c00      	cmp	r4, #0
 80065d6:	d1f7      	bne.n	80065c8 <_fwalk_sglue+0xc>
 80065d8:	4630      	mov	r0, r6
 80065da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d907      	bls.n	80065f4 <_fwalk_sglue+0x38>
 80065e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065e8:	3301      	adds	r3, #1
 80065ea:	d003      	beq.n	80065f4 <_fwalk_sglue+0x38>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c0      	blx	r8
 80065f2:	4306      	orrs	r6, r0
 80065f4:	3568      	adds	r5, #104	; 0x68
 80065f6:	e7e9      	b.n	80065cc <_fwalk_sglue+0x10>

080065f8 <_puts_r>:
 80065f8:	6a03      	ldr	r3, [r0, #32]
 80065fa:	b570      	push	{r4, r5, r6, lr}
 80065fc:	4605      	mov	r5, r0
 80065fe:	460e      	mov	r6, r1
 8006600:	6884      	ldr	r4, [r0, #8]
 8006602:	b90b      	cbnz	r3, 8006608 <_puts_r+0x10>
 8006604:	f7ff ffc2 	bl	800658c <__sinit>
 8006608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800660a:	07db      	lsls	r3, r3, #31
 800660c:	d405      	bmi.n	800661a <_puts_r+0x22>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	0598      	lsls	r0, r3, #22
 8006612:	d402      	bmi.n	800661a <_puts_r+0x22>
 8006614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006616:	f000 f9a0 	bl	800695a <__retarget_lock_acquire_recursive>
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	0719      	lsls	r1, r3, #28
 800661e:	d513      	bpl.n	8006648 <_puts_r+0x50>
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	b18b      	cbz	r3, 8006648 <_puts_r+0x50>
 8006624:	3e01      	subs	r6, #1
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800662c:	3b01      	subs	r3, #1
 800662e:	60a3      	str	r3, [r4, #8]
 8006630:	b9e9      	cbnz	r1, 800666e <_puts_r+0x76>
 8006632:	2b00      	cmp	r3, #0
 8006634:	da2e      	bge.n	8006694 <_puts_r+0x9c>
 8006636:	4622      	mov	r2, r4
 8006638:	210a      	movs	r1, #10
 800663a:	4628      	mov	r0, r5
 800663c:	f000 f87b 	bl	8006736 <__swbuf_r>
 8006640:	3001      	adds	r0, #1
 8006642:	d007      	beq.n	8006654 <_puts_r+0x5c>
 8006644:	250a      	movs	r5, #10
 8006646:	e007      	b.n	8006658 <_puts_r+0x60>
 8006648:	4621      	mov	r1, r4
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f8b0 	bl	80067b0 <__swsetup_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	d0e7      	beq.n	8006624 <_puts_r+0x2c>
 8006654:	f04f 35ff 	mov.w	r5, #4294967295
 8006658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800665a:	07da      	lsls	r2, r3, #31
 800665c:	d405      	bmi.n	800666a <_puts_r+0x72>
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	059b      	lsls	r3, r3, #22
 8006662:	d402      	bmi.n	800666a <_puts_r+0x72>
 8006664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006666:	f000 f979 	bl	800695c <__retarget_lock_release_recursive>
 800666a:	4628      	mov	r0, r5
 800666c:	bd70      	pop	{r4, r5, r6, pc}
 800666e:	2b00      	cmp	r3, #0
 8006670:	da04      	bge.n	800667c <_puts_r+0x84>
 8006672:	69a2      	ldr	r2, [r4, #24]
 8006674:	429a      	cmp	r2, r3
 8006676:	dc06      	bgt.n	8006686 <_puts_r+0x8e>
 8006678:	290a      	cmp	r1, #10
 800667a:	d004      	beq.n	8006686 <_puts_r+0x8e>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	6022      	str	r2, [r4, #0]
 8006682:	7019      	strb	r1, [r3, #0]
 8006684:	e7cf      	b.n	8006626 <_puts_r+0x2e>
 8006686:	4622      	mov	r2, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f854 	bl	8006736 <__swbuf_r>
 800668e:	3001      	adds	r0, #1
 8006690:	d1c9      	bne.n	8006626 <_puts_r+0x2e>
 8006692:	e7df      	b.n	8006654 <_puts_r+0x5c>
 8006694:	250a      	movs	r5, #10
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	701d      	strb	r5, [r3, #0]
 800669e:	e7db      	b.n	8006658 <_puts_r+0x60>

080066a0 <puts>:
 80066a0:	4b02      	ldr	r3, [pc, #8]	; (80066ac <puts+0xc>)
 80066a2:	4601      	mov	r1, r0
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f7ff bfa7 	b.w	80065f8 <_puts_r>
 80066aa:	bf00      	nop
 80066ac:	20000080 	.word	0x20000080

080066b0 <__sread>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	460c      	mov	r4, r1
 80066b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b8:	f000 f900 	bl	80068bc <_read_r>
 80066bc:	2800      	cmp	r0, #0
 80066be:	bfab      	itete	ge
 80066c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066c2:	89a3      	ldrhlt	r3, [r4, #12]
 80066c4:	181b      	addge	r3, r3, r0
 80066c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066ca:	bfac      	ite	ge
 80066cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ce:	81a3      	strhlt	r3, [r4, #12]
 80066d0:	bd10      	pop	{r4, pc}

080066d2 <__swrite>:
 80066d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d6:	461f      	mov	r7, r3
 80066d8:	898b      	ldrh	r3, [r1, #12]
 80066da:	4605      	mov	r5, r0
 80066dc:	05db      	lsls	r3, r3, #23
 80066de:	460c      	mov	r4, r1
 80066e0:	4616      	mov	r6, r2
 80066e2:	d505      	bpl.n	80066f0 <__swrite+0x1e>
 80066e4:	2302      	movs	r3, #2
 80066e6:	2200      	movs	r2, #0
 80066e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ec:	f000 f8d4 	bl	8006898 <_lseek_r>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	4632      	mov	r2, r6
 80066f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066f8:	81a3      	strh	r3, [r4, #12]
 80066fa:	4628      	mov	r0, r5
 80066fc:	463b      	mov	r3, r7
 80066fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006706:	f000 b8eb 	b.w	80068e0 <_write_r>

0800670a <__sseek>:
 800670a:	b510      	push	{r4, lr}
 800670c:	460c      	mov	r4, r1
 800670e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006712:	f000 f8c1 	bl	8006898 <_lseek_r>
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	bf15      	itete	ne
 800671c:	6560      	strne	r0, [r4, #84]	; 0x54
 800671e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006726:	81a3      	strheq	r3, [r4, #12]
 8006728:	bf18      	it	ne
 800672a:	81a3      	strhne	r3, [r4, #12]
 800672c:	bd10      	pop	{r4, pc}

0800672e <__sclose>:
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 b8a1 	b.w	8006878 <_close_r>

08006736 <__swbuf_r>:
 8006736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006738:	460e      	mov	r6, r1
 800673a:	4614      	mov	r4, r2
 800673c:	4605      	mov	r5, r0
 800673e:	b118      	cbz	r0, 8006748 <__swbuf_r+0x12>
 8006740:	6a03      	ldr	r3, [r0, #32]
 8006742:	b90b      	cbnz	r3, 8006748 <__swbuf_r+0x12>
 8006744:	f7ff ff22 	bl	800658c <__sinit>
 8006748:	69a3      	ldr	r3, [r4, #24]
 800674a:	60a3      	str	r3, [r4, #8]
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	071a      	lsls	r2, r3, #28
 8006750:	d525      	bpl.n	800679e <__swbuf_r+0x68>
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	b31b      	cbz	r3, 800679e <__swbuf_r+0x68>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	b2f6      	uxtb	r6, r6
 800675c:	1a98      	subs	r0, r3, r2
 800675e:	6963      	ldr	r3, [r4, #20]
 8006760:	4637      	mov	r7, r6
 8006762:	4283      	cmp	r3, r0
 8006764:	dc04      	bgt.n	8006770 <__swbuf_r+0x3a>
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f001 fc77 	bl	800805c <_fflush_r>
 800676e:	b9e0      	cbnz	r0, 80067aa <__swbuf_r+0x74>
 8006770:	68a3      	ldr	r3, [r4, #8]
 8006772:	3b01      	subs	r3, #1
 8006774:	60a3      	str	r3, [r4, #8]
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	701e      	strb	r6, [r3, #0]
 800677e:	6962      	ldr	r2, [r4, #20]
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	429a      	cmp	r2, r3
 8006784:	d004      	beq.n	8006790 <__swbuf_r+0x5a>
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	07db      	lsls	r3, r3, #31
 800678a:	d506      	bpl.n	800679a <__swbuf_r+0x64>
 800678c:	2e0a      	cmp	r6, #10
 800678e:	d104      	bne.n	800679a <__swbuf_r+0x64>
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f001 fc62 	bl	800805c <_fflush_r>
 8006798:	b938      	cbnz	r0, 80067aa <__swbuf_r+0x74>
 800679a:	4638      	mov	r0, r7
 800679c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800679e:	4621      	mov	r1, r4
 80067a0:	4628      	mov	r0, r5
 80067a2:	f000 f805 	bl	80067b0 <__swsetup_r>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d0d5      	beq.n	8006756 <__swbuf_r+0x20>
 80067aa:	f04f 37ff 	mov.w	r7, #4294967295
 80067ae:	e7f4      	b.n	800679a <__swbuf_r+0x64>

080067b0 <__swsetup_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4b2a      	ldr	r3, [pc, #168]	; (800685c <__swsetup_r+0xac>)
 80067b4:	4605      	mov	r5, r0
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	460c      	mov	r4, r1
 80067ba:	b118      	cbz	r0, 80067c4 <__swsetup_r+0x14>
 80067bc:	6a03      	ldr	r3, [r0, #32]
 80067be:	b90b      	cbnz	r3, 80067c4 <__swsetup_r+0x14>
 80067c0:	f7ff fee4 	bl	800658c <__sinit>
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ca:	0718      	lsls	r0, r3, #28
 80067cc:	d422      	bmi.n	8006814 <__swsetup_r+0x64>
 80067ce:	06d9      	lsls	r1, r3, #27
 80067d0:	d407      	bmi.n	80067e2 <__swsetup_r+0x32>
 80067d2:	2309      	movs	r3, #9
 80067d4:	602b      	str	r3, [r5, #0]
 80067d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	e034      	b.n	800684c <__swsetup_r+0x9c>
 80067e2:	0758      	lsls	r0, r3, #29
 80067e4:	d512      	bpl.n	800680c <__swsetup_r+0x5c>
 80067e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067e8:	b141      	cbz	r1, 80067fc <__swsetup_r+0x4c>
 80067ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067ee:	4299      	cmp	r1, r3
 80067f0:	d002      	beq.n	80067f8 <__swsetup_r+0x48>
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 ff3c 	bl	8007670 <_free_r>
 80067f8:	2300      	movs	r3, #0
 80067fa:	6363      	str	r3, [r4, #52]	; 0x34
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	2300      	movs	r3, #0
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f043 0308 	orr.w	r3, r3, #8
 8006812:	81a3      	strh	r3, [r4, #12]
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	b94b      	cbnz	r3, 800682c <__swsetup_r+0x7c>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800681e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006822:	d003      	beq.n	800682c <__swsetup_r+0x7c>
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f001 fc65 	bl	80080f6 <__smakebuf_r>
 800682c:	89a0      	ldrh	r0, [r4, #12]
 800682e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006832:	f010 0301 	ands.w	r3, r0, #1
 8006836:	d00a      	beq.n	800684e <__swsetup_r+0x9e>
 8006838:	2300      	movs	r3, #0
 800683a:	60a3      	str	r3, [r4, #8]
 800683c:	6963      	ldr	r3, [r4, #20]
 800683e:	425b      	negs	r3, r3
 8006840:	61a3      	str	r3, [r4, #24]
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	b943      	cbnz	r3, 8006858 <__swsetup_r+0xa8>
 8006846:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800684a:	d1c4      	bne.n	80067d6 <__swsetup_r+0x26>
 800684c:	bd38      	pop	{r3, r4, r5, pc}
 800684e:	0781      	lsls	r1, r0, #30
 8006850:	bf58      	it	pl
 8006852:	6963      	ldrpl	r3, [r4, #20]
 8006854:	60a3      	str	r3, [r4, #8]
 8006856:	e7f4      	b.n	8006842 <__swsetup_r+0x92>
 8006858:	2000      	movs	r0, #0
 800685a:	e7f7      	b.n	800684c <__swsetup_r+0x9c>
 800685c:	20000080 	.word	0x20000080

08006860 <memset>:
 8006860:	4603      	mov	r3, r0
 8006862:	4402      	add	r2, r0
 8006864:	4293      	cmp	r3, r2
 8006866:	d100      	bne.n	800686a <memset+0xa>
 8006868:	4770      	bx	lr
 800686a:	f803 1b01 	strb.w	r1, [r3], #1
 800686e:	e7f9      	b.n	8006864 <memset+0x4>

08006870 <_localeconv_r>:
 8006870:	4800      	ldr	r0, [pc, #0]	; (8006874 <_localeconv_r+0x4>)
 8006872:	4770      	bx	lr
 8006874:	20000174 	.word	0x20000174

08006878 <_close_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	2300      	movs	r3, #0
 800687c:	4d05      	ldr	r5, [pc, #20]	; (8006894 <_close_r+0x1c>)
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fc f9fc 	bl	8002c80 <_close>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_close_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_close_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	200008fc 	.word	0x200008fc

08006898 <_lseek_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	4611      	mov	r1, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	4d05      	ldr	r5, [pc, #20]	; (80068b8 <_lseek_r+0x20>)
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fc fa0e 	bl	8002cc8 <_lseek>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_lseek_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_lseek_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	200008fc 	.word	0x200008fc

080068bc <_read_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4604      	mov	r4, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	2200      	movs	r2, #0
 80068c6:	4d05      	ldr	r5, [pc, #20]	; (80068dc <_read_r+0x20>)
 80068c8:	602a      	str	r2, [r5, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f7fc f99f 	bl	8002c0e <_read>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_read_r+0x1e>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_read_r+0x1e>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	200008fc 	.word	0x200008fc

080068e0 <_write_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	2200      	movs	r2, #0
 80068ea:	4d05      	ldr	r5, [pc, #20]	; (8006900 <_write_r+0x20>)
 80068ec:	602a      	str	r2, [r5, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f7fc f9aa 	bl	8002c48 <_write>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_write_r+0x1e>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_write_r+0x1e>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	200008fc 	.word	0x200008fc

08006904 <__errno>:
 8006904:	4b01      	ldr	r3, [pc, #4]	; (800690c <__errno+0x8>)
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000080 	.word	0x20000080

08006910 <__libc_init_array>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	2600      	movs	r6, #0
 8006914:	4d0c      	ldr	r5, [pc, #48]	; (8006948 <__libc_init_array+0x38>)
 8006916:	4c0d      	ldr	r4, [pc, #52]	; (800694c <__libc_init_array+0x3c>)
 8006918:	1b64      	subs	r4, r4, r5
 800691a:	10a4      	asrs	r4, r4, #2
 800691c:	42a6      	cmp	r6, r4
 800691e:	d109      	bne.n	8006934 <__libc_init_array+0x24>
 8006920:	f001 fe48 	bl	80085b4 <_init>
 8006924:	2600      	movs	r6, #0
 8006926:	4d0a      	ldr	r5, [pc, #40]	; (8006950 <__libc_init_array+0x40>)
 8006928:	4c0a      	ldr	r4, [pc, #40]	; (8006954 <__libc_init_array+0x44>)
 800692a:	1b64      	subs	r4, r4, r5
 800692c:	10a4      	asrs	r4, r4, #2
 800692e:	42a6      	cmp	r6, r4
 8006930:	d105      	bne.n	800693e <__libc_init_array+0x2e>
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	f855 3b04 	ldr.w	r3, [r5], #4
 8006938:	4798      	blx	r3
 800693a:	3601      	adds	r6, #1
 800693c:	e7ee      	b.n	800691c <__libc_init_array+0xc>
 800693e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006942:	4798      	blx	r3
 8006944:	3601      	adds	r6, #1
 8006946:	e7f2      	b.n	800692e <__libc_init_array+0x1e>
 8006948:	080091fc 	.word	0x080091fc
 800694c:	080091fc 	.word	0x080091fc
 8006950:	080091fc 	.word	0x080091fc
 8006954:	08009200 	.word	0x08009200

08006958 <__retarget_lock_init_recursive>:
 8006958:	4770      	bx	lr

0800695a <__retarget_lock_acquire_recursive>:
 800695a:	4770      	bx	lr

0800695c <__retarget_lock_release_recursive>:
 800695c:	4770      	bx	lr

0800695e <memchr>:
 800695e:	4603      	mov	r3, r0
 8006960:	b510      	push	{r4, lr}
 8006962:	b2c9      	uxtb	r1, r1
 8006964:	4402      	add	r2, r0
 8006966:	4293      	cmp	r3, r2
 8006968:	4618      	mov	r0, r3
 800696a:	d101      	bne.n	8006970 <memchr+0x12>
 800696c:	2000      	movs	r0, #0
 800696e:	e003      	b.n	8006978 <memchr+0x1a>
 8006970:	7804      	ldrb	r4, [r0, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	428c      	cmp	r4, r1
 8006976:	d1f6      	bne.n	8006966 <memchr+0x8>
 8006978:	bd10      	pop	{r4, pc}

0800697a <memcpy>:
 800697a:	440a      	add	r2, r1
 800697c:	4291      	cmp	r1, r2
 800697e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006982:	d100      	bne.n	8006986 <memcpy+0xc>
 8006984:	4770      	bx	lr
 8006986:	b510      	push	{r4, lr}
 8006988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698c:	4291      	cmp	r1, r2
 800698e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006992:	d1f9      	bne.n	8006988 <memcpy+0xe>
 8006994:	bd10      	pop	{r4, pc}

08006996 <quorem>:
 8006996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699a:	6903      	ldr	r3, [r0, #16]
 800699c:	690c      	ldr	r4, [r1, #16]
 800699e:	4607      	mov	r7, r0
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	db7f      	blt.n	8006aa4 <quorem+0x10e>
 80069a4:	3c01      	subs	r4, #1
 80069a6:	f100 0514 	add.w	r5, r0, #20
 80069aa:	f101 0814 	add.w	r8, r1, #20
 80069ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069bc:	3301      	adds	r3, #1
 80069be:	429a      	cmp	r2, r3
 80069c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80069c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069cc:	d331      	bcc.n	8006a32 <quorem+0x9c>
 80069ce:	f04f 0e00 	mov.w	lr, #0
 80069d2:	4640      	mov	r0, r8
 80069d4:	46ac      	mov	ip, r5
 80069d6:	46f2      	mov	sl, lr
 80069d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80069dc:	b293      	uxth	r3, r2
 80069de:	fb06 e303 	mla	r3, r6, r3, lr
 80069e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069e6:	0c1a      	lsrs	r2, r3, #16
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	fb06 220e 	mla	r2, r6, lr, r2
 80069ee:	ebaa 0303 	sub.w	r3, sl, r3
 80069f2:	f8dc a000 	ldr.w	sl, [ip]
 80069f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069fa:	fa1f fa8a 	uxth.w	sl, sl
 80069fe:	4453      	add	r3, sl
 8006a00:	f8dc a000 	ldr.w	sl, [ip]
 8006a04:	b292      	uxth	r2, r2
 8006a06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a14:	4581      	cmp	r9, r0
 8006a16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a1a:	f84c 3b04 	str.w	r3, [ip], #4
 8006a1e:	d2db      	bcs.n	80069d8 <quorem+0x42>
 8006a20:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a24:	b92b      	cbnz	r3, 8006a32 <quorem+0x9c>
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	3b04      	subs	r3, #4
 8006a2a:	429d      	cmp	r5, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	d32d      	bcc.n	8006a8c <quorem+0xf6>
 8006a30:	613c      	str	r4, [r7, #16]
 8006a32:	4638      	mov	r0, r7
 8006a34:	f001 f992 	bl	8007d5c <__mcmp>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	db23      	blt.n	8006a84 <quorem+0xee>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	2000      	movs	r0, #0
 8006a40:	3601      	adds	r6, #1
 8006a42:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a46:	f8d1 c000 	ldr.w	ip, [r1]
 8006a4a:	b293      	uxth	r3, r2
 8006a4c:	1ac3      	subs	r3, r0, r3
 8006a4e:	0c12      	lsrs	r2, r2, #16
 8006a50:	fa1f f08c 	uxth.w	r0, ip
 8006a54:	4403      	add	r3, r0
 8006a56:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006a5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a64:	45c1      	cmp	r9, r8
 8006a66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a6a:	f841 3b04 	str.w	r3, [r1], #4
 8006a6e:	d2e8      	bcs.n	8006a42 <quorem+0xac>
 8006a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a78:	b922      	cbnz	r2, 8006a84 <quorem+0xee>
 8006a7a:	3b04      	subs	r3, #4
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	d30a      	bcc.n	8006a98 <quorem+0x102>
 8006a82:	613c      	str	r4, [r7, #16]
 8006a84:	4630      	mov	r0, r6
 8006a86:	b003      	add	sp, #12
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	3b04      	subs	r3, #4
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d1cd      	bne.n	8006a30 <quorem+0x9a>
 8006a94:	3c01      	subs	r4, #1
 8006a96:	e7c8      	b.n	8006a2a <quorem+0x94>
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	3b04      	subs	r3, #4
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	d1f0      	bne.n	8006a82 <quorem+0xec>
 8006aa0:	3c01      	subs	r4, #1
 8006aa2:	e7eb      	b.n	8006a7c <quorem+0xe6>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	e7ee      	b.n	8006a86 <quorem+0xf0>

08006aa8 <_dtoa_r>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	461f      	mov	r7, r3
 8006ab0:	69c4      	ldr	r4, [r0, #28]
 8006ab2:	b099      	sub	sp, #100	; 0x64
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006aba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006abe:	b974      	cbnz	r4, 8006ade <_dtoa_r+0x36>
 8006ac0:	2010      	movs	r0, #16
 8006ac2:	f000 fe1d 	bl	8007700 <malloc>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	61e8      	str	r0, [r5, #28]
 8006aca:	b920      	cbnz	r0, 8006ad6 <_dtoa_r+0x2e>
 8006acc:	21ef      	movs	r1, #239	; 0xef
 8006ace:	4bac      	ldr	r3, [pc, #688]	; (8006d80 <_dtoa_r+0x2d8>)
 8006ad0:	48ac      	ldr	r0, [pc, #688]	; (8006d84 <_dtoa_r+0x2dc>)
 8006ad2:	f001 fb7f 	bl	80081d4 <__assert_func>
 8006ad6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ada:	6004      	str	r4, [r0, #0]
 8006adc:	60c4      	str	r4, [r0, #12]
 8006ade:	69eb      	ldr	r3, [r5, #28]
 8006ae0:	6819      	ldr	r1, [r3, #0]
 8006ae2:	b151      	cbz	r1, 8006afa <_dtoa_r+0x52>
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4093      	lsls	r3, r2
 8006aea:	604a      	str	r2, [r1, #4]
 8006aec:	608b      	str	r3, [r1, #8]
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 fefa 	bl	80078e8 <_Bfree>
 8006af4:	2200      	movs	r2, #0
 8006af6:	69eb      	ldr	r3, [r5, #28]
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	1e3b      	subs	r3, r7, #0
 8006afc:	bfaf      	iteee	ge
 8006afe:	2300      	movge	r3, #0
 8006b00:	2201      	movlt	r2, #1
 8006b02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b06:	9305      	strlt	r3, [sp, #20]
 8006b08:	bfa8      	it	ge
 8006b0a:	f8c8 3000 	strge.w	r3, [r8]
 8006b0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006b12:	4b9d      	ldr	r3, [pc, #628]	; (8006d88 <_dtoa_r+0x2e0>)
 8006b14:	bfb8      	it	lt
 8006b16:	f8c8 2000 	strlt.w	r2, [r8]
 8006b1a:	ea33 0309 	bics.w	r3, r3, r9
 8006b1e:	d119      	bne.n	8006b54 <_dtoa_r+0xac>
 8006b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b2c:	4333      	orrs	r3, r6
 8006b2e:	f000 8589 	beq.w	8007644 <_dtoa_r+0xb9c>
 8006b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b34:	b953      	cbnz	r3, 8006b4c <_dtoa_r+0xa4>
 8006b36:	4b95      	ldr	r3, [pc, #596]	; (8006d8c <_dtoa_r+0x2e4>)
 8006b38:	e023      	b.n	8006b82 <_dtoa_r+0xda>
 8006b3a:	4b95      	ldr	r3, [pc, #596]	; (8006d90 <_dtoa_r+0x2e8>)
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	9803      	ldr	r0, [sp, #12]
 8006b46:	b019      	add	sp, #100	; 0x64
 8006b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4c:	4b8f      	ldr	r3, [pc, #572]	; (8006d8c <_dtoa_r+0x2e4>)
 8006b4e:	9303      	str	r3, [sp, #12]
 8006b50:	3303      	adds	r3, #3
 8006b52:	e7f5      	b.n	8006b40 <_dtoa_r+0x98>
 8006b54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b60:	2200      	movs	r2, #0
 8006b62:	2300      	movs	r3, #0
 8006b64:	f7f9 ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8006b68:	4680      	mov	r8, r0
 8006b6a:	b160      	cbz	r0, 8006b86 <_dtoa_r+0xde>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8562 	beq.w	800763e <_dtoa_r+0xb96>
 8006b7a:	4b86      	ldr	r3, [pc, #536]	; (8006d94 <_dtoa_r+0x2ec>)
 8006b7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	9303      	str	r3, [sp, #12]
 8006b84:	e7de      	b.n	8006b44 <_dtoa_r+0x9c>
 8006b86:	ab16      	add	r3, sp, #88	; 0x58
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	ab17      	add	r3, sp, #92	; 0x5c
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4628      	mov	r0, r5
 8006b90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b94:	f001 f98a 	bl	8007eac <__d2b>
 8006b98:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	d07e      	beq.n	8006ca0 <_dtoa_r+0x1f8>
 8006ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ba8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bb0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006bb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006bb8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	4b75      	ldr	r3, [pc, #468]	; (8006d98 <_dtoa_r+0x2f0>)
 8006bc2:	f7f9 fad1 	bl	8000168 <__aeabi_dsub>
 8006bc6:	a368      	add	r3, pc, #416	; (adr r3, 8006d68 <_dtoa_r+0x2c0>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f7f9 fc84 	bl	80004d8 <__aeabi_dmul>
 8006bd0:	a367      	add	r3, pc, #412	; (adr r3, 8006d70 <_dtoa_r+0x2c8>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fac9 	bl	800016c <__adddf3>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	4620      	mov	r0, r4
 8006bde:	460f      	mov	r7, r1
 8006be0:	f7f9 fc10 	bl	8000404 <__aeabi_i2d>
 8006be4:	a364      	add	r3, pc, #400	; (adr r3, 8006d78 <_dtoa_r+0x2d0>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7f9 fc75 	bl	80004d8 <__aeabi_dmul>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	f7f9 fab9 	bl	800016c <__adddf3>
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	f7f9 ff1b 	bl	8000a38 <__aeabi_d2iz>
 8006c02:	2200      	movs	r2, #0
 8006c04:	4683      	mov	fp, r0
 8006c06:	2300      	movs	r3, #0
 8006c08:	4630      	mov	r0, r6
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	f7f9 fed6 	bl	80009bc <__aeabi_dcmplt>
 8006c10:	b148      	cbz	r0, 8006c26 <_dtoa_r+0x17e>
 8006c12:	4658      	mov	r0, fp
 8006c14:	f7f9 fbf6 	bl	8000404 <__aeabi_i2d>
 8006c18:	4632      	mov	r2, r6
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	f7f9 fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8006c20:	b908      	cbnz	r0, 8006c26 <_dtoa_r+0x17e>
 8006c22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c26:	f1bb 0f16 	cmp.w	fp, #22
 8006c2a:	d857      	bhi.n	8006cdc <_dtoa_r+0x234>
 8006c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c30:	4b5a      	ldr	r3, [pc, #360]	; (8006d9c <_dtoa_r+0x2f4>)
 8006c32:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 febf 	bl	80009bc <__aeabi_dcmplt>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d04e      	beq.n	8006ce0 <_dtoa_r+0x238>
 8006c42:	2300      	movs	r3, #0
 8006c44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c48:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c4c:	1b1b      	subs	r3, r3, r4
 8006c4e:	1e5a      	subs	r2, r3, #1
 8006c50:	bf46      	itte	mi
 8006c52:	f1c3 0901 	rsbmi	r9, r3, #1
 8006c56:	2300      	movmi	r3, #0
 8006c58:	f04f 0900 	movpl.w	r9, #0
 8006c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c5e:	bf48      	it	mi
 8006c60:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006c62:	f1bb 0f00 	cmp.w	fp, #0
 8006c66:	db3d      	blt.n	8006ce4 <_dtoa_r+0x23c>
 8006c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006c6e:	445b      	add	r3, fp
 8006c70:	9309      	str	r3, [sp, #36]	; 0x24
 8006c72:	2300      	movs	r3, #0
 8006c74:	930a      	str	r3, [sp, #40]	; 0x28
 8006c76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c78:	2b09      	cmp	r3, #9
 8006c7a:	d867      	bhi.n	8006d4c <_dtoa_r+0x2a4>
 8006c7c:	2b05      	cmp	r3, #5
 8006c7e:	bfc4      	itt	gt
 8006c80:	3b04      	subgt	r3, #4
 8006c82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c86:	bfc8      	it	gt
 8006c88:	2400      	movgt	r4, #0
 8006c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c8e:	bfd8      	it	le
 8006c90:	2401      	movle	r4, #1
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	f200 8086 	bhi.w	8006da4 <_dtoa_r+0x2fc>
 8006c98:	e8df f003 	tbb	[pc, r3]
 8006c9c:	5637392c 	.word	0x5637392c
 8006ca0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006ca4:	441c      	add	r4, r3
 8006ca6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	bfc1      	itttt	gt
 8006cae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cb2:	fa09 f903 	lslgt.w	r9, r9, r3
 8006cb6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006cba:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006cbe:	bfd6      	itet	le
 8006cc0:	f1c3 0320 	rsble	r3, r3, #32
 8006cc4:	ea49 0003 	orrgt.w	r0, r9, r3
 8006cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8006ccc:	f7f9 fb8a 	bl	80003e4 <__aeabi_ui2d>
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006cd6:	3c01      	subs	r4, #1
 8006cd8:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cda:	e76f      	b.n	8006bbc <_dtoa_r+0x114>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e7b3      	b.n	8006c48 <_dtoa_r+0x1a0>
 8006ce0:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ce2:	e7b2      	b.n	8006c4a <_dtoa_r+0x1a2>
 8006ce4:	f1cb 0300 	rsb	r3, fp, #0
 8006ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8006cea:	2300      	movs	r3, #0
 8006cec:	eba9 090b 	sub.w	r9, r9, fp
 8006cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8006cf2:	e7c0      	b.n	8006c76 <_dtoa_r+0x1ce>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dc55      	bgt.n	8006daa <_dtoa_r+0x302>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	461a      	mov	r2, r3
 8006d02:	9306      	str	r3, [sp, #24]
 8006d04:	9308      	str	r3, [sp, #32]
 8006d06:	9223      	str	r2, [sp, #140]	; 0x8c
 8006d08:	e00b      	b.n	8006d22 <_dtoa_r+0x27a>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e7f3      	b.n	8006cf6 <_dtoa_r+0x24e>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d14:	445b      	add	r3, fp
 8006d16:	9306      	str	r3, [sp, #24]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	9308      	str	r3, [sp, #32]
 8006d1e:	bfb8      	it	lt
 8006d20:	2301      	movlt	r3, #1
 8006d22:	2100      	movs	r1, #0
 8006d24:	2204      	movs	r2, #4
 8006d26:	69e8      	ldr	r0, [r5, #28]
 8006d28:	f102 0614 	add.w	r6, r2, #20
 8006d2c:	429e      	cmp	r6, r3
 8006d2e:	d940      	bls.n	8006db2 <_dtoa_r+0x30a>
 8006d30:	6041      	str	r1, [r0, #4]
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 fd98 	bl	8007868 <_Balloc>
 8006d38:	9003      	str	r0, [sp, #12]
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d13c      	bne.n	8006db8 <_dtoa_r+0x310>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	f240 11af 	movw	r1, #431	; 0x1af
 8006d44:	4b16      	ldr	r3, [pc, #88]	; (8006da0 <_dtoa_r+0x2f8>)
 8006d46:	e6c3      	b.n	8006ad0 <_dtoa_r+0x28>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e7e1      	b.n	8006d10 <_dtoa_r+0x268>
 8006d4c:	2401      	movs	r4, #1
 8006d4e:	2300      	movs	r3, #0
 8006d50:	940b      	str	r4, [sp, #44]	; 0x2c
 8006d52:	9322      	str	r3, [sp, #136]	; 0x88
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	2200      	movs	r2, #0
 8006d5a:	9306      	str	r3, [sp, #24]
 8006d5c:	9308      	str	r3, [sp, #32]
 8006d5e:	2312      	movs	r3, #18
 8006d60:	e7d1      	b.n	8006d06 <_dtoa_r+0x25e>
 8006d62:	bf00      	nop
 8006d64:	f3af 8000 	nop.w
 8006d68:	636f4361 	.word	0x636f4361
 8006d6c:	3fd287a7 	.word	0x3fd287a7
 8006d70:	8b60c8b3 	.word	0x8b60c8b3
 8006d74:	3fc68a28 	.word	0x3fc68a28
 8006d78:	509f79fb 	.word	0x509f79fb
 8006d7c:	3fd34413 	.word	0x3fd34413
 8006d80:	08008ecb 	.word	0x08008ecb
 8006d84:	08008ee2 	.word	0x08008ee2
 8006d88:	7ff00000 	.word	0x7ff00000
 8006d8c:	08008ec7 	.word	0x08008ec7
 8006d90:	08008ebe 	.word	0x08008ebe
 8006d94:	08008e9b 	.word	0x08008e9b
 8006d98:	3ff80000 	.word	0x3ff80000
 8006d9c:	08008fd0 	.word	0x08008fd0
 8006da0:	08008f3a 	.word	0x08008f3a
 8006da4:	2301      	movs	r3, #1
 8006da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006da8:	e7d4      	b.n	8006d54 <_dtoa_r+0x2ac>
 8006daa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dac:	9306      	str	r3, [sp, #24]
 8006dae:	9308      	str	r3, [sp, #32]
 8006db0:	e7b7      	b.n	8006d22 <_dtoa_r+0x27a>
 8006db2:	3101      	adds	r1, #1
 8006db4:	0052      	lsls	r2, r2, #1
 8006db6:	e7b7      	b.n	8006d28 <_dtoa_r+0x280>
 8006db8:	69eb      	ldr	r3, [r5, #28]
 8006dba:	9a03      	ldr	r2, [sp, #12]
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	9b08      	ldr	r3, [sp, #32]
 8006dc0:	2b0e      	cmp	r3, #14
 8006dc2:	f200 80a8 	bhi.w	8006f16 <_dtoa_r+0x46e>
 8006dc6:	2c00      	cmp	r4, #0
 8006dc8:	f000 80a5 	beq.w	8006f16 <_dtoa_r+0x46e>
 8006dcc:	f1bb 0f00 	cmp.w	fp, #0
 8006dd0:	dd34      	ble.n	8006e3c <_dtoa_r+0x394>
 8006dd2:	4b9a      	ldr	r3, [pc, #616]	; (800703c <_dtoa_r+0x594>)
 8006dd4:	f00b 020f 	and.w	r2, fp, #15
 8006dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ddc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006de4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006de8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006dec:	d016      	beq.n	8006e1c <_dtoa_r+0x374>
 8006dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006df2:	4b93      	ldr	r3, [pc, #588]	; (8007040 <_dtoa_r+0x598>)
 8006df4:	2703      	movs	r7, #3
 8006df6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dfa:	f7f9 fc97 	bl	800072c <__aeabi_ddiv>
 8006dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e02:	f004 040f 	and.w	r4, r4, #15
 8006e06:	4e8e      	ldr	r6, [pc, #568]	; (8007040 <_dtoa_r+0x598>)
 8006e08:	b954      	cbnz	r4, 8006e20 <_dtoa_r+0x378>
 8006e0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e12:	f7f9 fc8b 	bl	800072c <__aeabi_ddiv>
 8006e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e1a:	e029      	b.n	8006e70 <_dtoa_r+0x3c8>
 8006e1c:	2702      	movs	r7, #2
 8006e1e:	e7f2      	b.n	8006e06 <_dtoa_r+0x35e>
 8006e20:	07e1      	lsls	r1, r4, #31
 8006e22:	d508      	bpl.n	8006e36 <_dtoa_r+0x38e>
 8006e24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e2c:	f7f9 fb54 	bl	80004d8 <__aeabi_dmul>
 8006e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e34:	3701      	adds	r7, #1
 8006e36:	1064      	asrs	r4, r4, #1
 8006e38:	3608      	adds	r6, #8
 8006e3a:	e7e5      	b.n	8006e08 <_dtoa_r+0x360>
 8006e3c:	f000 80a5 	beq.w	8006f8a <_dtoa_r+0x4e2>
 8006e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e44:	f1cb 0400 	rsb	r4, fp, #0
 8006e48:	4b7c      	ldr	r3, [pc, #496]	; (800703c <_dtoa_r+0x594>)
 8006e4a:	f004 020f 	and.w	r2, r4, #15
 8006e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fb3f 	bl	80004d8 <__aeabi_dmul>
 8006e5a:	2702      	movs	r7, #2
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e62:	4e77      	ldr	r6, [pc, #476]	; (8007040 <_dtoa_r+0x598>)
 8006e64:	1124      	asrs	r4, r4, #4
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	f040 8084 	bne.w	8006f74 <_dtoa_r+0x4cc>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1d2      	bne.n	8006e16 <_dtoa_r+0x36e>
 8006e70:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8087 	beq.w	8006f8e <_dtoa_r+0x4e6>
 8006e80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e84:	2200      	movs	r2, #0
 8006e86:	4b6f      	ldr	r3, [pc, #444]	; (8007044 <_dtoa_r+0x59c>)
 8006e88:	f7f9 fd98 	bl	80009bc <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d07e      	beq.n	8006f8e <_dtoa_r+0x4e6>
 8006e90:	9b08      	ldr	r3, [sp, #32]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d07b      	beq.n	8006f8e <_dtoa_r+0x4e6>
 8006e96:	9b06      	ldr	r3, [sp, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dd38      	ble.n	8006f0e <_dtoa_r+0x466>
 8006e9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4b69      	ldr	r3, [pc, #420]	; (8007048 <_dtoa_r+0x5a0>)
 8006ea4:	f7f9 fb18 	bl	80004d8 <__aeabi_dmul>
 8006ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eac:	9c06      	ldr	r4, [sp, #24]
 8006eae:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006eb2:	3701      	adds	r7, #1
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7f9 faa5 	bl	8000404 <__aeabi_i2d>
 8006eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ebe:	f7f9 fb0b 	bl	80004d8 <__aeabi_dmul>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4b61      	ldr	r3, [pc, #388]	; (800704c <_dtoa_r+0x5a4>)
 8006ec6:	f7f9 f951 	bl	800016c <__adddf3>
 8006eca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006ece:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ed2:	9611      	str	r6, [sp, #68]	; 0x44
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d15d      	bne.n	8006f94 <_dtoa_r+0x4ec>
 8006ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006edc:	2200      	movs	r2, #0
 8006ede:	4b5c      	ldr	r3, [pc, #368]	; (8007050 <_dtoa_r+0x5a8>)
 8006ee0:	f7f9 f942 	bl	8000168 <__aeabi_dsub>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006eec:	4633      	mov	r3, r6
 8006eee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ef0:	f7f9 fd82 	bl	80009f8 <__aeabi_dcmpgt>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f040 8295 	bne.w	8007424 <_dtoa_r+0x97c>
 8006efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006efe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f04:	f7f9 fd5a 	bl	80009bc <__aeabi_dcmplt>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f040 8289 	bne.w	8007420 <_dtoa_r+0x978>
 8006f0e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006f12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f2c0 8151 	blt.w	80071c0 <_dtoa_r+0x718>
 8006f1e:	f1bb 0f0e 	cmp.w	fp, #14
 8006f22:	f300 814d 	bgt.w	80071c0 <_dtoa_r+0x718>
 8006f26:	4b45      	ldr	r3, [pc, #276]	; (800703c <_dtoa_r+0x594>)
 8006f28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006f34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f280 80da 	bge.w	80070f0 <_dtoa_r+0x648>
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f300 80d6 	bgt.w	80070f0 <_dtoa_r+0x648>
 8006f44:	f040 826b 	bne.w	800741e <_dtoa_r+0x976>
 8006f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4b40      	ldr	r3, [pc, #256]	; (8007050 <_dtoa_r+0x5a8>)
 8006f50:	f7f9 fac2 	bl	80004d8 <__aeabi_dmul>
 8006f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f58:	f7f9 fd44 	bl	80009e4 <__aeabi_dcmpge>
 8006f5c:	9c08      	ldr	r4, [sp, #32]
 8006f5e:	4626      	mov	r6, r4
 8006f60:	2800      	cmp	r0, #0
 8006f62:	f040 8241 	bne.w	80073e8 <_dtoa_r+0x940>
 8006f66:	2331      	movs	r3, #49	; 0x31
 8006f68:	9f03      	ldr	r7, [sp, #12]
 8006f6a:	f10b 0b01 	add.w	fp, fp, #1
 8006f6e:	f807 3b01 	strb.w	r3, [r7], #1
 8006f72:	e23d      	b.n	80073f0 <_dtoa_r+0x948>
 8006f74:	07e2      	lsls	r2, r4, #31
 8006f76:	d505      	bpl.n	8006f84 <_dtoa_r+0x4dc>
 8006f78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f7c:	f7f9 faac 	bl	80004d8 <__aeabi_dmul>
 8006f80:	2301      	movs	r3, #1
 8006f82:	3701      	adds	r7, #1
 8006f84:	1064      	asrs	r4, r4, #1
 8006f86:	3608      	adds	r6, #8
 8006f88:	e76d      	b.n	8006e66 <_dtoa_r+0x3be>
 8006f8a:	2702      	movs	r7, #2
 8006f8c:	e770      	b.n	8006e70 <_dtoa_r+0x3c8>
 8006f8e:	46d8      	mov	r8, fp
 8006f90:	9c08      	ldr	r4, [sp, #32]
 8006f92:	e78f      	b.n	8006eb4 <_dtoa_r+0x40c>
 8006f94:	9903      	ldr	r1, [sp, #12]
 8006f96:	4b29      	ldr	r3, [pc, #164]	; (800703c <_dtoa_r+0x594>)
 8006f98:	4421      	add	r1, r4
 8006f9a:	9112      	str	r1, [sp, #72]	; 0x48
 8006f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fa2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006fa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006faa:	2900      	cmp	r1, #0
 8006fac:	d054      	beq.n	8007058 <_dtoa_r+0x5b0>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	4928      	ldr	r1, [pc, #160]	; (8007054 <_dtoa_r+0x5ac>)
 8006fb2:	f7f9 fbbb 	bl	800072c <__aeabi_ddiv>
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	4632      	mov	r2, r6
 8006fba:	f7f9 f8d5 	bl	8000168 <__aeabi_dsub>
 8006fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fc2:	9f03      	ldr	r7, [sp, #12]
 8006fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fc8:	f7f9 fd36 	bl	8000a38 <__aeabi_d2iz>
 8006fcc:	4604      	mov	r4, r0
 8006fce:	f7f9 fa19 	bl	8000404 <__aeabi_i2d>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fda:	f7f9 f8c5 	bl	8000168 <__aeabi_dsub>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	3430      	adds	r4, #48	; 0x30
 8006fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fec:	f807 4b01 	strb.w	r4, [r7], #1
 8006ff0:	f7f9 fce4 	bl	80009bc <__aeabi_dcmplt>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d173      	bne.n	80070e0 <_dtoa_r+0x638>
 8006ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	4911      	ldr	r1, [pc, #68]	; (8007044 <_dtoa_r+0x59c>)
 8007000:	f7f9 f8b2 	bl	8000168 <__aeabi_dsub>
 8007004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007008:	f7f9 fcd8 	bl	80009bc <__aeabi_dcmplt>
 800700c:	2800      	cmp	r0, #0
 800700e:	f040 80b6 	bne.w	800717e <_dtoa_r+0x6d6>
 8007012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007014:	429f      	cmp	r7, r3
 8007016:	f43f af7a 	beq.w	8006f0e <_dtoa_r+0x466>
 800701a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800701e:	2200      	movs	r2, #0
 8007020:	4b09      	ldr	r3, [pc, #36]	; (8007048 <_dtoa_r+0x5a0>)
 8007022:	f7f9 fa59 	bl	80004d8 <__aeabi_dmul>
 8007026:	2200      	movs	r2, #0
 8007028:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800702c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <_dtoa_r+0x5a0>)
 8007032:	f7f9 fa51 	bl	80004d8 <__aeabi_dmul>
 8007036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800703a:	e7c3      	b.n	8006fc4 <_dtoa_r+0x51c>
 800703c:	08008fd0 	.word	0x08008fd0
 8007040:	08008fa8 	.word	0x08008fa8
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	40240000 	.word	0x40240000
 800704c:	401c0000 	.word	0x401c0000
 8007050:	40140000 	.word	0x40140000
 8007054:	3fe00000 	.word	0x3fe00000
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 fa3c 	bl	80004d8 <__aeabi_dmul>
 8007060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007062:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007066:	9c03      	ldr	r4, [sp, #12]
 8007068:	9314      	str	r3, [sp, #80]	; 0x50
 800706a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800706e:	f7f9 fce3 	bl	8000a38 <__aeabi_d2iz>
 8007072:	9015      	str	r0, [sp, #84]	; 0x54
 8007074:	f7f9 f9c6 	bl	8000404 <__aeabi_i2d>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007080:	f7f9 f872 	bl	8000168 <__aeabi_dsub>
 8007084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007086:	4606      	mov	r6, r0
 8007088:	3330      	adds	r3, #48	; 0x30
 800708a:	f804 3b01 	strb.w	r3, [r4], #1
 800708e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007090:	460f      	mov	r7, r1
 8007092:	429c      	cmp	r4, r3
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	d124      	bne.n	80070e4 <_dtoa_r+0x63c>
 800709a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800709e:	4baf      	ldr	r3, [pc, #700]	; (800735c <_dtoa_r+0x8b4>)
 80070a0:	f7f9 f864 	bl	800016c <__adddf3>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4630      	mov	r0, r6
 80070aa:	4639      	mov	r1, r7
 80070ac:	f7f9 fca4 	bl	80009f8 <__aeabi_dcmpgt>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d163      	bne.n	800717c <_dtoa_r+0x6d4>
 80070b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070b8:	2000      	movs	r0, #0
 80070ba:	49a8      	ldr	r1, [pc, #672]	; (800735c <_dtoa_r+0x8b4>)
 80070bc:	f7f9 f854 	bl	8000168 <__aeabi_dsub>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4630      	mov	r0, r6
 80070c6:	4639      	mov	r1, r7
 80070c8:	f7f9 fc78 	bl	80009bc <__aeabi_dcmplt>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f43f af1e 	beq.w	8006f0e <_dtoa_r+0x466>
 80070d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80070d4:	1e7b      	subs	r3, r7, #1
 80070d6:	9314      	str	r3, [sp, #80]	; 0x50
 80070d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80070dc:	2b30      	cmp	r3, #48	; 0x30
 80070de:	d0f8      	beq.n	80070d2 <_dtoa_r+0x62a>
 80070e0:	46c3      	mov	fp, r8
 80070e2:	e03b      	b.n	800715c <_dtoa_r+0x6b4>
 80070e4:	4b9e      	ldr	r3, [pc, #632]	; (8007360 <_dtoa_r+0x8b8>)
 80070e6:	f7f9 f9f7 	bl	80004d8 <__aeabi_dmul>
 80070ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070ee:	e7bc      	b.n	800706a <_dtoa_r+0x5c2>
 80070f0:	9f03      	ldr	r7, [sp, #12]
 80070f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80070f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fb15 	bl	800072c <__aeabi_ddiv>
 8007102:	f7f9 fc99 	bl	8000a38 <__aeabi_d2iz>
 8007106:	4604      	mov	r4, r0
 8007108:	f7f9 f97c 	bl	8000404 <__aeabi_i2d>
 800710c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007110:	f7f9 f9e2 	bl	80004d8 <__aeabi_dmul>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 f824 	bl	8000168 <__aeabi_dsub>
 8007120:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007124:	f807 6b01 	strb.w	r6, [r7], #1
 8007128:	9e03      	ldr	r6, [sp, #12]
 800712a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800712e:	1bbe      	subs	r6, r7, r6
 8007130:	45b4      	cmp	ip, r6
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	d136      	bne.n	80071a6 <_dtoa_r+0x6fe>
 8007138:	f7f9 f818 	bl	800016c <__adddf3>
 800713c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007140:	4680      	mov	r8, r0
 8007142:	4689      	mov	r9, r1
 8007144:	f7f9 fc58 	bl	80009f8 <__aeabi_dcmpgt>
 8007148:	bb58      	cbnz	r0, 80071a2 <_dtoa_r+0x6fa>
 800714a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800714e:	4640      	mov	r0, r8
 8007150:	4649      	mov	r1, r9
 8007152:	f7f9 fc29 	bl	80009a8 <__aeabi_dcmpeq>
 8007156:	b108      	cbz	r0, 800715c <_dtoa_r+0x6b4>
 8007158:	07e3      	lsls	r3, r4, #31
 800715a:	d422      	bmi.n	80071a2 <_dtoa_r+0x6fa>
 800715c:	4651      	mov	r1, sl
 800715e:	4628      	mov	r0, r5
 8007160:	f000 fbc2 	bl	80078e8 <_Bfree>
 8007164:	2300      	movs	r3, #0
 8007166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007168:	703b      	strb	r3, [r7, #0]
 800716a:	f10b 0301 	add.w	r3, fp, #1
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007172:	2b00      	cmp	r3, #0
 8007174:	f43f ace6 	beq.w	8006b44 <_dtoa_r+0x9c>
 8007178:	601f      	str	r7, [r3, #0]
 800717a:	e4e3      	b.n	8006b44 <_dtoa_r+0x9c>
 800717c:	4627      	mov	r7, r4
 800717e:	463b      	mov	r3, r7
 8007180:	461f      	mov	r7, r3
 8007182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007186:	2a39      	cmp	r2, #57	; 0x39
 8007188:	d107      	bne.n	800719a <_dtoa_r+0x6f2>
 800718a:	9a03      	ldr	r2, [sp, #12]
 800718c:	429a      	cmp	r2, r3
 800718e:	d1f7      	bne.n	8007180 <_dtoa_r+0x6d8>
 8007190:	2230      	movs	r2, #48	; 0x30
 8007192:	9903      	ldr	r1, [sp, #12]
 8007194:	f108 0801 	add.w	r8, r8, #1
 8007198:	700a      	strb	r2, [r1, #0]
 800719a:	781a      	ldrb	r2, [r3, #0]
 800719c:	3201      	adds	r2, #1
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e79e      	b.n	80070e0 <_dtoa_r+0x638>
 80071a2:	46d8      	mov	r8, fp
 80071a4:	e7eb      	b.n	800717e <_dtoa_r+0x6d6>
 80071a6:	2200      	movs	r2, #0
 80071a8:	4b6d      	ldr	r3, [pc, #436]	; (8007360 <_dtoa_r+0x8b8>)
 80071aa:	f7f9 f995 	bl	80004d8 <__aeabi_dmul>
 80071ae:	2200      	movs	r2, #0
 80071b0:	2300      	movs	r3, #0
 80071b2:	4680      	mov	r8, r0
 80071b4:	4689      	mov	r9, r1
 80071b6:	f7f9 fbf7 	bl	80009a8 <__aeabi_dcmpeq>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d09b      	beq.n	80070f6 <_dtoa_r+0x64e>
 80071be:	e7cd      	b.n	800715c <_dtoa_r+0x6b4>
 80071c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071c2:	2a00      	cmp	r2, #0
 80071c4:	f000 80c4 	beq.w	8007350 <_dtoa_r+0x8a8>
 80071c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80071ca:	2a01      	cmp	r2, #1
 80071cc:	f300 80a8 	bgt.w	8007320 <_dtoa_r+0x878>
 80071d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	f000 80a0 	beq.w	8007318 <_dtoa_r+0x870>
 80071d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071dc:	464f      	mov	r7, r9
 80071de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071e2:	2101      	movs	r1, #1
 80071e4:	441a      	add	r2, r3
 80071e6:	4628      	mov	r0, r5
 80071e8:	4499      	add	r9, r3
 80071ea:	9209      	str	r2, [sp, #36]	; 0x24
 80071ec:	f000 fc32 	bl	8007a54 <__i2b>
 80071f0:	4606      	mov	r6, r0
 80071f2:	b15f      	cbz	r7, 800720c <_dtoa_r+0x764>
 80071f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dd08      	ble.n	800720c <_dtoa_r+0x764>
 80071fa:	42bb      	cmp	r3, r7
 80071fc:	bfa8      	it	ge
 80071fe:	463b      	movge	r3, r7
 8007200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007202:	eba9 0903 	sub.w	r9, r9, r3
 8007206:	1aff      	subs	r7, r7, r3
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	9309      	str	r3, [sp, #36]	; 0x24
 800720c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720e:	b1f3      	cbz	r3, 800724e <_dtoa_r+0x7a6>
 8007210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80a0 	beq.w	8007358 <_dtoa_r+0x8b0>
 8007218:	2c00      	cmp	r4, #0
 800721a:	dd10      	ble.n	800723e <_dtoa_r+0x796>
 800721c:	4631      	mov	r1, r6
 800721e:	4622      	mov	r2, r4
 8007220:	4628      	mov	r0, r5
 8007222:	f000 fcd5 	bl	8007bd0 <__pow5mult>
 8007226:	4652      	mov	r2, sl
 8007228:	4601      	mov	r1, r0
 800722a:	4606      	mov	r6, r0
 800722c:	4628      	mov	r0, r5
 800722e:	f000 fc27 	bl	8007a80 <__multiply>
 8007232:	4680      	mov	r8, r0
 8007234:	4651      	mov	r1, sl
 8007236:	4628      	mov	r0, r5
 8007238:	f000 fb56 	bl	80078e8 <_Bfree>
 800723c:	46c2      	mov	sl, r8
 800723e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007240:	1b1a      	subs	r2, r3, r4
 8007242:	d004      	beq.n	800724e <_dtoa_r+0x7a6>
 8007244:	4651      	mov	r1, sl
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fcc2 	bl	8007bd0 <__pow5mult>
 800724c:	4682      	mov	sl, r0
 800724e:	2101      	movs	r1, #1
 8007250:	4628      	mov	r0, r5
 8007252:	f000 fbff 	bl	8007a54 <__i2b>
 8007256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007258:	4604      	mov	r4, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	f340 8082 	ble.w	8007364 <_dtoa_r+0x8bc>
 8007260:	461a      	mov	r2, r3
 8007262:	4601      	mov	r1, r0
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fcb3 	bl	8007bd0 <__pow5mult>
 800726a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800726c:	4604      	mov	r4, r0
 800726e:	2b01      	cmp	r3, #1
 8007270:	dd7b      	ble.n	800736a <_dtoa_r+0x8c2>
 8007272:	f04f 0800 	mov.w	r8, #0
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800727c:	6918      	ldr	r0, [r3, #16]
 800727e:	f000 fb9b 	bl	80079b8 <__hi0bits>
 8007282:	f1c0 0020 	rsb	r0, r0, #32
 8007286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007288:	4418      	add	r0, r3
 800728a:	f010 001f 	ands.w	r0, r0, #31
 800728e:	f000 8092 	beq.w	80073b6 <_dtoa_r+0x90e>
 8007292:	f1c0 0320 	rsb	r3, r0, #32
 8007296:	2b04      	cmp	r3, #4
 8007298:	f340 8085 	ble.w	80073a6 <_dtoa_r+0x8fe>
 800729c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729e:	f1c0 001c 	rsb	r0, r0, #28
 80072a2:	4403      	add	r3, r0
 80072a4:	4481      	add	r9, r0
 80072a6:	4407      	add	r7, r0
 80072a8:	9309      	str	r3, [sp, #36]	; 0x24
 80072aa:	f1b9 0f00 	cmp.w	r9, #0
 80072ae:	dd05      	ble.n	80072bc <_dtoa_r+0x814>
 80072b0:	4651      	mov	r1, sl
 80072b2:	464a      	mov	r2, r9
 80072b4:	4628      	mov	r0, r5
 80072b6:	f000 fce5 	bl	8007c84 <__lshift>
 80072ba:	4682      	mov	sl, r0
 80072bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dd05      	ble.n	80072ce <_dtoa_r+0x826>
 80072c2:	4621      	mov	r1, r4
 80072c4:	461a      	mov	r2, r3
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 fcdc 	bl	8007c84 <__lshift>
 80072cc:	4604      	mov	r4, r0
 80072ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d072      	beq.n	80073ba <_dtoa_r+0x912>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4650      	mov	r0, sl
 80072d8:	f000 fd40 	bl	8007d5c <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	da6c      	bge.n	80073ba <_dtoa_r+0x912>
 80072e0:	2300      	movs	r3, #0
 80072e2:	4651      	mov	r1, sl
 80072e4:	220a      	movs	r2, #10
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fb20 	bl	800792c <__multadd>
 80072ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ee:	4682      	mov	sl, r0
 80072f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 81ac 	beq.w	8007652 <_dtoa_r+0xbaa>
 80072fa:	2300      	movs	r3, #0
 80072fc:	4631      	mov	r1, r6
 80072fe:	220a      	movs	r2, #10
 8007300:	4628      	mov	r0, r5
 8007302:	f000 fb13 	bl	800792c <__multadd>
 8007306:	9b06      	ldr	r3, [sp, #24]
 8007308:	4606      	mov	r6, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	f300 8093 	bgt.w	8007436 <_dtoa_r+0x98e>
 8007310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007312:	2b02      	cmp	r3, #2
 8007314:	dc59      	bgt.n	80073ca <_dtoa_r+0x922>
 8007316:	e08e      	b.n	8007436 <_dtoa_r+0x98e>
 8007318:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800731a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800731e:	e75d      	b.n	80071dc <_dtoa_r+0x734>
 8007320:	9b08      	ldr	r3, [sp, #32]
 8007322:	1e5c      	subs	r4, r3, #1
 8007324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007326:	42a3      	cmp	r3, r4
 8007328:	bfbf      	itttt	lt
 800732a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800732c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800732e:	1ae3      	sublt	r3, r4, r3
 8007330:	18d2      	addlt	r2, r2, r3
 8007332:	bfa8      	it	ge
 8007334:	1b1c      	subge	r4, r3, r4
 8007336:	9b08      	ldr	r3, [sp, #32]
 8007338:	bfbe      	ittt	lt
 800733a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800733c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800733e:	2400      	movlt	r4, #0
 8007340:	2b00      	cmp	r3, #0
 8007342:	bfb5      	itete	lt
 8007344:	eba9 0703 	sublt.w	r7, r9, r3
 8007348:	464f      	movge	r7, r9
 800734a:	2300      	movlt	r3, #0
 800734c:	9b08      	ldrge	r3, [sp, #32]
 800734e:	e747      	b.n	80071e0 <_dtoa_r+0x738>
 8007350:	464f      	mov	r7, r9
 8007352:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007354:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007356:	e74c      	b.n	80071f2 <_dtoa_r+0x74a>
 8007358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800735a:	e773      	b.n	8007244 <_dtoa_r+0x79c>
 800735c:	3fe00000 	.word	0x3fe00000
 8007360:	40240000 	.word	0x40240000
 8007364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007366:	2b01      	cmp	r3, #1
 8007368:	dc18      	bgt.n	800739c <_dtoa_r+0x8f4>
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	b9b3      	cbnz	r3, 800739c <_dtoa_r+0x8f4>
 800736e:	9b05      	ldr	r3, [sp, #20]
 8007370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007374:	b993      	cbnz	r3, 800739c <_dtoa_r+0x8f4>
 8007376:	9b05      	ldr	r3, [sp, #20]
 8007378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800737c:	0d1b      	lsrs	r3, r3, #20
 800737e:	051b      	lsls	r3, r3, #20
 8007380:	b17b      	cbz	r3, 80073a2 <_dtoa_r+0x8fa>
 8007382:	f04f 0801 	mov.w	r8, #1
 8007386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007388:	f109 0901 	add.w	r9, r9, #1
 800738c:	3301      	adds	r3, #1
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f af6f 	bne.w	8007276 <_dtoa_r+0x7ce>
 8007398:	2001      	movs	r0, #1
 800739a:	e774      	b.n	8007286 <_dtoa_r+0x7de>
 800739c:	f04f 0800 	mov.w	r8, #0
 80073a0:	e7f6      	b.n	8007390 <_dtoa_r+0x8e8>
 80073a2:	4698      	mov	r8, r3
 80073a4:	e7f4      	b.n	8007390 <_dtoa_r+0x8e8>
 80073a6:	d080      	beq.n	80072aa <_dtoa_r+0x802>
 80073a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073aa:	331c      	adds	r3, #28
 80073ac:	441a      	add	r2, r3
 80073ae:	4499      	add	r9, r3
 80073b0:	441f      	add	r7, r3
 80073b2:	9209      	str	r2, [sp, #36]	; 0x24
 80073b4:	e779      	b.n	80072aa <_dtoa_r+0x802>
 80073b6:	4603      	mov	r3, r0
 80073b8:	e7f6      	b.n	80073a8 <_dtoa_r+0x900>
 80073ba:	9b08      	ldr	r3, [sp, #32]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dc34      	bgt.n	800742a <_dtoa_r+0x982>
 80073c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	dd31      	ble.n	800742a <_dtoa_r+0x982>
 80073c6:	9b08      	ldr	r3, [sp, #32]
 80073c8:	9306      	str	r3, [sp, #24]
 80073ca:	9b06      	ldr	r3, [sp, #24]
 80073cc:	b963      	cbnz	r3, 80073e8 <_dtoa_r+0x940>
 80073ce:	4621      	mov	r1, r4
 80073d0:	2205      	movs	r2, #5
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 faaa 	bl	800792c <__multadd>
 80073d8:	4601      	mov	r1, r0
 80073da:	4604      	mov	r4, r0
 80073dc:	4650      	mov	r0, sl
 80073de:	f000 fcbd 	bl	8007d5c <__mcmp>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f73f adbf 	bgt.w	8006f66 <_dtoa_r+0x4be>
 80073e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073ea:	9f03      	ldr	r7, [sp, #12]
 80073ec:	ea6f 0b03 	mvn.w	fp, r3
 80073f0:	f04f 0800 	mov.w	r8, #0
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 fa76 	bl	80078e8 <_Bfree>
 80073fc:	2e00      	cmp	r6, #0
 80073fe:	f43f aead 	beq.w	800715c <_dtoa_r+0x6b4>
 8007402:	f1b8 0f00 	cmp.w	r8, #0
 8007406:	d005      	beq.n	8007414 <_dtoa_r+0x96c>
 8007408:	45b0      	cmp	r8, r6
 800740a:	d003      	beq.n	8007414 <_dtoa_r+0x96c>
 800740c:	4641      	mov	r1, r8
 800740e:	4628      	mov	r0, r5
 8007410:	f000 fa6a 	bl	80078e8 <_Bfree>
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	f000 fa66 	bl	80078e8 <_Bfree>
 800741c:	e69e      	b.n	800715c <_dtoa_r+0x6b4>
 800741e:	2400      	movs	r4, #0
 8007420:	4626      	mov	r6, r4
 8007422:	e7e1      	b.n	80073e8 <_dtoa_r+0x940>
 8007424:	46c3      	mov	fp, r8
 8007426:	4626      	mov	r6, r4
 8007428:	e59d      	b.n	8006f66 <_dtoa_r+0x4be>
 800742a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80c8 	beq.w	80075c2 <_dtoa_r+0xb1a>
 8007432:	9b08      	ldr	r3, [sp, #32]
 8007434:	9306      	str	r3, [sp, #24]
 8007436:	2f00      	cmp	r7, #0
 8007438:	dd05      	ble.n	8007446 <_dtoa_r+0x99e>
 800743a:	4631      	mov	r1, r6
 800743c:	463a      	mov	r2, r7
 800743e:	4628      	mov	r0, r5
 8007440:	f000 fc20 	bl	8007c84 <__lshift>
 8007444:	4606      	mov	r6, r0
 8007446:	f1b8 0f00 	cmp.w	r8, #0
 800744a:	d05b      	beq.n	8007504 <_dtoa_r+0xa5c>
 800744c:	4628      	mov	r0, r5
 800744e:	6871      	ldr	r1, [r6, #4]
 8007450:	f000 fa0a 	bl	8007868 <_Balloc>
 8007454:	4607      	mov	r7, r0
 8007456:	b928      	cbnz	r0, 8007464 <_dtoa_r+0x9bc>
 8007458:	4602      	mov	r2, r0
 800745a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800745e:	4b81      	ldr	r3, [pc, #516]	; (8007664 <_dtoa_r+0xbbc>)
 8007460:	f7ff bb36 	b.w	8006ad0 <_dtoa_r+0x28>
 8007464:	6932      	ldr	r2, [r6, #16]
 8007466:	f106 010c 	add.w	r1, r6, #12
 800746a:	3202      	adds	r2, #2
 800746c:	0092      	lsls	r2, r2, #2
 800746e:	300c      	adds	r0, #12
 8007470:	f7ff fa83 	bl	800697a <memcpy>
 8007474:	2201      	movs	r2, #1
 8007476:	4639      	mov	r1, r7
 8007478:	4628      	mov	r0, r5
 800747a:	f000 fc03 	bl	8007c84 <__lshift>
 800747e:	46b0      	mov	r8, r6
 8007480:	4606      	mov	r6, r0
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	9a03      	ldr	r2, [sp, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	4413      	add	r3, r2
 800748e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007490:	9b04      	ldr	r3, [sp, #16]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	930a      	str	r3, [sp, #40]	; 0x28
 8007498:	9b08      	ldr	r3, [sp, #32]
 800749a:	4621      	mov	r1, r4
 800749c:	3b01      	subs	r3, #1
 800749e:	4650      	mov	r0, sl
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	f7ff fa78 	bl	8006996 <quorem>
 80074a6:	4641      	mov	r1, r8
 80074a8:	9006      	str	r0, [sp, #24]
 80074aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074ae:	4650      	mov	r0, sl
 80074b0:	f000 fc54 	bl	8007d5c <__mcmp>
 80074b4:	4632      	mov	r2, r6
 80074b6:	9009      	str	r0, [sp, #36]	; 0x24
 80074b8:	4621      	mov	r1, r4
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 fc6a 	bl	8007d94 <__mdiff>
 80074c0:	68c2      	ldr	r2, [r0, #12]
 80074c2:	4607      	mov	r7, r0
 80074c4:	bb02      	cbnz	r2, 8007508 <_dtoa_r+0xa60>
 80074c6:	4601      	mov	r1, r0
 80074c8:	4650      	mov	r0, sl
 80074ca:	f000 fc47 	bl	8007d5c <__mcmp>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4639      	mov	r1, r7
 80074d2:	4628      	mov	r0, r5
 80074d4:	920c      	str	r2, [sp, #48]	; 0x30
 80074d6:	f000 fa07 	bl	80078e8 <_Bfree>
 80074da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074de:	9f08      	ldr	r7, [sp, #32]
 80074e0:	ea43 0102 	orr.w	r1, r3, r2
 80074e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e6:	4319      	orrs	r1, r3
 80074e8:	d110      	bne.n	800750c <_dtoa_r+0xa64>
 80074ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074ee:	d029      	beq.n	8007544 <_dtoa_r+0xa9c>
 80074f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dd02      	ble.n	80074fc <_dtoa_r+0xa54>
 80074f6:	9b06      	ldr	r3, [sp, #24]
 80074f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	f883 9000 	strb.w	r9, [r3]
 8007502:	e777      	b.n	80073f4 <_dtoa_r+0x94c>
 8007504:	4630      	mov	r0, r6
 8007506:	e7ba      	b.n	800747e <_dtoa_r+0x9d6>
 8007508:	2201      	movs	r2, #1
 800750a:	e7e1      	b.n	80074d0 <_dtoa_r+0xa28>
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	db04      	blt.n	800751c <_dtoa_r+0xa74>
 8007512:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007514:	430b      	orrs	r3, r1
 8007516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007518:	430b      	orrs	r3, r1
 800751a:	d120      	bne.n	800755e <_dtoa_r+0xab6>
 800751c:	2a00      	cmp	r2, #0
 800751e:	dded      	ble.n	80074fc <_dtoa_r+0xa54>
 8007520:	4651      	mov	r1, sl
 8007522:	2201      	movs	r2, #1
 8007524:	4628      	mov	r0, r5
 8007526:	f000 fbad 	bl	8007c84 <__lshift>
 800752a:	4621      	mov	r1, r4
 800752c:	4682      	mov	sl, r0
 800752e:	f000 fc15 	bl	8007d5c <__mcmp>
 8007532:	2800      	cmp	r0, #0
 8007534:	dc03      	bgt.n	800753e <_dtoa_r+0xa96>
 8007536:	d1e1      	bne.n	80074fc <_dtoa_r+0xa54>
 8007538:	f019 0f01 	tst.w	r9, #1
 800753c:	d0de      	beq.n	80074fc <_dtoa_r+0xa54>
 800753e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007542:	d1d8      	bne.n	80074f6 <_dtoa_r+0xa4e>
 8007544:	2339      	movs	r3, #57	; 0x39
 8007546:	9a04      	ldr	r2, [sp, #16]
 8007548:	7013      	strb	r3, [r2, #0]
 800754a:	463b      	mov	r3, r7
 800754c:	461f      	mov	r7, r3
 800754e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007552:	3b01      	subs	r3, #1
 8007554:	2a39      	cmp	r2, #57	; 0x39
 8007556:	d06b      	beq.n	8007630 <_dtoa_r+0xb88>
 8007558:	3201      	adds	r2, #1
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	e74a      	b.n	80073f4 <_dtoa_r+0x94c>
 800755e:	2a00      	cmp	r2, #0
 8007560:	dd07      	ble.n	8007572 <_dtoa_r+0xaca>
 8007562:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007566:	d0ed      	beq.n	8007544 <_dtoa_r+0xa9c>
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	f109 0301 	add.w	r3, r9, #1
 800756e:	7013      	strb	r3, [r2, #0]
 8007570:	e740      	b.n	80073f4 <_dtoa_r+0x94c>
 8007572:	9b08      	ldr	r3, [sp, #32]
 8007574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007576:	f803 9c01 	strb.w	r9, [r3, #-1]
 800757a:	4293      	cmp	r3, r2
 800757c:	d042      	beq.n	8007604 <_dtoa_r+0xb5c>
 800757e:	4651      	mov	r1, sl
 8007580:	2300      	movs	r3, #0
 8007582:	220a      	movs	r2, #10
 8007584:	4628      	mov	r0, r5
 8007586:	f000 f9d1 	bl	800792c <__multadd>
 800758a:	45b0      	cmp	r8, r6
 800758c:	4682      	mov	sl, r0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	f04f 020a 	mov.w	r2, #10
 8007596:	4641      	mov	r1, r8
 8007598:	4628      	mov	r0, r5
 800759a:	d107      	bne.n	80075ac <_dtoa_r+0xb04>
 800759c:	f000 f9c6 	bl	800792c <__multadd>
 80075a0:	4680      	mov	r8, r0
 80075a2:	4606      	mov	r6, r0
 80075a4:	9b08      	ldr	r3, [sp, #32]
 80075a6:	3301      	adds	r3, #1
 80075a8:	9308      	str	r3, [sp, #32]
 80075aa:	e775      	b.n	8007498 <_dtoa_r+0x9f0>
 80075ac:	f000 f9be 	bl	800792c <__multadd>
 80075b0:	4631      	mov	r1, r6
 80075b2:	4680      	mov	r8, r0
 80075b4:	2300      	movs	r3, #0
 80075b6:	220a      	movs	r2, #10
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 f9b7 	bl	800792c <__multadd>
 80075be:	4606      	mov	r6, r0
 80075c0:	e7f0      	b.n	80075a4 <_dtoa_r+0xafc>
 80075c2:	9b08      	ldr	r3, [sp, #32]
 80075c4:	9306      	str	r3, [sp, #24]
 80075c6:	9f03      	ldr	r7, [sp, #12]
 80075c8:	4621      	mov	r1, r4
 80075ca:	4650      	mov	r0, sl
 80075cc:	f7ff f9e3 	bl	8006996 <quorem>
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80075d6:	f807 9b01 	strb.w	r9, [r7], #1
 80075da:	1afa      	subs	r2, r7, r3
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	4293      	cmp	r3, r2
 80075e0:	dd07      	ble.n	80075f2 <_dtoa_r+0xb4a>
 80075e2:	4651      	mov	r1, sl
 80075e4:	2300      	movs	r3, #0
 80075e6:	220a      	movs	r2, #10
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 f99f 	bl	800792c <__multadd>
 80075ee:	4682      	mov	sl, r0
 80075f0:	e7ea      	b.n	80075c8 <_dtoa_r+0xb20>
 80075f2:	9b06      	ldr	r3, [sp, #24]
 80075f4:	f04f 0800 	mov.w	r8, #0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bfcc      	ite	gt
 80075fc:	461f      	movgt	r7, r3
 80075fe:	2701      	movle	r7, #1
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	441f      	add	r7, r3
 8007604:	4651      	mov	r1, sl
 8007606:	2201      	movs	r2, #1
 8007608:	4628      	mov	r0, r5
 800760a:	f000 fb3b 	bl	8007c84 <__lshift>
 800760e:	4621      	mov	r1, r4
 8007610:	4682      	mov	sl, r0
 8007612:	f000 fba3 	bl	8007d5c <__mcmp>
 8007616:	2800      	cmp	r0, #0
 8007618:	dc97      	bgt.n	800754a <_dtoa_r+0xaa2>
 800761a:	d102      	bne.n	8007622 <_dtoa_r+0xb7a>
 800761c:	f019 0f01 	tst.w	r9, #1
 8007620:	d193      	bne.n	800754a <_dtoa_r+0xaa2>
 8007622:	463b      	mov	r3, r7
 8007624:	461f      	mov	r7, r3
 8007626:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800762a:	2a30      	cmp	r2, #48	; 0x30
 800762c:	d0fa      	beq.n	8007624 <_dtoa_r+0xb7c>
 800762e:	e6e1      	b.n	80073f4 <_dtoa_r+0x94c>
 8007630:	9a03      	ldr	r2, [sp, #12]
 8007632:	429a      	cmp	r2, r3
 8007634:	d18a      	bne.n	800754c <_dtoa_r+0xaa4>
 8007636:	2331      	movs	r3, #49	; 0x31
 8007638:	f10b 0b01 	add.w	fp, fp, #1
 800763c:	e797      	b.n	800756e <_dtoa_r+0xac6>
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <_dtoa_r+0xbc0>)
 8007640:	f7ff ba9f 	b.w	8006b82 <_dtoa_r+0xda>
 8007644:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007646:	2b00      	cmp	r3, #0
 8007648:	f47f aa77 	bne.w	8006b3a <_dtoa_r+0x92>
 800764c:	4b07      	ldr	r3, [pc, #28]	; (800766c <_dtoa_r+0xbc4>)
 800764e:	f7ff ba98 	b.w	8006b82 <_dtoa_r+0xda>
 8007652:	9b06      	ldr	r3, [sp, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dcb6      	bgt.n	80075c6 <_dtoa_r+0xb1e>
 8007658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800765a:	2b02      	cmp	r3, #2
 800765c:	f73f aeb5 	bgt.w	80073ca <_dtoa_r+0x922>
 8007660:	e7b1      	b.n	80075c6 <_dtoa_r+0xb1e>
 8007662:	bf00      	nop
 8007664:	08008f3a 	.word	0x08008f3a
 8007668:	08008e9a 	.word	0x08008e9a
 800766c:	08008ebe 	.word	0x08008ebe

08007670 <_free_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4605      	mov	r5, r0
 8007674:	2900      	cmp	r1, #0
 8007676:	d040      	beq.n	80076fa <_free_r+0x8a>
 8007678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800767c:	1f0c      	subs	r4, r1, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfb8      	it	lt
 8007682:	18e4      	addlt	r4, r4, r3
 8007684:	f000 f8e4 	bl	8007850 <__malloc_lock>
 8007688:	4a1c      	ldr	r2, [pc, #112]	; (80076fc <_free_r+0x8c>)
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	b933      	cbnz	r3, 800769c <_free_r+0x2c>
 800768e:	6063      	str	r3, [r4, #4]
 8007690:	6014      	str	r4, [r2, #0]
 8007692:	4628      	mov	r0, r5
 8007694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007698:	f000 b8e0 	b.w	800785c <__malloc_unlock>
 800769c:	42a3      	cmp	r3, r4
 800769e:	d908      	bls.n	80076b2 <_free_r+0x42>
 80076a0:	6820      	ldr	r0, [r4, #0]
 80076a2:	1821      	adds	r1, r4, r0
 80076a4:	428b      	cmp	r3, r1
 80076a6:	bf01      	itttt	eq
 80076a8:	6819      	ldreq	r1, [r3, #0]
 80076aa:	685b      	ldreq	r3, [r3, #4]
 80076ac:	1809      	addeq	r1, r1, r0
 80076ae:	6021      	streq	r1, [r4, #0]
 80076b0:	e7ed      	b.n	800768e <_free_r+0x1e>
 80076b2:	461a      	mov	r2, r3
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	b10b      	cbz	r3, 80076bc <_free_r+0x4c>
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	d9fa      	bls.n	80076b2 <_free_r+0x42>
 80076bc:	6811      	ldr	r1, [r2, #0]
 80076be:	1850      	adds	r0, r2, r1
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d10b      	bne.n	80076dc <_free_r+0x6c>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	4401      	add	r1, r0
 80076c8:	1850      	adds	r0, r2, r1
 80076ca:	4283      	cmp	r3, r0
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	d1e0      	bne.n	8007692 <_free_r+0x22>
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4408      	add	r0, r1
 80076d6:	6010      	str	r0, [r2, #0]
 80076d8:	6053      	str	r3, [r2, #4]
 80076da:	e7da      	b.n	8007692 <_free_r+0x22>
 80076dc:	d902      	bls.n	80076e4 <_free_r+0x74>
 80076de:	230c      	movs	r3, #12
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	e7d6      	b.n	8007692 <_free_r+0x22>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	1821      	adds	r1, r4, r0
 80076e8:	428b      	cmp	r3, r1
 80076ea:	bf01      	itttt	eq
 80076ec:	6819      	ldreq	r1, [r3, #0]
 80076ee:	685b      	ldreq	r3, [r3, #4]
 80076f0:	1809      	addeq	r1, r1, r0
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	6063      	str	r3, [r4, #4]
 80076f6:	6054      	str	r4, [r2, #4]
 80076f8:	e7cb      	b.n	8007692 <_free_r+0x22>
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	20000904 	.word	0x20000904

08007700 <malloc>:
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <malloc+0xc>)
 8007702:	4601      	mov	r1, r0
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	f000 b823 	b.w	8007750 <_malloc_r>
 800770a:	bf00      	nop
 800770c:	20000080 	.word	0x20000080

08007710 <sbrk_aligned>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	4e0e      	ldr	r6, [pc, #56]	; (800774c <sbrk_aligned+0x3c>)
 8007714:	460c      	mov	r4, r1
 8007716:	6831      	ldr	r1, [r6, #0]
 8007718:	4605      	mov	r5, r0
 800771a:	b911      	cbnz	r1, 8007722 <sbrk_aligned+0x12>
 800771c:	f000 fd4a 	bl	80081b4 <_sbrk_r>
 8007720:	6030      	str	r0, [r6, #0]
 8007722:	4621      	mov	r1, r4
 8007724:	4628      	mov	r0, r5
 8007726:	f000 fd45 	bl	80081b4 <_sbrk_r>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d00a      	beq.n	8007744 <sbrk_aligned+0x34>
 800772e:	1cc4      	adds	r4, r0, #3
 8007730:	f024 0403 	bic.w	r4, r4, #3
 8007734:	42a0      	cmp	r0, r4
 8007736:	d007      	beq.n	8007748 <sbrk_aligned+0x38>
 8007738:	1a21      	subs	r1, r4, r0
 800773a:	4628      	mov	r0, r5
 800773c:	f000 fd3a 	bl	80081b4 <_sbrk_r>
 8007740:	3001      	adds	r0, #1
 8007742:	d101      	bne.n	8007748 <sbrk_aligned+0x38>
 8007744:	f04f 34ff 	mov.w	r4, #4294967295
 8007748:	4620      	mov	r0, r4
 800774a:	bd70      	pop	{r4, r5, r6, pc}
 800774c:	20000908 	.word	0x20000908

08007750 <_malloc_r>:
 8007750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007754:	1ccd      	adds	r5, r1, #3
 8007756:	f025 0503 	bic.w	r5, r5, #3
 800775a:	3508      	adds	r5, #8
 800775c:	2d0c      	cmp	r5, #12
 800775e:	bf38      	it	cc
 8007760:	250c      	movcc	r5, #12
 8007762:	2d00      	cmp	r5, #0
 8007764:	4607      	mov	r7, r0
 8007766:	db01      	blt.n	800776c <_malloc_r+0x1c>
 8007768:	42a9      	cmp	r1, r5
 800776a:	d905      	bls.n	8007778 <_malloc_r+0x28>
 800776c:	230c      	movs	r3, #12
 800776e:	2600      	movs	r6, #0
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	4630      	mov	r0, r6
 8007774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800784c <_malloc_r+0xfc>
 800777c:	f000 f868 	bl	8007850 <__malloc_lock>
 8007780:	f8d8 3000 	ldr.w	r3, [r8]
 8007784:	461c      	mov	r4, r3
 8007786:	bb5c      	cbnz	r4, 80077e0 <_malloc_r+0x90>
 8007788:	4629      	mov	r1, r5
 800778a:	4638      	mov	r0, r7
 800778c:	f7ff ffc0 	bl	8007710 <sbrk_aligned>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	4604      	mov	r4, r0
 8007794:	d155      	bne.n	8007842 <_malloc_r+0xf2>
 8007796:	f8d8 4000 	ldr.w	r4, [r8]
 800779a:	4626      	mov	r6, r4
 800779c:	2e00      	cmp	r6, #0
 800779e:	d145      	bne.n	800782c <_malloc_r+0xdc>
 80077a0:	2c00      	cmp	r4, #0
 80077a2:	d048      	beq.n	8007836 <_malloc_r+0xe6>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	4631      	mov	r1, r6
 80077a8:	4638      	mov	r0, r7
 80077aa:	eb04 0903 	add.w	r9, r4, r3
 80077ae:	f000 fd01 	bl	80081b4 <_sbrk_r>
 80077b2:	4581      	cmp	r9, r0
 80077b4:	d13f      	bne.n	8007836 <_malloc_r+0xe6>
 80077b6:	6821      	ldr	r1, [r4, #0]
 80077b8:	4638      	mov	r0, r7
 80077ba:	1a6d      	subs	r5, r5, r1
 80077bc:	4629      	mov	r1, r5
 80077be:	f7ff ffa7 	bl	8007710 <sbrk_aligned>
 80077c2:	3001      	adds	r0, #1
 80077c4:	d037      	beq.n	8007836 <_malloc_r+0xe6>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	442b      	add	r3, r5
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	f8d8 3000 	ldr.w	r3, [r8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d038      	beq.n	8007846 <_malloc_r+0xf6>
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	42a2      	cmp	r2, r4
 80077d8:	d12b      	bne.n	8007832 <_malloc_r+0xe2>
 80077da:	2200      	movs	r2, #0
 80077dc:	605a      	str	r2, [r3, #4]
 80077de:	e00f      	b.n	8007800 <_malloc_r+0xb0>
 80077e0:	6822      	ldr	r2, [r4, #0]
 80077e2:	1b52      	subs	r2, r2, r5
 80077e4:	d41f      	bmi.n	8007826 <_malloc_r+0xd6>
 80077e6:	2a0b      	cmp	r2, #11
 80077e8:	d917      	bls.n	800781a <_malloc_r+0xca>
 80077ea:	1961      	adds	r1, r4, r5
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	6025      	str	r5, [r4, #0]
 80077f0:	bf18      	it	ne
 80077f2:	6059      	strne	r1, [r3, #4]
 80077f4:	6863      	ldr	r3, [r4, #4]
 80077f6:	bf08      	it	eq
 80077f8:	f8c8 1000 	streq.w	r1, [r8]
 80077fc:	5162      	str	r2, [r4, r5]
 80077fe:	604b      	str	r3, [r1, #4]
 8007800:	4638      	mov	r0, r7
 8007802:	f104 060b 	add.w	r6, r4, #11
 8007806:	f000 f829 	bl	800785c <__malloc_unlock>
 800780a:	f026 0607 	bic.w	r6, r6, #7
 800780e:	1d23      	adds	r3, r4, #4
 8007810:	1af2      	subs	r2, r6, r3
 8007812:	d0ae      	beq.n	8007772 <_malloc_r+0x22>
 8007814:	1b9b      	subs	r3, r3, r6
 8007816:	50a3      	str	r3, [r4, r2]
 8007818:	e7ab      	b.n	8007772 <_malloc_r+0x22>
 800781a:	42a3      	cmp	r3, r4
 800781c:	6862      	ldr	r2, [r4, #4]
 800781e:	d1dd      	bne.n	80077dc <_malloc_r+0x8c>
 8007820:	f8c8 2000 	str.w	r2, [r8]
 8007824:	e7ec      	b.n	8007800 <_malloc_r+0xb0>
 8007826:	4623      	mov	r3, r4
 8007828:	6864      	ldr	r4, [r4, #4]
 800782a:	e7ac      	b.n	8007786 <_malloc_r+0x36>
 800782c:	4634      	mov	r4, r6
 800782e:	6876      	ldr	r6, [r6, #4]
 8007830:	e7b4      	b.n	800779c <_malloc_r+0x4c>
 8007832:	4613      	mov	r3, r2
 8007834:	e7cc      	b.n	80077d0 <_malloc_r+0x80>
 8007836:	230c      	movs	r3, #12
 8007838:	4638      	mov	r0, r7
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	f000 f80e 	bl	800785c <__malloc_unlock>
 8007840:	e797      	b.n	8007772 <_malloc_r+0x22>
 8007842:	6025      	str	r5, [r4, #0]
 8007844:	e7dc      	b.n	8007800 <_malloc_r+0xb0>
 8007846:	605b      	str	r3, [r3, #4]
 8007848:	deff      	udf	#255	; 0xff
 800784a:	bf00      	nop
 800784c:	20000904 	.word	0x20000904

08007850 <__malloc_lock>:
 8007850:	4801      	ldr	r0, [pc, #4]	; (8007858 <__malloc_lock+0x8>)
 8007852:	f7ff b882 	b.w	800695a <__retarget_lock_acquire_recursive>
 8007856:	bf00      	nop
 8007858:	20000900 	.word	0x20000900

0800785c <__malloc_unlock>:
 800785c:	4801      	ldr	r0, [pc, #4]	; (8007864 <__malloc_unlock+0x8>)
 800785e:	f7ff b87d 	b.w	800695c <__retarget_lock_release_recursive>
 8007862:	bf00      	nop
 8007864:	20000900 	.word	0x20000900

08007868 <_Balloc>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	69c6      	ldr	r6, [r0, #28]
 800786c:	4604      	mov	r4, r0
 800786e:	460d      	mov	r5, r1
 8007870:	b976      	cbnz	r6, 8007890 <_Balloc+0x28>
 8007872:	2010      	movs	r0, #16
 8007874:	f7ff ff44 	bl	8007700 <malloc>
 8007878:	4602      	mov	r2, r0
 800787a:	61e0      	str	r0, [r4, #28]
 800787c:	b920      	cbnz	r0, 8007888 <_Balloc+0x20>
 800787e:	216b      	movs	r1, #107	; 0x6b
 8007880:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <_Balloc+0x78>)
 8007882:	4818      	ldr	r0, [pc, #96]	; (80078e4 <_Balloc+0x7c>)
 8007884:	f000 fca6 	bl	80081d4 <__assert_func>
 8007888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800788c:	6006      	str	r6, [r0, #0]
 800788e:	60c6      	str	r6, [r0, #12]
 8007890:	69e6      	ldr	r6, [r4, #28]
 8007892:	68f3      	ldr	r3, [r6, #12]
 8007894:	b183      	cbz	r3, 80078b8 <_Balloc+0x50>
 8007896:	69e3      	ldr	r3, [r4, #28]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800789e:	b9b8      	cbnz	r0, 80078d0 <_Balloc+0x68>
 80078a0:	2101      	movs	r1, #1
 80078a2:	fa01 f605 	lsl.w	r6, r1, r5
 80078a6:	1d72      	adds	r2, r6, #5
 80078a8:	4620      	mov	r0, r4
 80078aa:	0092      	lsls	r2, r2, #2
 80078ac:	f000 fcb0 	bl	8008210 <_calloc_r>
 80078b0:	b160      	cbz	r0, 80078cc <_Balloc+0x64>
 80078b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078b6:	e00e      	b.n	80078d6 <_Balloc+0x6e>
 80078b8:	2221      	movs	r2, #33	; 0x21
 80078ba:	2104      	movs	r1, #4
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 fca7 	bl	8008210 <_calloc_r>
 80078c2:	69e3      	ldr	r3, [r4, #28]
 80078c4:	60f0      	str	r0, [r6, #12]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e4      	bne.n	8007896 <_Balloc+0x2e>
 80078cc:	2000      	movs	r0, #0
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	6802      	ldr	r2, [r0, #0]
 80078d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078d6:	2300      	movs	r3, #0
 80078d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078dc:	e7f7      	b.n	80078ce <_Balloc+0x66>
 80078de:	bf00      	nop
 80078e0:	08008ecb 	.word	0x08008ecb
 80078e4:	08008f4b 	.word	0x08008f4b

080078e8 <_Bfree>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	69c6      	ldr	r6, [r0, #28]
 80078ec:	4605      	mov	r5, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	b976      	cbnz	r6, 8007910 <_Bfree+0x28>
 80078f2:	2010      	movs	r0, #16
 80078f4:	f7ff ff04 	bl	8007700 <malloc>
 80078f8:	4602      	mov	r2, r0
 80078fa:	61e8      	str	r0, [r5, #28]
 80078fc:	b920      	cbnz	r0, 8007908 <_Bfree+0x20>
 80078fe:	218f      	movs	r1, #143	; 0x8f
 8007900:	4b08      	ldr	r3, [pc, #32]	; (8007924 <_Bfree+0x3c>)
 8007902:	4809      	ldr	r0, [pc, #36]	; (8007928 <_Bfree+0x40>)
 8007904:	f000 fc66 	bl	80081d4 <__assert_func>
 8007908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800790c:	6006      	str	r6, [r0, #0]
 800790e:	60c6      	str	r6, [r0, #12]
 8007910:	b13c      	cbz	r4, 8007922 <_Bfree+0x3a>
 8007912:	69eb      	ldr	r3, [r5, #28]
 8007914:	6862      	ldr	r2, [r4, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800791c:	6021      	str	r1, [r4, #0]
 800791e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	08008ecb 	.word	0x08008ecb
 8007928:	08008f4b 	.word	0x08008f4b

0800792c <__multadd>:
 800792c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007930:	4607      	mov	r7, r0
 8007932:	460c      	mov	r4, r1
 8007934:	461e      	mov	r6, r3
 8007936:	2000      	movs	r0, #0
 8007938:	690d      	ldr	r5, [r1, #16]
 800793a:	f101 0c14 	add.w	ip, r1, #20
 800793e:	f8dc 3000 	ldr.w	r3, [ip]
 8007942:	3001      	adds	r0, #1
 8007944:	b299      	uxth	r1, r3
 8007946:	fb02 6101 	mla	r1, r2, r1, r6
 800794a:	0c1e      	lsrs	r6, r3, #16
 800794c:	0c0b      	lsrs	r3, r1, #16
 800794e:	fb02 3306 	mla	r3, r2, r6, r3
 8007952:	b289      	uxth	r1, r1
 8007954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007958:	4285      	cmp	r5, r0
 800795a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800795e:	f84c 1b04 	str.w	r1, [ip], #4
 8007962:	dcec      	bgt.n	800793e <__multadd+0x12>
 8007964:	b30e      	cbz	r6, 80079aa <__multadd+0x7e>
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	42ab      	cmp	r3, r5
 800796a:	dc19      	bgt.n	80079a0 <__multadd+0x74>
 800796c:	6861      	ldr	r1, [r4, #4]
 800796e:	4638      	mov	r0, r7
 8007970:	3101      	adds	r1, #1
 8007972:	f7ff ff79 	bl	8007868 <_Balloc>
 8007976:	4680      	mov	r8, r0
 8007978:	b928      	cbnz	r0, 8007986 <__multadd+0x5a>
 800797a:	4602      	mov	r2, r0
 800797c:	21ba      	movs	r1, #186	; 0xba
 800797e:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <__multadd+0x84>)
 8007980:	480c      	ldr	r0, [pc, #48]	; (80079b4 <__multadd+0x88>)
 8007982:	f000 fc27 	bl	80081d4 <__assert_func>
 8007986:	6922      	ldr	r2, [r4, #16]
 8007988:	f104 010c 	add.w	r1, r4, #12
 800798c:	3202      	adds	r2, #2
 800798e:	0092      	lsls	r2, r2, #2
 8007990:	300c      	adds	r0, #12
 8007992:	f7fe fff2 	bl	800697a <memcpy>
 8007996:	4621      	mov	r1, r4
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff ffa5 	bl	80078e8 <_Bfree>
 800799e:	4644      	mov	r4, r8
 80079a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079a4:	3501      	adds	r5, #1
 80079a6:	615e      	str	r6, [r3, #20]
 80079a8:	6125      	str	r5, [r4, #16]
 80079aa:	4620      	mov	r0, r4
 80079ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b0:	08008f3a 	.word	0x08008f3a
 80079b4:	08008f4b 	.word	0x08008f4b

080079b8 <__hi0bits>:
 80079b8:	0c02      	lsrs	r2, r0, #16
 80079ba:	0412      	lsls	r2, r2, #16
 80079bc:	4603      	mov	r3, r0
 80079be:	b9ca      	cbnz	r2, 80079f4 <__hi0bits+0x3c>
 80079c0:	0403      	lsls	r3, r0, #16
 80079c2:	2010      	movs	r0, #16
 80079c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80079c8:	bf04      	itt	eq
 80079ca:	021b      	lsleq	r3, r3, #8
 80079cc:	3008      	addeq	r0, #8
 80079ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80079d2:	bf04      	itt	eq
 80079d4:	011b      	lsleq	r3, r3, #4
 80079d6:	3004      	addeq	r0, #4
 80079d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80079dc:	bf04      	itt	eq
 80079de:	009b      	lsleq	r3, r3, #2
 80079e0:	3002      	addeq	r0, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	db05      	blt.n	80079f2 <__hi0bits+0x3a>
 80079e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80079ea:	f100 0001 	add.w	r0, r0, #1
 80079ee:	bf08      	it	eq
 80079f0:	2020      	moveq	r0, #32
 80079f2:	4770      	bx	lr
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7e5      	b.n	80079c4 <__hi0bits+0xc>

080079f8 <__lo0bits>:
 80079f8:	6803      	ldr	r3, [r0, #0]
 80079fa:	4602      	mov	r2, r0
 80079fc:	f013 0007 	ands.w	r0, r3, #7
 8007a00:	d00b      	beq.n	8007a1a <__lo0bits+0x22>
 8007a02:	07d9      	lsls	r1, r3, #31
 8007a04:	d421      	bmi.n	8007a4a <__lo0bits+0x52>
 8007a06:	0798      	lsls	r0, r3, #30
 8007a08:	bf49      	itett	mi
 8007a0a:	085b      	lsrmi	r3, r3, #1
 8007a0c:	089b      	lsrpl	r3, r3, #2
 8007a0e:	2001      	movmi	r0, #1
 8007a10:	6013      	strmi	r3, [r2, #0]
 8007a12:	bf5c      	itt	pl
 8007a14:	2002      	movpl	r0, #2
 8007a16:	6013      	strpl	r3, [r2, #0]
 8007a18:	4770      	bx	lr
 8007a1a:	b299      	uxth	r1, r3
 8007a1c:	b909      	cbnz	r1, 8007a22 <__lo0bits+0x2a>
 8007a1e:	2010      	movs	r0, #16
 8007a20:	0c1b      	lsrs	r3, r3, #16
 8007a22:	b2d9      	uxtb	r1, r3
 8007a24:	b909      	cbnz	r1, 8007a2a <__lo0bits+0x32>
 8007a26:	3008      	adds	r0, #8
 8007a28:	0a1b      	lsrs	r3, r3, #8
 8007a2a:	0719      	lsls	r1, r3, #28
 8007a2c:	bf04      	itt	eq
 8007a2e:	091b      	lsreq	r3, r3, #4
 8007a30:	3004      	addeq	r0, #4
 8007a32:	0799      	lsls	r1, r3, #30
 8007a34:	bf04      	itt	eq
 8007a36:	089b      	lsreq	r3, r3, #2
 8007a38:	3002      	addeq	r0, #2
 8007a3a:	07d9      	lsls	r1, r3, #31
 8007a3c:	d403      	bmi.n	8007a46 <__lo0bits+0x4e>
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	f100 0001 	add.w	r0, r0, #1
 8007a44:	d003      	beq.n	8007a4e <__lo0bits+0x56>
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	4770      	bx	lr
 8007a4e:	2020      	movs	r0, #32
 8007a50:	4770      	bx	lr
	...

08007a54 <__i2b>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	460c      	mov	r4, r1
 8007a58:	2101      	movs	r1, #1
 8007a5a:	f7ff ff05 	bl	8007868 <_Balloc>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	b928      	cbnz	r0, 8007a6e <__i2b+0x1a>
 8007a62:	f240 1145 	movw	r1, #325	; 0x145
 8007a66:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <__i2b+0x24>)
 8007a68:	4804      	ldr	r0, [pc, #16]	; (8007a7c <__i2b+0x28>)
 8007a6a:	f000 fbb3 	bl	80081d4 <__assert_func>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	6144      	str	r4, [r0, #20]
 8007a72:	6103      	str	r3, [r0, #16]
 8007a74:	bd10      	pop	{r4, pc}
 8007a76:	bf00      	nop
 8007a78:	08008f3a 	.word	0x08008f3a
 8007a7c:	08008f4b 	.word	0x08008f4b

08007a80 <__multiply>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	4691      	mov	r9, r2
 8007a86:	690a      	ldr	r2, [r1, #16]
 8007a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	bfbe      	ittt	lt
 8007a92:	460b      	movlt	r3, r1
 8007a94:	464c      	movlt	r4, r9
 8007a96:	4699      	movlt	r9, r3
 8007a98:	6927      	ldr	r7, [r4, #16]
 8007a9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a9e:	68a3      	ldr	r3, [r4, #8]
 8007aa0:	6861      	ldr	r1, [r4, #4]
 8007aa2:	eb07 060a 	add.w	r6, r7, sl
 8007aa6:	42b3      	cmp	r3, r6
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	bfb8      	it	lt
 8007aac:	3101      	addlt	r1, #1
 8007aae:	f7ff fedb 	bl	8007868 <_Balloc>
 8007ab2:	b930      	cbnz	r0, 8007ac2 <__multiply+0x42>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007aba:	4b43      	ldr	r3, [pc, #268]	; (8007bc8 <__multiply+0x148>)
 8007abc:	4843      	ldr	r0, [pc, #268]	; (8007bcc <__multiply+0x14c>)
 8007abe:	f000 fb89 	bl	80081d4 <__assert_func>
 8007ac2:	f100 0514 	add.w	r5, r0, #20
 8007ac6:	462b      	mov	r3, r5
 8007ac8:	2200      	movs	r2, #0
 8007aca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ace:	4543      	cmp	r3, r8
 8007ad0:	d321      	bcc.n	8007b16 <__multiply+0x96>
 8007ad2:	f104 0314 	add.w	r3, r4, #20
 8007ad6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ada:	f109 0314 	add.w	r3, r9, #20
 8007ade:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ae2:	9202      	str	r2, [sp, #8]
 8007ae4:	1b3a      	subs	r2, r7, r4
 8007ae6:	3a15      	subs	r2, #21
 8007ae8:	f022 0203 	bic.w	r2, r2, #3
 8007aec:	3204      	adds	r2, #4
 8007aee:	f104 0115 	add.w	r1, r4, #21
 8007af2:	428f      	cmp	r7, r1
 8007af4:	bf38      	it	cc
 8007af6:	2204      	movcc	r2, #4
 8007af8:	9201      	str	r2, [sp, #4]
 8007afa:	9a02      	ldr	r2, [sp, #8]
 8007afc:	9303      	str	r3, [sp, #12]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d80c      	bhi.n	8007b1c <__multiply+0x9c>
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	dd03      	ble.n	8007b0e <__multiply+0x8e>
 8007b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d05a      	beq.n	8007bc4 <__multiply+0x144>
 8007b0e:	6106      	str	r6, [r0, #16]
 8007b10:	b005      	add	sp, #20
 8007b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b16:	f843 2b04 	str.w	r2, [r3], #4
 8007b1a:	e7d8      	b.n	8007ace <__multiply+0x4e>
 8007b1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b20:	f1ba 0f00 	cmp.w	sl, #0
 8007b24:	d023      	beq.n	8007b6e <__multiply+0xee>
 8007b26:	46a9      	mov	r9, r5
 8007b28:	f04f 0c00 	mov.w	ip, #0
 8007b2c:	f104 0e14 	add.w	lr, r4, #20
 8007b30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b34:	f8d9 1000 	ldr.w	r1, [r9]
 8007b38:	fa1f fb82 	uxth.w	fp, r2
 8007b3c:	b289      	uxth	r1, r1
 8007b3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b42:	4461      	add	r1, ip
 8007b44:	f8d9 c000 	ldr.w	ip, [r9]
 8007b48:	0c12      	lsrs	r2, r2, #16
 8007b4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b4e:	fb0a c202 	mla	r2, sl, r2, ip
 8007b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b56:	b289      	uxth	r1, r1
 8007b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b5c:	4577      	cmp	r7, lr
 8007b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b62:	f849 1b04 	str.w	r1, [r9], #4
 8007b66:	d8e3      	bhi.n	8007b30 <__multiply+0xb0>
 8007b68:	9a01      	ldr	r2, [sp, #4]
 8007b6a:	f845 c002 	str.w	ip, [r5, r2]
 8007b6e:	9a03      	ldr	r2, [sp, #12]
 8007b70:	3304      	adds	r3, #4
 8007b72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b76:	f1b9 0f00 	cmp.w	r9, #0
 8007b7a:	d021      	beq.n	8007bc0 <__multiply+0x140>
 8007b7c:	46ae      	mov	lr, r5
 8007b7e:	f04f 0a00 	mov.w	sl, #0
 8007b82:	6829      	ldr	r1, [r5, #0]
 8007b84:	f104 0c14 	add.w	ip, r4, #20
 8007b88:	f8bc b000 	ldrh.w	fp, [ip]
 8007b8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b90:	b289      	uxth	r1, r1
 8007b92:	fb09 220b 	mla	r2, r9, fp, r2
 8007b96:	4452      	add	r2, sl
 8007b98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b9c:	f84e 1b04 	str.w	r1, [lr], #4
 8007ba0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ba8:	f8be 1000 	ldrh.w	r1, [lr]
 8007bac:	4567      	cmp	r7, ip
 8007bae:	fb09 110a 	mla	r1, r9, sl, r1
 8007bb2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007bb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bba:	d8e5      	bhi.n	8007b88 <__multiply+0x108>
 8007bbc:	9a01      	ldr	r2, [sp, #4]
 8007bbe:	50a9      	str	r1, [r5, r2]
 8007bc0:	3504      	adds	r5, #4
 8007bc2:	e79a      	b.n	8007afa <__multiply+0x7a>
 8007bc4:	3e01      	subs	r6, #1
 8007bc6:	e79c      	b.n	8007b02 <__multiply+0x82>
 8007bc8:	08008f3a 	.word	0x08008f3a
 8007bcc:	08008f4b 	.word	0x08008f4b

08007bd0 <__pow5mult>:
 8007bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd4:	4615      	mov	r5, r2
 8007bd6:	f012 0203 	ands.w	r2, r2, #3
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460f      	mov	r7, r1
 8007bde:	d007      	beq.n	8007bf0 <__pow5mult+0x20>
 8007be0:	4c25      	ldr	r4, [pc, #148]	; (8007c78 <__pow5mult+0xa8>)
 8007be2:	3a01      	subs	r2, #1
 8007be4:	2300      	movs	r3, #0
 8007be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bea:	f7ff fe9f 	bl	800792c <__multadd>
 8007bee:	4607      	mov	r7, r0
 8007bf0:	10ad      	asrs	r5, r5, #2
 8007bf2:	d03d      	beq.n	8007c70 <__pow5mult+0xa0>
 8007bf4:	69f4      	ldr	r4, [r6, #28]
 8007bf6:	b97c      	cbnz	r4, 8007c18 <__pow5mult+0x48>
 8007bf8:	2010      	movs	r0, #16
 8007bfa:	f7ff fd81 	bl	8007700 <malloc>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	61f0      	str	r0, [r6, #28]
 8007c02:	b928      	cbnz	r0, 8007c10 <__pow5mult+0x40>
 8007c04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c08:	4b1c      	ldr	r3, [pc, #112]	; (8007c7c <__pow5mult+0xac>)
 8007c0a:	481d      	ldr	r0, [pc, #116]	; (8007c80 <__pow5mult+0xb0>)
 8007c0c:	f000 fae2 	bl	80081d4 <__assert_func>
 8007c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c14:	6004      	str	r4, [r0, #0]
 8007c16:	60c4      	str	r4, [r0, #12]
 8007c18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c20:	b94c      	cbnz	r4, 8007c36 <__pow5mult+0x66>
 8007c22:	f240 2171 	movw	r1, #625	; 0x271
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7ff ff14 	bl	8007a54 <__i2b>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c34:	6003      	str	r3, [r0, #0]
 8007c36:	f04f 0900 	mov.w	r9, #0
 8007c3a:	07eb      	lsls	r3, r5, #31
 8007c3c:	d50a      	bpl.n	8007c54 <__pow5mult+0x84>
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4622      	mov	r2, r4
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff ff1c 	bl	8007a80 <__multiply>
 8007c48:	4680      	mov	r8, r0
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff fe4b 	bl	80078e8 <_Bfree>
 8007c52:	4647      	mov	r7, r8
 8007c54:	106d      	asrs	r5, r5, #1
 8007c56:	d00b      	beq.n	8007c70 <__pow5mult+0xa0>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	b938      	cbnz	r0, 8007c6c <__pow5mult+0x9c>
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff ff0d 	bl	8007a80 <__multiply>
 8007c66:	6020      	str	r0, [r4, #0]
 8007c68:	f8c0 9000 	str.w	r9, [r0]
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	e7e4      	b.n	8007c3a <__pow5mult+0x6a>
 8007c70:	4638      	mov	r0, r7
 8007c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c76:	bf00      	nop
 8007c78:	08009098 	.word	0x08009098
 8007c7c:	08008ecb 	.word	0x08008ecb
 8007c80:	08008f4b 	.word	0x08008f4b

08007c84 <__lshift>:
 8007c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	460c      	mov	r4, r1
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	4691      	mov	r9, r2
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	6849      	ldr	r1, [r1, #4]
 8007c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c9c:	f108 0601 	add.w	r6, r8, #1
 8007ca0:	42b3      	cmp	r3, r6
 8007ca2:	db0b      	blt.n	8007cbc <__lshift+0x38>
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff fddf 	bl	8007868 <_Balloc>
 8007caa:	4605      	mov	r5, r0
 8007cac:	b948      	cbnz	r0, 8007cc2 <__lshift+0x3e>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007cb4:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <__lshift+0xd0>)
 8007cb6:	4828      	ldr	r0, [pc, #160]	; (8007d58 <__lshift+0xd4>)
 8007cb8:	f000 fa8c 	bl	80081d4 <__assert_func>
 8007cbc:	3101      	adds	r1, #1
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	e7ee      	b.n	8007ca0 <__lshift+0x1c>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f100 0114 	add.w	r1, r0, #20
 8007cc8:	f100 0210 	add.w	r2, r0, #16
 8007ccc:	4618      	mov	r0, r3
 8007cce:	4553      	cmp	r3, sl
 8007cd0:	db33      	blt.n	8007d3a <__lshift+0xb6>
 8007cd2:	6920      	ldr	r0, [r4, #16]
 8007cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cd8:	f104 0314 	add.w	r3, r4, #20
 8007cdc:	f019 091f 	ands.w	r9, r9, #31
 8007ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ce8:	d02b      	beq.n	8007d42 <__lshift+0xbe>
 8007cea:	468a      	mov	sl, r1
 8007cec:	2200      	movs	r2, #0
 8007cee:	f1c9 0e20 	rsb	lr, r9, #32
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	fa00 f009 	lsl.w	r0, r0, r9
 8007cf8:	4310      	orrs	r0, r2
 8007cfa:	f84a 0b04 	str.w	r0, [sl], #4
 8007cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d02:	459c      	cmp	ip, r3
 8007d04:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d08:	d8f3      	bhi.n	8007cf2 <__lshift+0x6e>
 8007d0a:	ebac 0304 	sub.w	r3, ip, r4
 8007d0e:	3b15      	subs	r3, #21
 8007d10:	f023 0303 	bic.w	r3, r3, #3
 8007d14:	3304      	adds	r3, #4
 8007d16:	f104 0015 	add.w	r0, r4, #21
 8007d1a:	4584      	cmp	ip, r0
 8007d1c:	bf38      	it	cc
 8007d1e:	2304      	movcc	r3, #4
 8007d20:	50ca      	str	r2, [r1, r3]
 8007d22:	b10a      	cbz	r2, 8007d28 <__lshift+0xa4>
 8007d24:	f108 0602 	add.w	r6, r8, #2
 8007d28:	3e01      	subs	r6, #1
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	612e      	str	r6, [r5, #16]
 8007d30:	f7ff fdda 	bl	80078e8 <_Bfree>
 8007d34:	4628      	mov	r0, r5
 8007d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d3e:	3301      	adds	r3, #1
 8007d40:	e7c5      	b.n	8007cce <__lshift+0x4a>
 8007d42:	3904      	subs	r1, #4
 8007d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d48:	459c      	cmp	ip, r3
 8007d4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d4e:	d8f9      	bhi.n	8007d44 <__lshift+0xc0>
 8007d50:	e7ea      	b.n	8007d28 <__lshift+0xa4>
 8007d52:	bf00      	nop
 8007d54:	08008f3a 	.word	0x08008f3a
 8007d58:	08008f4b 	.word	0x08008f4b

08007d5c <__mcmp>:
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	690a      	ldr	r2, [r1, #16]
 8007d60:	6900      	ldr	r0, [r0, #16]
 8007d62:	b530      	push	{r4, r5, lr}
 8007d64:	1a80      	subs	r0, r0, r2
 8007d66:	d10d      	bne.n	8007d84 <__mcmp+0x28>
 8007d68:	3314      	adds	r3, #20
 8007d6a:	3114      	adds	r1, #20
 8007d6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d7c:	4295      	cmp	r5, r2
 8007d7e:	d002      	beq.n	8007d86 <__mcmp+0x2a>
 8007d80:	d304      	bcc.n	8007d8c <__mcmp+0x30>
 8007d82:	2001      	movs	r0, #1
 8007d84:	bd30      	pop	{r4, r5, pc}
 8007d86:	42a3      	cmp	r3, r4
 8007d88:	d3f4      	bcc.n	8007d74 <__mcmp+0x18>
 8007d8a:	e7fb      	b.n	8007d84 <__mcmp+0x28>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e7f8      	b.n	8007d84 <__mcmp+0x28>
	...

08007d94 <__mdiff>:
 8007d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	460d      	mov	r5, r1
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4628      	mov	r0, r5
 8007da0:	4614      	mov	r4, r2
 8007da2:	f7ff ffdb 	bl	8007d5c <__mcmp>
 8007da6:	1e06      	subs	r6, r0, #0
 8007da8:	d111      	bne.n	8007dce <__mdiff+0x3a>
 8007daa:	4631      	mov	r1, r6
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff fd5b 	bl	8007868 <_Balloc>
 8007db2:	4602      	mov	r2, r0
 8007db4:	b928      	cbnz	r0, 8007dc2 <__mdiff+0x2e>
 8007db6:	f240 2137 	movw	r1, #567	; 0x237
 8007dba:	4b3a      	ldr	r3, [pc, #232]	; (8007ea4 <__mdiff+0x110>)
 8007dbc:	483a      	ldr	r0, [pc, #232]	; (8007ea8 <__mdiff+0x114>)
 8007dbe:	f000 fa09 	bl	80081d4 <__assert_func>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007dc8:	4610      	mov	r0, r2
 8007dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dce:	bfa4      	itt	ge
 8007dd0:	4623      	movge	r3, r4
 8007dd2:	462c      	movge	r4, r5
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	6861      	ldr	r1, [r4, #4]
 8007dd8:	bfa6      	itte	ge
 8007dda:	461d      	movge	r5, r3
 8007ddc:	2600      	movge	r6, #0
 8007dde:	2601      	movlt	r6, #1
 8007de0:	f7ff fd42 	bl	8007868 <_Balloc>
 8007de4:	4602      	mov	r2, r0
 8007de6:	b918      	cbnz	r0, 8007df0 <__mdiff+0x5c>
 8007de8:	f240 2145 	movw	r1, #581	; 0x245
 8007dec:	4b2d      	ldr	r3, [pc, #180]	; (8007ea4 <__mdiff+0x110>)
 8007dee:	e7e5      	b.n	8007dbc <__mdiff+0x28>
 8007df0:	f102 0814 	add.w	r8, r2, #20
 8007df4:	46c2      	mov	sl, r8
 8007df6:	f04f 0c00 	mov.w	ip, #0
 8007dfa:	6927      	ldr	r7, [r4, #16]
 8007dfc:	60c6      	str	r6, [r0, #12]
 8007dfe:	692e      	ldr	r6, [r5, #16]
 8007e00:	f104 0014 	add.w	r0, r4, #20
 8007e04:	f105 0914 	add.w	r9, r5, #20
 8007e08:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007e0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e10:	3410      	adds	r4, #16
 8007e12:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007e16:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e1a:	fa1f f18b 	uxth.w	r1, fp
 8007e1e:	4461      	add	r1, ip
 8007e20:	fa1f fc83 	uxth.w	ip, r3
 8007e24:	0c1b      	lsrs	r3, r3, #16
 8007e26:	eba1 010c 	sub.w	r1, r1, ip
 8007e2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e32:	b289      	uxth	r1, r1
 8007e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007e38:	454e      	cmp	r6, r9
 8007e3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e3e:	f84a 1b04 	str.w	r1, [sl], #4
 8007e42:	d8e6      	bhi.n	8007e12 <__mdiff+0x7e>
 8007e44:	1b73      	subs	r3, r6, r5
 8007e46:	3b15      	subs	r3, #21
 8007e48:	f023 0303 	bic.w	r3, r3, #3
 8007e4c:	3515      	adds	r5, #21
 8007e4e:	3304      	adds	r3, #4
 8007e50:	42ae      	cmp	r6, r5
 8007e52:	bf38      	it	cc
 8007e54:	2304      	movcc	r3, #4
 8007e56:	4418      	add	r0, r3
 8007e58:	4443      	add	r3, r8
 8007e5a:	461e      	mov	r6, r3
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	4575      	cmp	r5, lr
 8007e60:	d30e      	bcc.n	8007e80 <__mdiff+0xec>
 8007e62:	f10e 0103 	add.w	r1, lr, #3
 8007e66:	1a09      	subs	r1, r1, r0
 8007e68:	f021 0103 	bic.w	r1, r1, #3
 8007e6c:	3803      	subs	r0, #3
 8007e6e:	4586      	cmp	lr, r0
 8007e70:	bf38      	it	cc
 8007e72:	2100      	movcc	r1, #0
 8007e74:	440b      	add	r3, r1
 8007e76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e7a:	b189      	cbz	r1, 8007ea0 <__mdiff+0x10c>
 8007e7c:	6117      	str	r7, [r2, #16]
 8007e7e:	e7a3      	b.n	8007dc8 <__mdiff+0x34>
 8007e80:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e84:	fa1f f188 	uxth.w	r1, r8
 8007e88:	4461      	add	r1, ip
 8007e8a:	140c      	asrs	r4, r1, #16
 8007e8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e90:	b289      	uxth	r1, r1
 8007e92:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e96:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e9a:	f846 1b04 	str.w	r1, [r6], #4
 8007e9e:	e7de      	b.n	8007e5e <__mdiff+0xca>
 8007ea0:	3f01      	subs	r7, #1
 8007ea2:	e7e8      	b.n	8007e76 <__mdiff+0xe2>
 8007ea4:	08008f3a 	.word	0x08008f3a
 8007ea8:	08008f4b 	.word	0x08008f4b

08007eac <__d2b>:
 8007eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4617      	mov	r7, r2
 8007eb2:	461c      	mov	r4, r3
 8007eb4:	9e08      	ldr	r6, [sp, #32]
 8007eb6:	f7ff fcd7 	bl	8007868 <_Balloc>
 8007eba:	4605      	mov	r5, r0
 8007ebc:	b930      	cbnz	r0, 8007ecc <__d2b+0x20>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	f240 310f 	movw	r1, #783	; 0x30f
 8007ec4:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <__d2b+0xa4>)
 8007ec6:	4823      	ldr	r0, [pc, #140]	; (8007f54 <__d2b+0xa8>)
 8007ec8:	f000 f984 	bl	80081d4 <__assert_func>
 8007ecc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ed0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007ed4:	bb24      	cbnz	r4, 8007f20 <__d2b+0x74>
 8007ed6:	2f00      	cmp	r7, #0
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	d026      	beq.n	8007f2a <__d2b+0x7e>
 8007edc:	4668      	mov	r0, sp
 8007ede:	9700      	str	r7, [sp, #0]
 8007ee0:	f7ff fd8a 	bl	80079f8 <__lo0bits>
 8007ee4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ee8:	b1e8      	cbz	r0, 8007f26 <__d2b+0x7a>
 8007eea:	f1c0 0320 	rsb	r3, r0, #32
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	40c2      	lsrs	r2, r0
 8007ef6:	616b      	str	r3, [r5, #20]
 8007ef8:	9201      	str	r2, [sp, #4]
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bf14      	ite	ne
 8007f00:	2102      	movne	r1, #2
 8007f02:	2101      	moveq	r1, #1
 8007f04:	61ab      	str	r3, [r5, #24]
 8007f06:	6129      	str	r1, [r5, #16]
 8007f08:	b1bc      	cbz	r4, 8007f3a <__d2b+0x8e>
 8007f0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f0e:	4404      	add	r4, r0
 8007f10:	6034      	str	r4, [r6, #0]
 8007f12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	6018      	str	r0, [r3, #0]
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	b003      	add	sp, #12
 8007f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f24:	e7d7      	b.n	8007ed6 <__d2b+0x2a>
 8007f26:	6169      	str	r1, [r5, #20]
 8007f28:	e7e7      	b.n	8007efa <__d2b+0x4e>
 8007f2a:	a801      	add	r0, sp, #4
 8007f2c:	f7ff fd64 	bl	80079f8 <__lo0bits>
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	2101      	movs	r1, #1
 8007f34:	616b      	str	r3, [r5, #20]
 8007f36:	3020      	adds	r0, #32
 8007f38:	e7e5      	b.n	8007f06 <__d2b+0x5a>
 8007f3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f3e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007f42:	6030      	str	r0, [r6, #0]
 8007f44:	6918      	ldr	r0, [r3, #16]
 8007f46:	f7ff fd37 	bl	80079b8 <__hi0bits>
 8007f4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f4e:	e7e2      	b.n	8007f16 <__d2b+0x6a>
 8007f50:	08008f3a 	.word	0x08008f3a
 8007f54:	08008f4b 	.word	0x08008f4b

08007f58 <__sflush_r>:
 8007f58:	898a      	ldrh	r2, [r1, #12]
 8007f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	0710      	lsls	r0, r2, #28
 8007f60:	460c      	mov	r4, r1
 8007f62:	d457      	bmi.n	8008014 <__sflush_r+0xbc>
 8007f64:	684b      	ldr	r3, [r1, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dc04      	bgt.n	8007f74 <__sflush_r+0x1c>
 8007f6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dc01      	bgt.n	8007f74 <__sflush_r+0x1c>
 8007f70:	2000      	movs	r0, #0
 8007f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	d0fa      	beq.n	8007f70 <__sflush_r+0x18>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f80:	682f      	ldr	r7, [r5, #0]
 8007f82:	6a21      	ldr	r1, [r4, #32]
 8007f84:	602b      	str	r3, [r5, #0]
 8007f86:	d032      	beq.n	8007fee <__sflush_r+0x96>
 8007f88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	075a      	lsls	r2, r3, #29
 8007f8e:	d505      	bpl.n	8007f9c <__sflush_r+0x44>
 8007f90:	6863      	ldr	r3, [r4, #4]
 8007f92:	1ac0      	subs	r0, r0, r3
 8007f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f96:	b10b      	cbz	r3, 8007f9c <__sflush_r+0x44>
 8007f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f9a:	1ac0      	subs	r0, r0, r3
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	6a21      	ldr	r1, [r4, #32]
 8007fa6:	47b0      	blx	r6
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	d106      	bne.n	8007fbc <__sflush_r+0x64>
 8007fae:	6829      	ldr	r1, [r5, #0]
 8007fb0:	291d      	cmp	r1, #29
 8007fb2:	d82b      	bhi.n	800800c <__sflush_r+0xb4>
 8007fb4:	4a28      	ldr	r2, [pc, #160]	; (8008058 <__sflush_r+0x100>)
 8007fb6:	410a      	asrs	r2, r1
 8007fb8:	07d6      	lsls	r6, r2, #31
 8007fba:	d427      	bmi.n	800800c <__sflush_r+0xb4>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	6062      	str	r2, [r4, #4]
 8007fc0:	6922      	ldr	r2, [r4, #16]
 8007fc2:	04d9      	lsls	r1, r3, #19
 8007fc4:	6022      	str	r2, [r4, #0]
 8007fc6:	d504      	bpl.n	8007fd2 <__sflush_r+0x7a>
 8007fc8:	1c42      	adds	r2, r0, #1
 8007fca:	d101      	bne.n	8007fd0 <__sflush_r+0x78>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b903      	cbnz	r3, 8007fd2 <__sflush_r+0x7a>
 8007fd0:	6560      	str	r0, [r4, #84]	; 0x54
 8007fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fd4:	602f      	str	r7, [r5, #0]
 8007fd6:	2900      	cmp	r1, #0
 8007fd8:	d0ca      	beq.n	8007f70 <__sflush_r+0x18>
 8007fda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	d002      	beq.n	8007fe8 <__sflush_r+0x90>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f7ff fb44 	bl	8007670 <_free_r>
 8007fe8:	2000      	movs	r0, #0
 8007fea:	6360      	str	r0, [r4, #52]	; 0x34
 8007fec:	e7c1      	b.n	8007f72 <__sflush_r+0x1a>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b0      	blx	r6
 8007ff4:	1c41      	adds	r1, r0, #1
 8007ff6:	d1c8      	bne.n	8007f8a <__sflush_r+0x32>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0c5      	beq.n	8007f8a <__sflush_r+0x32>
 8007ffe:	2b1d      	cmp	r3, #29
 8008000:	d001      	beq.n	8008006 <__sflush_r+0xae>
 8008002:	2b16      	cmp	r3, #22
 8008004:	d101      	bne.n	800800a <__sflush_r+0xb2>
 8008006:	602f      	str	r7, [r5, #0]
 8008008:	e7b2      	b.n	8007f70 <__sflush_r+0x18>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	e7ae      	b.n	8007f72 <__sflush_r+0x1a>
 8008014:	690f      	ldr	r7, [r1, #16]
 8008016:	2f00      	cmp	r7, #0
 8008018:	d0aa      	beq.n	8007f70 <__sflush_r+0x18>
 800801a:	0793      	lsls	r3, r2, #30
 800801c:	bf18      	it	ne
 800801e:	2300      	movne	r3, #0
 8008020:	680e      	ldr	r6, [r1, #0]
 8008022:	bf08      	it	eq
 8008024:	694b      	ldreq	r3, [r1, #20]
 8008026:	1bf6      	subs	r6, r6, r7
 8008028:	600f      	str	r7, [r1, #0]
 800802a:	608b      	str	r3, [r1, #8]
 800802c:	2e00      	cmp	r6, #0
 800802e:	dd9f      	ble.n	8007f70 <__sflush_r+0x18>
 8008030:	4633      	mov	r3, r6
 8008032:	463a      	mov	r2, r7
 8008034:	4628      	mov	r0, r5
 8008036:	6a21      	ldr	r1, [r4, #32]
 8008038:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800803c:	47e0      	blx	ip
 800803e:	2800      	cmp	r0, #0
 8008040:	dc06      	bgt.n	8008050 <__sflush_r+0xf8>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	e790      	b.n	8007f72 <__sflush_r+0x1a>
 8008050:	4407      	add	r7, r0
 8008052:	1a36      	subs	r6, r6, r0
 8008054:	e7ea      	b.n	800802c <__sflush_r+0xd4>
 8008056:	bf00      	nop
 8008058:	dfbffffe 	.word	0xdfbffffe

0800805c <_fflush_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	690b      	ldr	r3, [r1, #16]
 8008060:	4605      	mov	r5, r0
 8008062:	460c      	mov	r4, r1
 8008064:	b913      	cbnz	r3, 800806c <_fflush_r+0x10>
 8008066:	2500      	movs	r5, #0
 8008068:	4628      	mov	r0, r5
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	b118      	cbz	r0, 8008076 <_fflush_r+0x1a>
 800806e:	6a03      	ldr	r3, [r0, #32]
 8008070:	b90b      	cbnz	r3, 8008076 <_fflush_r+0x1a>
 8008072:	f7fe fa8b 	bl	800658c <__sinit>
 8008076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0f3      	beq.n	8008066 <_fflush_r+0xa>
 800807e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008080:	07d0      	lsls	r0, r2, #31
 8008082:	d404      	bmi.n	800808e <_fflush_r+0x32>
 8008084:	0599      	lsls	r1, r3, #22
 8008086:	d402      	bmi.n	800808e <_fflush_r+0x32>
 8008088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800808a:	f7fe fc66 	bl	800695a <__retarget_lock_acquire_recursive>
 800808e:	4628      	mov	r0, r5
 8008090:	4621      	mov	r1, r4
 8008092:	f7ff ff61 	bl	8007f58 <__sflush_r>
 8008096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008098:	4605      	mov	r5, r0
 800809a:	07da      	lsls	r2, r3, #31
 800809c:	d4e4      	bmi.n	8008068 <_fflush_r+0xc>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	059b      	lsls	r3, r3, #22
 80080a2:	d4e1      	bmi.n	8008068 <_fflush_r+0xc>
 80080a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a6:	f7fe fc59 	bl	800695c <__retarget_lock_release_recursive>
 80080aa:	e7dd      	b.n	8008068 <_fflush_r+0xc>

080080ac <__swhatbuf_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	460c      	mov	r4, r1
 80080b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b4:	4615      	mov	r5, r2
 80080b6:	2900      	cmp	r1, #0
 80080b8:	461e      	mov	r6, r3
 80080ba:	b096      	sub	sp, #88	; 0x58
 80080bc:	da0c      	bge.n	80080d8 <__swhatbuf_r+0x2c>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	2100      	movs	r1, #0
 80080c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080c6:	bf0c      	ite	eq
 80080c8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080cc:	2340      	movne	r3, #64	; 0x40
 80080ce:	2000      	movs	r0, #0
 80080d0:	6031      	str	r1, [r6, #0]
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	b016      	add	sp, #88	; 0x58
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	466a      	mov	r2, sp
 80080da:	f000 f849 	bl	8008170 <_fstat_r>
 80080de:	2800      	cmp	r0, #0
 80080e0:	dbed      	blt.n	80080be <__swhatbuf_r+0x12>
 80080e2:	9901      	ldr	r1, [sp, #4]
 80080e4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080e8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080ec:	4259      	negs	r1, r3
 80080ee:	4159      	adcs	r1, r3
 80080f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f4:	e7eb      	b.n	80080ce <__swhatbuf_r+0x22>

080080f6 <__smakebuf_r>:
 80080f6:	898b      	ldrh	r3, [r1, #12]
 80080f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080fa:	079d      	lsls	r5, r3, #30
 80080fc:	4606      	mov	r6, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	d507      	bpl.n	8008112 <__smakebuf_r+0x1c>
 8008102:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	6123      	str	r3, [r4, #16]
 800810a:	2301      	movs	r3, #1
 800810c:	6163      	str	r3, [r4, #20]
 800810e:	b002      	add	sp, #8
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	466a      	mov	r2, sp
 8008114:	ab01      	add	r3, sp, #4
 8008116:	f7ff ffc9 	bl	80080ac <__swhatbuf_r>
 800811a:	9900      	ldr	r1, [sp, #0]
 800811c:	4605      	mov	r5, r0
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff fb16 	bl	8007750 <_malloc_r>
 8008124:	b948      	cbnz	r0, 800813a <__smakebuf_r+0x44>
 8008126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812a:	059a      	lsls	r2, r3, #22
 800812c:	d4ef      	bmi.n	800810e <__smakebuf_r+0x18>
 800812e:	f023 0303 	bic.w	r3, r3, #3
 8008132:	f043 0302 	orr.w	r3, r3, #2
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	e7e3      	b.n	8008102 <__smakebuf_r+0xc>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	6020      	str	r0, [r4, #0]
 800813e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	6120      	str	r0, [r4, #16]
 8008148:	6163      	str	r3, [r4, #20]
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	b15b      	cbz	r3, 8008166 <__smakebuf_r+0x70>
 800814e:	4630      	mov	r0, r6
 8008150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008154:	f000 f81e 	bl	8008194 <_isatty_r>
 8008158:	b128      	cbz	r0, 8008166 <__smakebuf_r+0x70>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f023 0303 	bic.w	r3, r3, #3
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	431d      	orrs	r5, r3
 800816a:	81a5      	strh	r5, [r4, #12]
 800816c:	e7cf      	b.n	800810e <__smakebuf_r+0x18>
	...

08008170 <_fstat_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	2300      	movs	r3, #0
 8008174:	4d06      	ldr	r5, [pc, #24]	; (8008190 <_fstat_r+0x20>)
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	f7fa fd8a 	bl	8002c96 <_fstat>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d102      	bne.n	800818c <_fstat_r+0x1c>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	b103      	cbz	r3, 800818c <_fstat_r+0x1c>
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	bf00      	nop
 8008190:	200008fc 	.word	0x200008fc

08008194 <_isatty_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	2300      	movs	r3, #0
 8008198:	4d05      	ldr	r5, [pc, #20]	; (80081b0 <_isatty_r+0x1c>)
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	f7fa fd88 	bl	8002cb4 <_isatty>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_isatty_r+0x1a>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_isatty_r+0x1a>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	200008fc 	.word	0x200008fc

080081b4 <_sbrk_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	2300      	movs	r3, #0
 80081b8:	4d05      	ldr	r5, [pc, #20]	; (80081d0 <_sbrk_r+0x1c>)
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7fa fd8e 	bl	8002ce0 <_sbrk>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_sbrk_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_sbrk_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	200008fc 	.word	0x200008fc

080081d4 <__assert_func>:
 80081d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081d6:	4614      	mov	r4, r2
 80081d8:	461a      	mov	r2, r3
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <__assert_func+0x2c>)
 80081dc:	4605      	mov	r5, r0
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68d8      	ldr	r0, [r3, #12]
 80081e2:	b14c      	cbz	r4, 80081f8 <__assert_func+0x24>
 80081e4:	4b07      	ldr	r3, [pc, #28]	; (8008204 <__assert_func+0x30>)
 80081e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081ea:	9100      	str	r1, [sp, #0]
 80081ec:	462b      	mov	r3, r5
 80081ee:	4906      	ldr	r1, [pc, #24]	; (8008208 <__assert_func+0x34>)
 80081f0:	f000 f842 	bl	8008278 <fiprintf>
 80081f4:	f000 f852 	bl	800829c <abort>
 80081f8:	4b04      	ldr	r3, [pc, #16]	; (800820c <__assert_func+0x38>)
 80081fa:	461c      	mov	r4, r3
 80081fc:	e7f3      	b.n	80081e6 <__assert_func+0x12>
 80081fe:	bf00      	nop
 8008200:	20000080 	.word	0x20000080
 8008204:	080090ae 	.word	0x080090ae
 8008208:	080090bb 	.word	0x080090bb
 800820c:	080090e9 	.word	0x080090e9

08008210 <_calloc_r>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	fba1 5402 	umull	r5, r4, r1, r2
 8008216:	b934      	cbnz	r4, 8008226 <_calloc_r+0x16>
 8008218:	4629      	mov	r1, r5
 800821a:	f7ff fa99 	bl	8007750 <_malloc_r>
 800821e:	4606      	mov	r6, r0
 8008220:	b928      	cbnz	r0, 800822e <_calloc_r+0x1e>
 8008222:	4630      	mov	r0, r6
 8008224:	bd70      	pop	{r4, r5, r6, pc}
 8008226:	220c      	movs	r2, #12
 8008228:	2600      	movs	r6, #0
 800822a:	6002      	str	r2, [r0, #0]
 800822c:	e7f9      	b.n	8008222 <_calloc_r+0x12>
 800822e:	462a      	mov	r2, r5
 8008230:	4621      	mov	r1, r4
 8008232:	f7fe fb15 	bl	8006860 <memset>
 8008236:	e7f4      	b.n	8008222 <_calloc_r+0x12>

08008238 <__ascii_mbtowc>:
 8008238:	b082      	sub	sp, #8
 800823a:	b901      	cbnz	r1, 800823e <__ascii_mbtowc+0x6>
 800823c:	a901      	add	r1, sp, #4
 800823e:	b142      	cbz	r2, 8008252 <__ascii_mbtowc+0x1a>
 8008240:	b14b      	cbz	r3, 8008256 <__ascii_mbtowc+0x1e>
 8008242:	7813      	ldrb	r3, [r2, #0]
 8008244:	600b      	str	r3, [r1, #0]
 8008246:	7812      	ldrb	r2, [r2, #0]
 8008248:	1e10      	subs	r0, r2, #0
 800824a:	bf18      	it	ne
 800824c:	2001      	movne	r0, #1
 800824e:	b002      	add	sp, #8
 8008250:	4770      	bx	lr
 8008252:	4610      	mov	r0, r2
 8008254:	e7fb      	b.n	800824e <__ascii_mbtowc+0x16>
 8008256:	f06f 0001 	mvn.w	r0, #1
 800825a:	e7f8      	b.n	800824e <__ascii_mbtowc+0x16>

0800825c <__ascii_wctomb>:
 800825c:	4603      	mov	r3, r0
 800825e:	4608      	mov	r0, r1
 8008260:	b141      	cbz	r1, 8008274 <__ascii_wctomb+0x18>
 8008262:	2aff      	cmp	r2, #255	; 0xff
 8008264:	d904      	bls.n	8008270 <__ascii_wctomb+0x14>
 8008266:	228a      	movs	r2, #138	; 0x8a
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	4770      	bx	lr
 8008270:	2001      	movs	r0, #1
 8008272:	700a      	strb	r2, [r1, #0]
 8008274:	4770      	bx	lr
	...

08008278 <fiprintf>:
 8008278:	b40e      	push	{r1, r2, r3}
 800827a:	b503      	push	{r0, r1, lr}
 800827c:	4601      	mov	r1, r0
 800827e:	ab03      	add	r3, sp, #12
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <fiprintf+0x20>)
 8008282:	f853 2b04 	ldr.w	r2, [r3], #4
 8008286:	6800      	ldr	r0, [r0, #0]
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	f000 f835 	bl	80082f8 <_vfiprintf_r>
 800828e:	b002      	add	sp, #8
 8008290:	f85d eb04 	ldr.w	lr, [sp], #4
 8008294:	b003      	add	sp, #12
 8008296:	4770      	bx	lr
 8008298:	20000080 	.word	0x20000080

0800829c <abort>:
 800829c:	2006      	movs	r0, #6
 800829e:	b508      	push	{r3, lr}
 80082a0:	f000 f96c 	bl	800857c <raise>
 80082a4:	2001      	movs	r0, #1
 80082a6:	f7fa fca8 	bl	8002bfa <_exit>

080082aa <__sfputc_r>:
 80082aa:	6893      	ldr	r3, [r2, #8]
 80082ac:	b410      	push	{r4}
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	6093      	str	r3, [r2, #8]
 80082b4:	da07      	bge.n	80082c6 <__sfputc_r+0x1c>
 80082b6:	6994      	ldr	r4, [r2, #24]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	db01      	blt.n	80082c0 <__sfputc_r+0x16>
 80082bc:	290a      	cmp	r1, #10
 80082be:	d102      	bne.n	80082c6 <__sfputc_r+0x1c>
 80082c0:	bc10      	pop	{r4}
 80082c2:	f7fe ba38 	b.w	8006736 <__swbuf_r>
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	1c58      	adds	r0, r3, #1
 80082ca:	6010      	str	r0, [r2, #0]
 80082cc:	7019      	strb	r1, [r3, #0]
 80082ce:	4608      	mov	r0, r1
 80082d0:	bc10      	pop	{r4}
 80082d2:	4770      	bx	lr

080082d4 <__sfputs_r>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	4606      	mov	r6, r0
 80082d8:	460f      	mov	r7, r1
 80082da:	4614      	mov	r4, r2
 80082dc:	18d5      	adds	r5, r2, r3
 80082de:	42ac      	cmp	r4, r5
 80082e0:	d101      	bne.n	80082e6 <__sfputs_r+0x12>
 80082e2:	2000      	movs	r0, #0
 80082e4:	e007      	b.n	80082f6 <__sfputs_r+0x22>
 80082e6:	463a      	mov	r2, r7
 80082e8:	4630      	mov	r0, r6
 80082ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ee:	f7ff ffdc 	bl	80082aa <__sfputc_r>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d1f3      	bne.n	80082de <__sfputs_r+0xa>
 80082f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082f8 <_vfiprintf_r>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	460d      	mov	r5, r1
 80082fe:	4614      	mov	r4, r2
 8008300:	4698      	mov	r8, r3
 8008302:	4606      	mov	r6, r0
 8008304:	b09d      	sub	sp, #116	; 0x74
 8008306:	b118      	cbz	r0, 8008310 <_vfiprintf_r+0x18>
 8008308:	6a03      	ldr	r3, [r0, #32]
 800830a:	b90b      	cbnz	r3, 8008310 <_vfiprintf_r+0x18>
 800830c:	f7fe f93e 	bl	800658c <__sinit>
 8008310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008312:	07d9      	lsls	r1, r3, #31
 8008314:	d405      	bmi.n	8008322 <_vfiprintf_r+0x2a>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	059a      	lsls	r2, r3, #22
 800831a:	d402      	bmi.n	8008322 <_vfiprintf_r+0x2a>
 800831c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831e:	f7fe fb1c 	bl	800695a <__retarget_lock_acquire_recursive>
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	071b      	lsls	r3, r3, #28
 8008326:	d501      	bpl.n	800832c <_vfiprintf_r+0x34>
 8008328:	692b      	ldr	r3, [r5, #16]
 800832a:	b99b      	cbnz	r3, 8008354 <_vfiprintf_r+0x5c>
 800832c:	4629      	mov	r1, r5
 800832e:	4630      	mov	r0, r6
 8008330:	f7fe fa3e 	bl	80067b0 <__swsetup_r>
 8008334:	b170      	cbz	r0, 8008354 <_vfiprintf_r+0x5c>
 8008336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008338:	07dc      	lsls	r4, r3, #31
 800833a:	d504      	bpl.n	8008346 <_vfiprintf_r+0x4e>
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	b01d      	add	sp, #116	; 0x74
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	0598      	lsls	r0, r3, #22
 800834a:	d4f7      	bmi.n	800833c <_vfiprintf_r+0x44>
 800834c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800834e:	f7fe fb05 	bl	800695c <__retarget_lock_release_recursive>
 8008352:	e7f3      	b.n	800833c <_vfiprintf_r+0x44>
 8008354:	2300      	movs	r3, #0
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	2320      	movs	r3, #32
 800835a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800835e:	2330      	movs	r3, #48	; 0x30
 8008360:	f04f 0901 	mov.w	r9, #1
 8008364:	f8cd 800c 	str.w	r8, [sp, #12]
 8008368:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008518 <_vfiprintf_r+0x220>
 800836c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008370:	4623      	mov	r3, r4
 8008372:	469a      	mov	sl, r3
 8008374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008378:	b10a      	cbz	r2, 800837e <_vfiprintf_r+0x86>
 800837a:	2a25      	cmp	r2, #37	; 0x25
 800837c:	d1f9      	bne.n	8008372 <_vfiprintf_r+0x7a>
 800837e:	ebba 0b04 	subs.w	fp, sl, r4
 8008382:	d00b      	beq.n	800839c <_vfiprintf_r+0xa4>
 8008384:	465b      	mov	r3, fp
 8008386:	4622      	mov	r2, r4
 8008388:	4629      	mov	r1, r5
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ffa2 	bl	80082d4 <__sfputs_r>
 8008390:	3001      	adds	r0, #1
 8008392:	f000 80a9 	beq.w	80084e8 <_vfiprintf_r+0x1f0>
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	445a      	add	r2, fp
 800839a:	9209      	str	r2, [sp, #36]	; 0x24
 800839c:	f89a 3000 	ldrb.w	r3, [sl]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80a1 	beq.w	80084e8 <_vfiprintf_r+0x1f0>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b0:	f10a 0a01 	add.w	sl, sl, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083bc:	931a      	str	r3, [sp, #104]	; 0x68
 80083be:	4654      	mov	r4, sl
 80083c0:	2205      	movs	r2, #5
 80083c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c6:	4854      	ldr	r0, [pc, #336]	; (8008518 <_vfiprintf_r+0x220>)
 80083c8:	f7fe fac9 	bl	800695e <memchr>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	b9d8      	cbnz	r0, 8008408 <_vfiprintf_r+0x110>
 80083d0:	06d1      	lsls	r1, r2, #27
 80083d2:	bf44      	itt	mi
 80083d4:	2320      	movmi	r3, #32
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083da:	0713      	lsls	r3, r2, #28
 80083dc:	bf44      	itt	mi
 80083de:	232b      	movmi	r3, #43	; 0x2b
 80083e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ea:	d015      	beq.n	8008418 <_vfiprintf_r+0x120>
 80083ec:	4654      	mov	r4, sl
 80083ee:	2000      	movs	r0, #0
 80083f0:	f04f 0c0a 	mov.w	ip, #10
 80083f4:	9a07      	ldr	r2, [sp, #28]
 80083f6:	4621      	mov	r1, r4
 80083f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fc:	3b30      	subs	r3, #48	; 0x30
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d94d      	bls.n	800849e <_vfiprintf_r+0x1a6>
 8008402:	b1b0      	cbz	r0, 8008432 <_vfiprintf_r+0x13a>
 8008404:	9207      	str	r2, [sp, #28]
 8008406:	e014      	b.n	8008432 <_vfiprintf_r+0x13a>
 8008408:	eba0 0308 	sub.w	r3, r0, r8
 800840c:	fa09 f303 	lsl.w	r3, r9, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	46a2      	mov	sl, r4
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	e7d2      	b.n	80083be <_vfiprintf_r+0xc6>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	1d19      	adds	r1, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	9103      	str	r1, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bfbb      	ittet	lt
 8008424:	425b      	neglt	r3, r3
 8008426:	f042 0202 	orrlt.w	r2, r2, #2
 800842a:	9307      	strge	r3, [sp, #28]
 800842c:	9307      	strlt	r3, [sp, #28]
 800842e:	bfb8      	it	lt
 8008430:	9204      	strlt	r2, [sp, #16]
 8008432:	7823      	ldrb	r3, [r4, #0]
 8008434:	2b2e      	cmp	r3, #46	; 0x2e
 8008436:	d10c      	bne.n	8008452 <_vfiprintf_r+0x15a>
 8008438:	7863      	ldrb	r3, [r4, #1]
 800843a:	2b2a      	cmp	r3, #42	; 0x2a
 800843c:	d134      	bne.n	80084a8 <_vfiprintf_r+0x1b0>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	3402      	adds	r4, #2
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	9203      	str	r2, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfb8      	it	lt
 800844c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800851c <_vfiprintf_r+0x224>
 8008456:	2203      	movs	r2, #3
 8008458:	4650      	mov	r0, sl
 800845a:	7821      	ldrb	r1, [r4, #0]
 800845c:	f7fe fa7f 	bl	800695e <memchr>
 8008460:	b138      	cbz	r0, 8008472 <_vfiprintf_r+0x17a>
 8008462:	2240      	movs	r2, #64	; 0x40
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	eba0 000a 	sub.w	r0, r0, sl
 800846a:	4082      	lsls	r2, r0
 800846c:	4313      	orrs	r3, r2
 800846e:	3401      	adds	r4, #1
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008476:	2206      	movs	r2, #6
 8008478:	4829      	ldr	r0, [pc, #164]	; (8008520 <_vfiprintf_r+0x228>)
 800847a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800847e:	f7fe fa6e 	bl	800695e <memchr>
 8008482:	2800      	cmp	r0, #0
 8008484:	d03f      	beq.n	8008506 <_vfiprintf_r+0x20e>
 8008486:	4b27      	ldr	r3, [pc, #156]	; (8008524 <_vfiprintf_r+0x22c>)
 8008488:	bb1b      	cbnz	r3, 80084d2 <_vfiprintf_r+0x1da>
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	3307      	adds	r3, #7
 800848e:	f023 0307 	bic.w	r3, r3, #7
 8008492:	3308      	adds	r3, #8
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008498:	443b      	add	r3, r7
 800849a:	9309      	str	r3, [sp, #36]	; 0x24
 800849c:	e768      	b.n	8008370 <_vfiprintf_r+0x78>
 800849e:	460c      	mov	r4, r1
 80084a0:	2001      	movs	r0, #1
 80084a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a6:	e7a6      	b.n	80083f6 <_vfiprintf_r+0xfe>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f04f 0c0a 	mov.w	ip, #10
 80084ae:	4619      	mov	r1, r3
 80084b0:	3401      	adds	r4, #1
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	4620      	mov	r0, r4
 80084b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ba:	3a30      	subs	r2, #48	; 0x30
 80084bc:	2a09      	cmp	r2, #9
 80084be:	d903      	bls.n	80084c8 <_vfiprintf_r+0x1d0>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0c6      	beq.n	8008452 <_vfiprintf_r+0x15a>
 80084c4:	9105      	str	r1, [sp, #20]
 80084c6:	e7c4      	b.n	8008452 <_vfiprintf_r+0x15a>
 80084c8:	4604      	mov	r4, r0
 80084ca:	2301      	movs	r3, #1
 80084cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d0:	e7f0      	b.n	80084b4 <_vfiprintf_r+0x1bc>
 80084d2:	ab03      	add	r3, sp, #12
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	462a      	mov	r2, r5
 80084d8:	4630      	mov	r0, r6
 80084da:	4b13      	ldr	r3, [pc, #76]	; (8008528 <_vfiprintf_r+0x230>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	f7fd fc07 	bl	8005cf0 <_printf_float>
 80084e2:	4607      	mov	r7, r0
 80084e4:	1c78      	adds	r0, r7, #1
 80084e6:	d1d6      	bne.n	8008496 <_vfiprintf_r+0x19e>
 80084e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ea:	07d9      	lsls	r1, r3, #31
 80084ec:	d405      	bmi.n	80084fa <_vfiprintf_r+0x202>
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	059a      	lsls	r2, r3, #22
 80084f2:	d402      	bmi.n	80084fa <_vfiprintf_r+0x202>
 80084f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f6:	f7fe fa31 	bl	800695c <__retarget_lock_release_recursive>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	065b      	lsls	r3, r3, #25
 80084fe:	f53f af1d 	bmi.w	800833c <_vfiprintf_r+0x44>
 8008502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008504:	e71c      	b.n	8008340 <_vfiprintf_r+0x48>
 8008506:	ab03      	add	r3, sp, #12
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	462a      	mov	r2, r5
 800850c:	4630      	mov	r0, r6
 800850e:	4b06      	ldr	r3, [pc, #24]	; (8008528 <_vfiprintf_r+0x230>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	f7fd fe8d 	bl	8006230 <_printf_i>
 8008516:	e7e4      	b.n	80084e2 <_vfiprintf_r+0x1ea>
 8008518:	080091eb 	.word	0x080091eb
 800851c:	080091f1 	.word	0x080091f1
 8008520:	080091f5 	.word	0x080091f5
 8008524:	08005cf1 	.word	0x08005cf1
 8008528:	080082d5 	.word	0x080082d5

0800852c <_raise_r>:
 800852c:	291f      	cmp	r1, #31
 800852e:	b538      	push	{r3, r4, r5, lr}
 8008530:	4604      	mov	r4, r0
 8008532:	460d      	mov	r5, r1
 8008534:	d904      	bls.n	8008540 <_raise_r+0x14>
 8008536:	2316      	movs	r3, #22
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008542:	b112      	cbz	r2, 800854a <_raise_r+0x1e>
 8008544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008548:	b94b      	cbnz	r3, 800855e <_raise_r+0x32>
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f830 	bl	80085b0 <_getpid_r>
 8008550:	462a      	mov	r2, r5
 8008552:	4601      	mov	r1, r0
 8008554:	4620      	mov	r0, r4
 8008556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855a:	f000 b817 	b.w	800858c <_kill_r>
 800855e:	2b01      	cmp	r3, #1
 8008560:	d00a      	beq.n	8008578 <_raise_r+0x4c>
 8008562:	1c59      	adds	r1, r3, #1
 8008564:	d103      	bne.n	800856e <_raise_r+0x42>
 8008566:	2316      	movs	r3, #22
 8008568:	6003      	str	r3, [r0, #0]
 800856a:	2001      	movs	r0, #1
 800856c:	e7e7      	b.n	800853e <_raise_r+0x12>
 800856e:	2400      	movs	r4, #0
 8008570:	4628      	mov	r0, r5
 8008572:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008576:	4798      	blx	r3
 8008578:	2000      	movs	r0, #0
 800857a:	e7e0      	b.n	800853e <_raise_r+0x12>

0800857c <raise>:
 800857c:	4b02      	ldr	r3, [pc, #8]	; (8008588 <raise+0xc>)
 800857e:	4601      	mov	r1, r0
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	f7ff bfd3 	b.w	800852c <_raise_r>
 8008586:	bf00      	nop
 8008588:	20000080 	.word	0x20000080

0800858c <_kill_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	2300      	movs	r3, #0
 8008590:	4d06      	ldr	r5, [pc, #24]	; (80085ac <_kill_r+0x20>)
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	4611      	mov	r1, r2
 8008598:	602b      	str	r3, [r5, #0]
 800859a:	f7fa fb1e 	bl	8002bda <_kill>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	d102      	bne.n	80085a8 <_kill_r+0x1c>
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	b103      	cbz	r3, 80085a8 <_kill_r+0x1c>
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	bd38      	pop	{r3, r4, r5, pc}
 80085aa:	bf00      	nop
 80085ac:	200008fc 	.word	0x200008fc

080085b0 <_getpid_r>:
 80085b0:	f7fa bb0c 	b.w	8002bcc <_getpid>

080085b4 <_init>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr

080085c0 <_fini>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr
